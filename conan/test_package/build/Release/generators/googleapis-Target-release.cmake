# Avoid multiple calls to find_package to append duplicated properties to the targets
include_guard()########### VARIABLES #######################################################################
#############################################################################################
set(googleapis_FRAMEWORKS_FOUND_RELEASE "") # Will be filled later
conan_find_apple_frameworks(googleapis_FRAMEWORKS_FOUND_RELEASE "${googleapis_FRAMEWORKS_RELEASE}" "${googleapis_FRAMEWORK_DIRS_RELEASE}")

set(googleapis_LIBRARIES_TARGETS "") # Will be filled later


######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
if(NOT TARGET googleapis_DEPS_TARGET)
    add_library(googleapis_DEPS_TARGET INTERFACE IMPORTED)
endif()

set_property(TARGET googleapis_DEPS_TARGET
             PROPERTY INTERFACE_LINK_LIBRARIES
             $<$<CONFIG:Release>:${googleapis_FRAMEWORKS_FOUND_RELEASE}>
             $<$<CONFIG:Release>:${googleapis_SYSTEM_LIBS_RELEASE}>
             $<$<CONFIG:Release>:protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;protobuf::libprotobuf;googleapis::google_dataflow_v1beta3_dataflow_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_proto;protobuf::libprotobuf;googleapis::google_type_latlng_proto;googleapis::google_api_field_behavior_proto;googleapis::google_type_postal_address_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_geo_type_viewport_proto;protobuf::libprotobuf;googleapis::google_maps_addressvalidation_v1_addressvalidation_proto;protobuf::libprotobuf;googleapis::google_type_latlng_proto;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;protobuf::libprotobuf;googleapis::google_maps_regionlookup_v1alpha_regionlookup_proto;protobuf::libprotobuf;googleapis::google_type_latlng_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_maps_roads_v1op_roads_proto;protobuf::libprotobuf;googleapis::google_type_latlng_proto;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_type_money_proto;googleapis::google_api_client_proto;googleapis::google_geo_type_viewport_proto;protobuf::libprotobuf;googleapis::google_maps_routing_v2_routing_proto;protobuf::libprotobuf;googleapis::google_type_latlng_proto;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_type_money_proto;googleapis::google_api_client_proto;googleapis::google_geo_type_viewport_proto;protobuf::libprotobuf;googleapis::google_maps_routes_v1_routes_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_iam_v1_policy_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;googleapis::google_iam_v1_iam_policy_proto;protobuf::libprotobuf;googleapis::google_bigtable_admin_v2_admin_proto;protobuf::libprotobuf;googleapis::google_api_routing_proto;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_bigtable_v2_bigtable_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_type_timeofday_proto;googleapis::google_type_dayofweek_proto;googleapis::google_api_annotations_proto;googleapis::google_type_date_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_privacy_dlp_v2_dlp_proto;protobuf::libprotobuf;googleapis::google_type_expr_proto;googleapis::google_api_field_behavior_proto;googleapis::google_iam_v1_policy_proto;googleapis::google_identity_accesscontextmanager_type_type_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;googleapis::google_iam_v1_iam_policy_proto;protobuf::libprotobuf;googleapis::google_identity_accesscontextmanager_v1_accesscontextmanager_proto;protobuf::libprotobuf;googleapis::google_api_annotations_proto;protobuf::libprotobuf;googleapis::google_identity_accesscontextmanager_type_type_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;protobuf::libprotobuf;googleapis::google_chat_logging_v1_logging_proto;protobuf::libprotobuf;googleapis::google_type_latlng_proto;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;protobuf::libprotobuf;googleapis::google_firestore_v1_firestore_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_firestore_admin_v1_admin_proto;protobuf::libprotobuf;googleapis::google_firestore_v1_firestore_proto;protobuf::libprotobuf;googleapis::google_firestore_bundle_firestore_bundle_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_example_library_v1_library_proto;protobuf::libprotobuf;protobuf::libprotobuf;googleapis::google_networking_trafficdirector_type_type_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_appengine_v1_appengine_proto;protobuf::libprotobuf;googleapis::google_api_annotations_proto;protobuf::libprotobuf;googleapis::google_appengine_legacy_legacy_proto;protobuf::libprotobuf;googleapis::google_logging_type_type_proto;protobuf::libprotobuf;googleapis::google_appengine_logging_v1_logging_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;protobuf::libprotobuf;googleapis::google_chromeos_uidetection_v1_uidetection_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;protobuf::libprotobuf;googleapis::google_storagetransfer_logging_logging_proto;protobuf::libprotobuf;googleapis::google_type_latlng_proto;protobuf::libprotobuf;googleapis::google_geo_type_viewport_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;protobuf::libprotobuf;googleapis::google_longrunning_operations_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_iam_v1_iam_policy_proto;protobuf::libprotobuf;googleapis::google_storage_v1_storage_proto;protobuf::libprotobuf;googleapis::google_api_routing_proto;googleapis::google_api_field_behavior_proto;googleapis::google_iam_v1_policy_proto;googleapis::google_type_date_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;googleapis::google_iam_v1_iam_policy_proto;protobuf::libprotobuf;googleapis::google_storage_v2_storage_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_partner_aistreams_v1alpha1_aistreams_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_rpc_code_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_container_v1_container_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_rpc_code_proto;googleapis::google_api_annotations_proto;googleapis::google_type_date_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_container_v1beta1_container_proto;protobuf::libprotobuf;googleapis::google_api_annotations_proto;protobuf::libprotobuf;googleapis::google_container_v1alpha1_container_proto;protobuf::libprotobuf;googleapis::google_type_latlng_proto;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;protobuf::libprotobuf;googleapis::google_datastore_v1_datastore_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;protobuf::libprotobuf;googleapis::google_datastore_admin_v1_admin_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_iam_v1_options_proto;googleapis::google_iam_v1_policy_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_type_expr_proto;googleapis::google_api_annotations_proto;protobuf::libprotobuf;googleapis::google_api_annotations_proto;protobuf::libprotobuf;googleapis::google_iam_v1_iam_policy_proto;protobuf::libprotobuf;googleapis::google_iam_v1_options_proto;protobuf::libprotobuf;googleapis::google_iam_v1_policy_proto;protobuf::libprotobuf;googleapis::google_api_annotations_proto;googleapis::google_iam_v1_policy_proto;protobuf::libprotobuf;googleapis::google_iam_v1_logging_audit_data_proto;protobuf::libprotobuf;googleapis::google_type_expr_proto;googleapis::google_api_field_behavior_proto;googleapis::google_iam_v1_policy_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;googleapis::google_iam_v1_iam_policy_proto;protobuf::libprotobuf;googleapis::google_iam_admin_v1_admin_proto;protobuf::libprotobuf;googleapis::google_type_expr_proto;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;protobuf::libprotobuf;googleapis::google_iam_v2beta_iam_proto;protobuf::libprotobuf;googleapis::google_type_expr_proto;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;protobuf::libprotobuf;googleapis::google_iam_v2_iam_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_iam_credentials_v1_credentials_proto;protobuf::libprotobuf;protobuf::libprotobuf;protobuf::libprotobuf;protobuf::libprotobuf;protobuf::libprotobuf;protobuf::libprotobuf;protobuf::libprotobuf;protobuf::libprotobuf;protobuf::libprotobuf;protobuf::libprotobuf;protobuf::libprotobuf;protobuf::libprotobuf;protobuf::libprotobuf;protobuf::libprotobuf;protobuf::libprotobuf;protobuf::libprotobuf;protobuf::libprotobuf;googleapis::google_type_calendar_period_proto;protobuf::libprotobuf;googleapis::google_type_color_proto;protobuf::libprotobuf;googleapis::google_type_date_proto;protobuf::libprotobuf;googleapis::google_type_datetime_proto;protobuf::libprotobuf;googleapis::google_type_dayofweek_proto;protobuf::libprotobuf;googleapis::google_type_decimal_proto;protobuf::libprotobuf;googleapis::google_type_expr_proto;protobuf::libprotobuf;googleapis::google_type_fraction_proto;protobuf::libprotobuf;googleapis::google_type_interval_proto;protobuf::libprotobuf;googleapis::google_type_latlng_proto;protobuf::libprotobuf;googleapis::google_type_money_proto;protobuf::libprotobuf;googleapis::google_type_month_proto;protobuf::libprotobuf;googleapis::google_type_phone_number_proto;protobuf::libprotobuf;googleapis::google_type_postal_address_proto;protobuf::libprotobuf;googleapis::google_type_quaternion_proto;protobuf::libprotobuf;googleapis::google_type_timeofday_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_devtools_resultstore_v2_resultstore_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_iam_v1_policy_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;googleapis::google_iam_v1_iam_policy_proto;protobuf::libprotobuf;googleapis::google_devtools_artifactregistry_v1_artifactregistry_proto;protobuf::libprotobuf;googleapis::google_api_annotations_proto;protobuf::libprotobuf;googleapis::google_devtools_source_v1_source_proto;protobuf::libprotobuf;googleapis::google_api_httpbody_proto;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_devtools_cloudbuild_v1_cloudbuild_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_type_date_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;protobuf::libprotobuf;googleapis::google_devtools_testing_v1_testing_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_devtools_cloudtrace_v1_cloudtrace_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_devtools_cloudtrace_v2_cloudtrace_proto;protobuf::libprotobuf;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;protobuf::libprotobuf;googleapis::google_devtools_cloudprofiler_v2_cloudprofiler_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_iam_v1_policy_proto;googleapis::google_api_annotations_proto;googleapis::grafeas_v1_grafeas_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;googleapis::google_iam_v1_iam_policy_proto;protobuf::libprotobuf;googleapis::google_devtools_containeranalysis_v1_containeranalysis_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;protobuf::libprotobuf;googleapis::google_devtools_build_v1_build_proto;protobuf::libprotobuf;googleapis::google_devtools_source_v1_source_proto;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;protobuf::libprotobuf;googleapis::google_devtools_clouddebugger_v2_clouddebugger_proto;protobuf::libprotobuf;protobuf::libprotobuf;googleapis::google_cloud_extended_operations_proto;protobuf::libprotobuf;protobuf::libprotobuf;googleapis::google_cloud_networkanalyzer_logging_v1_logging_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_iam_v1_policy_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;googleapis::google_iam_v1_iam_policy_proto;protobuf::libprotobuf;googleapis::google_cloud_resourcemanager_v2_resourcemanager_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_iam_v1_policy_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;googleapis::google_iam_v1_iam_policy_proto;protobuf::libprotobuf;googleapis::google_cloud_resourcemanager_v3_resourcemanager_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_essentialcontacts_v1_essentialcontacts_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_commerce_consumer_procurement_v1alpha1_procurement_proto;protobuf::libprotobuf;googleapis::google_api_annotations_proto;protobuf::libprotobuf;googleapis::google_cloud_orgpolicy_v1_orgpolicy_proto;protobuf::libprotobuf;googleapis::google_type_expr_proto;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_orgpolicy_v2_orgpolicy_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_webrisk_v1_webrisk_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;protobuf::libprotobuf;googleapis::google_cloud_webrisk_v1beta1_webrisk_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_datastream_v1_datastream_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::grafeas_v1_grafeas_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_binaryauthorization_v1_binaryauthorization_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_connectors_v1_connectors_proto;protobuf::libprotobuf;googleapis::google_api_httpbody_proto;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_apigeeregistry_v1_apigeeregistry_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_beyondcorp_appgateways_v1_appgateways_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_beyondcorp_appconnectors_v1_appconnectors_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_beyondcorp_clientgateways_v1_clientgateways_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_beyondcorp_appconnections_v1_appconnections_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_kms_v1_kms_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_gaming_v1_gaming_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_resourcesettings_v1_resourcesettings_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_video_transcoder_v1_transcoder_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_video_stitcher_v1_stitcher_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_video_livestream_v1_livestream_proto;protobuf::libprotobuf;googleapis::google_cloud_video_livestream_v1_livestream_proto;googleapis::google_rpc_status_proto;protobuf::libprotobuf;googleapis::google_cloud_video_livestream_logging_v1_logging_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_networkservices_v1_networkservices_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_networkservices_v1beta1_networkservices_proto;protobuf::libprotobuf;googleapis::google_api_httpbody_proto;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_cloud_aiplatform_v1_schema_predict_instance_instance_proto;googleapis::google_cloud_aiplatform_v1_schema_predict_prediction_prediction_proto;googleapis::google_longrunning_operations_proto;googleapis::google_cloud_aiplatform_v1_schema_predict_params_params_proto;googleapis::google_api_annotations_proto;googleapis::google_type_money_proto;googleapis::google_api_client_proto;googleapis::google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_aiplatform_v1_aiplatform_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;protobuf::libprotobuf;googleapis::google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_proto;protobuf::libprotobuf;googleapis::google_api_annotations_proto;protobuf::libprotobuf;googleapis::google_cloud_aiplatform_v1_schema_predict_prediction_prediction_proto;protobuf::libprotobuf;googleapis::google_api_annotations_proto;protobuf::libprotobuf;googleapis::google_cloud_aiplatform_v1_schema_predict_params_params_proto;protobuf::libprotobuf;googleapis::google_api_annotations_proto;protobuf::libprotobuf;googleapis::google_cloud_aiplatform_v1_schema_predict_instance_instance_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;protobuf::libprotobuf;googleapis::google_cloud_aiplatform_logging_logging_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_iam_v1_policy_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;googleapis::google_iam_v1_iam_policy_proto;protobuf::libprotobuf;googleapis::google_cloud_tasks_v2_tasks_proto;protobuf::libprotobuf;googleapis::google_api_httpbody_proto;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_type_date_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_discoveryengine_v1beta_discoveryengine_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_type_money_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;googleapis::google_type_postal_address_proto;protobuf::libprotobuf;googleapis::google_cloud_domains_v1_domains_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_vpcaccess_v1_vpcaccess_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;googleapis::google_cloud_oslogin_common_common_proto;protobuf::libprotobuf;googleapis::google_cloud_oslogin_v1_oslogin_proto;protobuf::libprotobuf;googleapis::google_api_resource_proto;googleapis::google_api_field_behavior_proto;protobuf::libprotobuf;googleapis::google_cloud_oslogin_common_common_proto;protobuf::libprotobuf;googleapis::google_cloud_gkehub_v1_configmanagement_configmanagement_proto;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;googleapis::google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_proto;protobuf::libprotobuf;googleapis::google_cloud_gkehub_v1_gkehub_proto;protobuf::libprotobuf;googleapis::google_api_annotations_proto;protobuf::libprotobuf;googleapis::google_cloud_gkehub_v1_configmanagement_configmanagement_proto;protobuf::libprotobuf;googleapis::google_api_annotations_proto;protobuf::libprotobuf;googleapis::google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_gkehub_v1alpha2_gkehub_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_gkehub_v1beta1_gkehub_proto;protobuf::libprotobuf;googleapis::google_api_httpbody_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;protobuf::libprotobuf;googleapis::google_cloud_gkeconnect_gateway_v1_gateway_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_networkmanagement_v1_networkmanagement_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;protobuf::libprotobuf;googleapis::google_cloud_identitytoolkit_v2_identitytoolkit_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;protobuf::libprotobuf;googleapis::google_cloud_identitytoolkit_logging_logging_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_type_expr_proto;googleapis::google_api_field_behavior_proto;googleapis::google_iam_v1_policy_proto;googleapis::google_longrunning_operations_proto;googleapis::google_rpc_code_proto;googleapis::google_cloud_osconfig_v1_osconfig_proto;googleapis::google_identity_accesscontextmanager_v1_accesscontextmanager_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;googleapis::google_cloud_orgpolicy_v1_orgpolicy_proto;protobuf::libprotobuf;googleapis::google_cloud_asset_v1_asset_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_iam_v1_policy_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;googleapis::google_iam_v1_iam_policy_proto;protobuf::libprotobuf;googleapis::google_cloud_securitycenter_v1_securitycenter_proto;protobuf::libprotobuf;googleapis::google_type_latlng_proto;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_dialogflow_v2beta1_dialogflow_proto;protobuf::libprotobuf;googleapis::google_type_latlng_proto;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_dialogflow_v2_dialogflow_proto;protobuf::libprotobuf;googleapis::google_type_latlng_proto;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_dialogflow_cx_v3beta1_cx_proto;protobuf::libprotobuf;googleapis::google_type_latlng_proto;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_dialogflow_cx_v3_cx_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_type_datetime_proto;googleapis::google_api_annotations_proto;googleapis::google_type_date_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_storageinsights_v1_storageinsights_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_type_datetime_proto;googleapis::google_type_color_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_launch_stage_proto;googleapis::google_type_date_proto;googleapis::google_api_resource_proto;googleapis::google_type_money_proto;googleapis::google_type_postal_address_proto;protobuf::libprotobuf;googleapis::google_cloud_documentai_v1beta3_documentai_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_type_datetime_proto;googleapis::google_type_color_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_launch_stage_proto;googleapis::google_type_date_proto;googleapis::google_api_resource_proto;googleapis::google_type_money_proto;googleapis::google_type_postal_address_proto;protobuf::libprotobuf;googleapis::google_cloud_documentai_v1_documentai_proto;protobuf::libprotobuf;googleapis::google_type_expr_proto;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_security_privateca_v1_privateca_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_security_publicca_v1beta1_publicca_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_translate_v3_translation_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_type_timeofday_proto;googleapis::google_longrunning_operations_proto;googleapis::google_type_dayofweek_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_redis_v1_redis_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_type_timeofday_proto;googleapis::google_longrunning_operations_proto;googleapis::google_type_dayofweek_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_redis_v1beta1_redis_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_iam_v1_policy_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;googleapis::google_iam_v1_iam_policy_proto;protobuf::libprotobuf;googleapis::google_cloud_dataplex_v1_dataplex_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_shell_v1_shell_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_accessapproval_v1_accessapproval_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_type_date_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_deploy_v1_deploy_proto;protobuf::libprotobuf;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;protobuf::libprotobuf;googleapis::google_cloud_location_location_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_websecurityscanner_v1_websecurityscanner_proto;protobuf::libprotobuf;googleapis::google_type_latlng_proto;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;protobuf::libprotobuf;googleapis::google_cloud_optimization_v1_optimization_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_recaptchaenterprise_v1_recaptchaenterprise_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_contactcenterinsights_v1_contactcenterinsights_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;protobuf::libprotobuf;googleapis::google_cloud_healthcare_logging_logging_proto;protobuf::libprotobuf;googleapis::google_cloud_common_common_proto;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_filestore_v1_filestore_proto;protobuf::libprotobuf;protobuf::libprotobuf;googleapis::google_cloud_stream_logging_v1_logging_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_datafusion_v1_datafusion_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_rpc_error_details_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_vmmigration_v1_vmmigration_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_workflows_v1_workflows_proto;protobuf::libprotobuf;protobuf::libprotobuf;googleapis::google_cloud_workflows_type_type_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_workflows_executions_v1_executions_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_iam_v1_policy_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;googleapis::google_iam_v1_iam_policy_proto;protobuf::libprotobuf;googleapis::google_cloud_secretmanager_v1_secretmanager_proto;protobuf::libprotobuf;protobuf::libprotobuf;googleapis::google_cloud_secretmanager_logging_v1_logging_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_scheduler_v1_scheduler_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;protobuf::libprotobuf;googleapis::google_cloud_language_v1_language_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;protobuf::libprotobuf;googleapis::google_cloud_language_v1beta2_language_proto;protobuf::libprotobuf;googleapis::google_api_httpbody_proto;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_type_date_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_retail_v2beta_retail_proto;protobuf::libprotobuf;googleapis::google_api_httpbody_proto;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_type_date_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_retail_v2_retail_proto;protobuf::libprotobuf;googleapis::google_api_httpbody_proto;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_type_date_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_retail_v2alpha_retail_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_iam_v1_policy_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;googleapis::google_iam_v1_iam_policy_proto;protobuf::libprotobuf;googleapis::google_cloud_bigquery_connection_v1_connection_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_iam_v1_policy_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;googleapis::google_iam_v1_iam_policy_proto;protobuf::libprotobuf;googleapis::google_cloud_bigquery_analyticshub_v1_analyticshub_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_bigquery_reservation_v1_reservation_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_bigquery_storage_v1_storage_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_bigquery_storage_v1beta2_storage_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_bigquery_storage_v1beta1_storage_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_bigquery_datatransfer_v1_datatransfer_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;protobuf::libprotobuf;googleapis::google_cloud_bigquery_v2_bigquery_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_iam_v1_policy_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;googleapis::google_iam_v1_iam_policy_proto;protobuf::libprotobuf;googleapis::google_cloud_bigquery_datapolicies_v1beta1_datapolicies_proto;protobuf::libprotobuf;googleapis::google_api_distribution_proto;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_metric_proto;googleapis::google_api_client_proto;googleapis::google_rpc_error_details_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_bigquery_migration_v2_migration_proto;protobuf::libprotobuf;googleapis::google_iam_v1_iam_policy_proto;googleapis::google_rpc_status_proto;googleapis::google_iam_v1_policy_proto;protobuf::libprotobuf;googleapis::google_cloud_bigquery_logging_v1_logging_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_iam_v1_policy_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;googleapis::google_iam_v1_iam_policy_proto;protobuf::libprotobuf;googleapis::google_cloud_bigquery_dataexchange_v1beta1_dataexchange_proto;protobuf::libprotobuf;googleapis::google_type_latlng_proto;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_type_color_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_vision_v1_vision_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_automl_v1_automl_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_speech_v1_speech_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_speech_v2_speech_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_iam_v1_policy_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;googleapis::google_iam_v1_iam_policy_proto;protobuf::libprotobuf;googleapis::google_cloud_iot_v1_iot_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_ids_v1_ids_proto;protobuf::libprotobuf;protobuf::libprotobuf;googleapis::google_cloud_ids_logging_v1_logging_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;protobuf::libprotobuf;googleapis::google_cloud_videointelligence_v1_videointelligence_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_gkebackup_v1_gkebackup_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;protobuf::libprotobuf;googleapis::google_cloud_gkebackup_logging_v1_logging_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_type_datetime_proto;googleapis::google_type_decimal_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_type_date_proto;googleapis::google_api_client_proto;googleapis::google_type_money_proto;googleapis::google_api_resource_proto;googleapis::google_type_postal_address_proto;protobuf::libprotobuf;googleapis::google_cloud_channel_v1_channel_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_memcache_v1_memcache_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_iam_v1_policy_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;googleapis::google_iam_v1_iam_policy_proto;protobuf::libprotobuf;googleapis::google_cloud_iap_v1_iap_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;protobuf::libprotobuf;googleapis::google_cloud_common_common_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_iam_v1_policy_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;googleapis::google_iam_v1_iam_policy_proto;protobuf::libprotobuf;googleapis::google_cloud_servicedirectory_v1_servicedirectory_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_edgecontainer_v1_edgecontainer_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_type_money_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_recommender_v1_recommender_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_type_money_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_recommender_v1beta1_recommender_proto;protobuf::libprotobuf;googleapis::google_api_resource_proto;googleapis::google_api_field_behavior_proto;googleapis::google_cloud_recommender_v1_recommender_proto;protobuf::libprotobuf;googleapis::google_cloud_recommender_logging_v1_logging_proto;protobuf::libprotobuf;googleapis::google_rpc_context_attribute_context_proto;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_iam_v1_policy_proto;protobuf::libprotobuf;googleapis::google_cloud_audit_audit_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_clouddms_v1_clouddms_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_rpc_status_proto;protobuf::libprotobuf;googleapis::google_cloud_clouddms_logging_v1_logging_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_timeseriesinsights_v1_timeseriesinsights_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_networkconnectivity_v1_networkconnectivity_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_batch_v1_batch_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_batch_v1alpha_batch_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_rpc_code_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_eventarc_v1_eventarc_proto;protobuf::libprotobuf;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;protobuf::libprotobuf;googleapis::google_cloud_eventarc_publishing_v1_publishing_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_type_date_proto;googleapis::google_api_client_proto;googleapis::google_type_money_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_type_datetime_proto;googleapis::google_iam_v1_policy_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;googleapis::google_type_interval_proto;googleapis::google_cloud_documentai_v1_documentai_proto;protobuf::libprotobuf;googleapis::google_cloud_contentwarehouse_v1_contentwarehouse_proto;protobuf::libprotobuf;googleapis::google_cloud_securitycenter_v1_securitycenter_proto;protobuf::libprotobuf;googleapis::google_cloud_sensitiveaction_logging_v1_logging_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_gkemulticloud_v1_gkemulticloud_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_type_date_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_orchestration_airflow_service_v1_service_proto;protobuf::libprotobuf;protobuf::libprotobuf;googleapis::google_cloud_saasaccelerator_management_logs_v1_logs_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_texttospeech_v1_texttospeech_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_iam_v1_policy_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;googleapis::google_iam_v1_iam_policy_proto;protobuf::libprotobuf;googleapis::google_cloud_functions_v1_functions_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_functions_v2beta_functions_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_functions_v2_functions_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_functions_v2alpha_functions_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_apigeeconnect_v1_apigeeconnect_proto;protobuf::libprotobuf;googleapis::google_apps_script_type_docs_docs_proto;googleapis::google_apps_script_type_type_proto;googleapis::google_api_field_behavior_proto;googleapis::google_apps_script_type_drive_drive_proto;googleapis::google_apps_script_type_calendar_calendar_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_apps_script_type_slides_slides_proto;googleapis::google_api_resource_proto;googleapis::google_apps_script_type_sheets_sheets_proto;googleapis::google_apps_script_type_gmail_gmail_proto;protobuf::libprotobuf;googleapis::google_cloud_gsuiteaddons_v1_gsuiteaddons_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;protobuf::libprotobuf;googleapis::google_cloud_gsuiteaddons_logging_v1_logging_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_tpu_v1_tpu_proto;protobuf::libprotobuf;googleapis::google_api_routing_proto;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_iam_v1_policy_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_launch_stage_proto;googleapis::google_api_resource_proto;googleapis::google_iam_v1_iam_policy_proto;protobuf::libprotobuf;googleapis::google_cloud_run_v2_run_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_networksecurity_v1beta1_networksecurity_proto;protobuf::libprotobuf;googleapis::google_type_expr_proto;googleapis::google_api_field_behavior_proto;googleapis::google_iam_v1_policy_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;protobuf::libprotobuf;googleapis::google_cloud_policytroubleshooter_v1_policytroubleshooter_proto;protobuf::libprotobuf;protobuf::libprotobuf;googleapis::google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_assuredworkloads_v1_assuredworkloads_proto;protobuf::libprotobuf;protobuf::libprotobuf;googleapis::google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_assuredworkloads_v1beta1_assuredworkloads_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_vmwareengine_v1_vmwareengine_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;googleapis::google_type_interval_proto;protobuf::libprotobuf;googleapis::google_cloud_dataform_v1alpha2_dataform_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;googleapis::google_type_interval_proto;protobuf::libprotobuf;googleapis::google_cloud_dataform_v1beta1_dataform_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_notebooks_v1_notebooks_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;protobuf::libprotobuf;googleapis::google_cloud_notebooks_logging_v1_logging_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_iam_v1_policy_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;googleapis::google_iam_v1_iam_policy_proto;protobuf::libprotobuf;googleapis::google_cloud_datacatalog_v1_datacatalog_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_type_datetime_proto;googleapis::google_type_timeofday_proto;googleapis::google_longrunning_operations_proto;googleapis::google_type_dayofweek_proto;googleapis::google_api_annotations_proto;googleapis::google_type_date_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_osconfig_v1_osconfig_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_type_date_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_osconfig_v1alpha_osconfig_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_type_datetime_proto;googleapis::google_type_timeofday_proto;googleapis::google_type_dayofweek_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_osconfig_v1beta_osconfig_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_type_date_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_osconfig_agentendpoint_v1_agentendpoint_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;protobuf::libprotobuf;googleapis::google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_type_datetime_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_visionai_v1alpha1_visionai_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_iam_v1_policy_proto;googleapis::google_api_annotations_proto;googleapis::google_type_money_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;googleapis::google_iam_v1_iam_policy_proto;protobuf::libprotobuf;googleapis::google_cloud_billing_v1_billing_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_type_date_proto;googleapis::google_api_client_proto;googleapis::google_type_money_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_billing_budgets_v1_budgets_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_apigateway_v1_apigateway_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_type_dayofweek_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_metastore_v1_metastore_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_type_dayofweek_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_metastore_v1alpha_metastore_proto;protobuf::libprotobuf;protobuf::libprotobuf;googleapis::google_cloud_metastore_logging_v1_logging_proto;protobuf::libprotobuf;googleapis::google_api_resource_proto;googleapis::google_rpc_status_proto;protobuf::libprotobuf;googleapis::google_cloud_cloudsetup_logging_v1_logging_proto;protobuf::libprotobuf;googleapis::google_type_latlng_proto;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_type_timeofday_proto;googleapis::google_longrunning_operations_proto;googleapis::google_type_dayofweek_proto;googleapis::google_api_annotations_proto;googleapis::google_type_date_proto;googleapis::google_api_client_proto;googleapis::google_type_money_proto;googleapis::google_api_resource_proto;googleapis::google_type_postal_address_proto;protobuf::libprotobuf;googleapis::google_cloud_talent_v4beta1_talent_proto;protobuf::libprotobuf;googleapis::google_type_latlng_proto;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_type_timeofday_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_type_money_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;googleapis::google_type_postal_address_proto;protobuf::libprotobuf;googleapis::google_cloud_talent_v4_talent_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_pubsublite_v1_pubsublite_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_certificatemanager_v1_certificatemanager_proto;protobuf::libprotobuf;protobuf::libprotobuf;googleapis::google_cloud_certificatemanager_logging_v1_logging_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_dataproc_v1_dataproc_proto;protobuf::libprotobuf;protobuf::libprotobuf;googleapis::google_cloud_dataproc_logging_logging_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_baremetalsolution_v2_baremetalsolution_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_managedidentities_v1_managedidentities_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_cloud_managedidentities_v1beta1_managedidentities_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;protobuf::libprotobuf;googleapis::google_cloud_sql_v1beta4_sql_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;protobuf::libprotobuf;googleapis::google_cloud_sql_v1_sql_proto;protobuf::libprotobuf;googleapis::google_type_date_proto;protobuf::libprotobuf;googleapis::google_type_datetime_proto;protobuf::libprotobuf;googleapis::google_actions_type_date_range_proto;protobuf::libprotobuf;googleapis::google_actions_type_datetime_range_proto;protobuf::libprotobuf;googleapis::google_api_http_proto;protobuf::libprotobuf;googleapis::google_api_annotations_proto;protobuf::libprotobuf;protobuf::libprotobuf;googleapis::google_api_metric_proto;googleapis::google_api_annotations_proto;protobuf::libprotobuf;protobuf::libprotobuf;protobuf::libprotobuf;protobuf::libprotobuf;protobuf::libprotobuf;protobuf::libprotobuf;googleapis::google_api_annotations_proto;protobuf::libprotobuf;protobuf::libprotobuf;googleapis::google_api_annotations_proto;protobuf::libprotobuf;protobuf::libprotobuf;protobuf::libprotobuf;protobuf::libprotobuf;protobuf::libprotobuf;protobuf::libprotobuf;googleapis::google_api_label_proto;protobuf::libprotobuf;googleapis::google_api_label_proto;googleapis::google_api_annotations_proto;protobuf::libprotobuf;googleapis::google_api_label_proto;googleapis::google_api_launch_stage_proto;protobuf::libprotobuf;googleapis::google_api_label_proto;googleapis::google_api_launch_stage_proto;protobuf::libprotobuf;googleapis::google_api_annotations_proto;protobuf::libprotobuf;googleapis::google_api_annotations_proto;protobuf::libprotobuf;protobuf::libprotobuf;protobuf::libprotobuf;googleapis::google_api_context_proto;googleapis::google_api_label_proto;googleapis::google_api_log_proto;googleapis::google_api_source_info_proto;googleapis::google_api_documentation_proto;googleapis::google_api_billing_proto;googleapis::google_api_backend_proto;googleapis::google_api_endpoint_proto;googleapis::google_api_monitoring_proto;googleapis::google_api_usage_proto;googleapis::google_api_control_proto;googleapis::google_api_annotations_proto;googleapis::google_api_metric_proto;googleapis::google_api_logging_proto;googleapis::google_api_quota_proto;googleapis::google_api_system_parameter_proto;googleapis::google_api_auth_proto;googleapis::google_api_monitored_resource_proto;googleapis::google_api_http_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;protobuf::libprotobuf;protobuf::libprotobuf;googleapis::google_api_visibility_proto;googleapis::google_api_annotations_proto;protobuf::libprotobuf;protobuf::libprotobuf;googleapis::google_api_annotations_proto;protobuf::libprotobuf;googleapis::google_api_auth_proto;protobuf::libprotobuf;googleapis::google_api_backend_proto;protobuf::libprotobuf;googleapis::google_api_billing_proto;protobuf::libprotobuf;googleapis::google_api_client_proto;protobuf::libprotobuf;googleapis::google_api_config_change_proto;protobuf::libprotobuf;googleapis::google_api_consumer_proto;protobuf::libprotobuf;googleapis::google_api_context_proto;protobuf::libprotobuf;googleapis::google_api_control_proto;protobuf::libprotobuf;googleapis::google_api_distribution_proto;protobuf::libprotobuf;googleapis::google_api_documentation_proto;protobuf::libprotobuf;googleapis::google_api_endpoint_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;protobuf::libprotobuf;googleapis::google_api_http_proto;protobuf::libprotobuf;googleapis::google_api_httpbody_proto;protobuf::libprotobuf;googleapis::google_api_label_proto;protobuf::libprotobuf;googleapis::google_api_launch_stage_proto;protobuf::libprotobuf;googleapis::google_api_log_proto;protobuf::libprotobuf;googleapis::google_api_logging_proto;protobuf::libprotobuf;googleapis::google_api_metric_proto;protobuf::libprotobuf;googleapis::google_api_monitored_resource_proto;protobuf::libprotobuf;googleapis::google_api_monitoring_proto;protobuf::libprotobuf;googleapis::google_api_quota_proto;protobuf::libprotobuf;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_api_routing_proto;protobuf::libprotobuf;googleapis::google_api_service_proto;protobuf::libprotobuf;googleapis::google_api_source_info_proto;protobuf::libprotobuf;googleapis::google_api_system_parameter_proto;protobuf::libprotobuf;googleapis::google_api_usage_proto;protobuf::libprotobuf;googleapis::google_api_visibility_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_service_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_config_change_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;protobuf::libprotobuf;googleapis::google_api_servicemanagement_v1_servicemanagement_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_api_apikeys_v2_apikeys_proto;protobuf::libprotobuf;googleapis::google_api_expr_v1beta1_expr_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_api_expr_v1beta1_value_proto;protobuf::libprotobuf;googleapis::google_api_expr_v1beta1_source_proto;protobuf::libprotobuf;protobuf::libprotobuf;protobuf::libprotobuf;googleapis::google_api_expr_v1beta1_decl_proto;protobuf::libprotobuf;googleapis::google_api_expr_v1beta1_eval_proto;protobuf::libprotobuf;googleapis::google_api_expr_v1beta1_expr_proto;protobuf::libprotobuf;googleapis::google_api_expr_v1beta1_source_proto;protobuf::libprotobuf;googleapis::google_api_expr_v1beta1_value_proto;protobuf::libprotobuf;googleapis::google_api_expr_v1alpha1_syntax_proto;protobuf::libprotobuf;googleapis::google_api_expr_v1alpha1_value_proto;googleapis::google_rpc_status_proto;protobuf::libprotobuf;googleapis::google_api_expr_v1alpha1_value_proto;protobuf::libprotobuf;protobuf::libprotobuf;protobuf::libprotobuf;googleapis::google_api_expr_v1alpha1_checked_proto;protobuf::libprotobuf;googleapis::google_api_expr_v1alpha1_eval_proto;protobuf::libprotobuf;googleapis::google_api_expr_v1alpha1_explain_proto;protobuf::libprotobuf;googleapis::google_api_expr_v1alpha1_syntax_proto;protobuf::libprotobuf;googleapis::google_api_expr_v1alpha1_value_proto;protobuf::libprotobuf;googleapis::google_api_expr_v1alpha1_checked_proto;googleapis::google_rpc_status_proto;googleapis::google_api_expr_v1alpha1_eval_proto;googleapis::google_api_expr_v1alpha1_syntax_proto;googleapis::google_api_client_proto;protobuf::libprotobuf;googleapis::google_api_expr_conformance_v1alpha1_conformance_proto;protobuf::libprotobuf;googleapis::google_api_distribution_proto;googleapis::google_rpc_status_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_logging_type_type_proto;protobuf::libprotobuf;googleapis::google_api_servicecontrol_v1_servicecontrol_proto;protobuf::libprotobuf;googleapis::google_rpc_context_attribute_context_proto;googleapis::google_rpc_status_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;protobuf::libprotobuf;googleapis::google_api_servicecontrol_v2_servicecontrol_proto;protobuf::libprotobuf;googleapis::google_api_endpoint_proto;googleapis::google_api_auth_proto;googleapis::google_api_documentation_proto;googleapis::google_api_monitoring_proto;googleapis::google_api_monitored_resource_proto;googleapis::google_api_usage_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_quota_proto;protobuf::libprotobuf;googleapis::google_api_serviceusage_v1_serviceusage_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_pubsub_v1_pubsub_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_spanner_v1_spanner_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_iam_v1_policy_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;googleapis::google_iam_v1_iam_policy_proto;protobuf::libprotobuf;googleapis::google_spanner_admin_database_v1_database_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_iam_v1_policy_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;googleapis::google_iam_v1_iam_policy_proto;protobuf::libprotobuf;googleapis::google_spanner_admin_instance_v1_instance_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_monitoring_metricsscope_v1_metricsscope_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_monitoring_dashboard_v1_dashboard_proto;protobuf::libprotobuf;googleapis::google_api_distribution_proto;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_monitored_resource_proto;googleapis::google_type_calendar_period_proto;googleapis::google_api_annotations_proto;googleapis::google_api_label_proto;googleapis::google_api_client_proto;googleapis::google_api_metric_proto;googleapis::google_api_resource_proto;googleapis::google_api_launch_stage_proto;protobuf::libprotobuf;googleapis::google_monitoring_v3_monitoring_proto;protobuf::libprotobuf;protobuf::libprotobuf;protobuf::libprotobuf;protobuf::libprotobuf;googleapis::google_rpc_code_proto;protobuf::libprotobuf;googleapis::google_rpc_error_details_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;protobuf::libprotobuf;protobuf::libprotobuf;googleapis::google_rpc_context_attribute_context_proto;protobuf::libprotobuf;googleapis::google_type_latlng_proto;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;protobuf::libprotobuf;googleapis::google_streetview_publish_v1_publish_proto;protobuf::libprotobuf;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_apps_script_type_type_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_apps_script_type_type_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_apps_script_type_type_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_apps_script_type_type_proto;protobuf::libprotobuf;googleapis::google_apps_script_type_type_proto;protobuf::libprotobuf;googleapis::google_apps_script_type_type_proto;protobuf::libprotobuf;googleapis::google_api_distribution_proto;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_longrunning_operations_proto;googleapis::google_api_monitored_resource_proto;googleapis::google_logging_type_type_proto;googleapis::google_api_annotations_proto;googleapis::google_api_metric_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_logging_v2_logging_proto;protobuf::libprotobuf;googleapis::google_api_annotations_proto;protobuf::libprotobuf;googleapis::google_logging_type_type_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_analytics_admin_v1alpha_admin_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_analytics_admin_v1beta_admin_proto;protobuf::libprotobuf;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;protobuf::libprotobuf;googleapis::google_analytics_data_v1alpha_data_proto;protobuf::libprotobuf;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::google_analytics_data_v1beta_data_proto;protobuf::libprotobuf;googleapis::google_rpc_status_proto;googleapis::google_api_field_behavior_proto;googleapis::google_api_annotations_proto;googleapis::google_api_client_proto;googleapis::google_api_resource_proto;protobuf::libprotobuf;googleapis::grafeas_v1_grafeas_proto>
             APPEND)

####### Find the libraries declared in cpp_info.libs, create an IMPORTED target for each one and link the
####### googleapis_DEPS_TARGET to all of them
conan_package_library_targets("${googleapis_LIBS_RELEASE}"    # libraries
                              "${googleapis_LIB_DIRS_RELEASE}" # package_libdir
                              googleapis_DEPS_TARGET
                              googleapis_LIBRARIES_TARGETS  # out_libraries_targets
                              "_RELEASE"
                              "googleapis")    # package_name

# FIXME: What is the result of this for multi-config? All configs adding themselves to path?
set(CMAKE_MODULE_PATH ${googleapis_BUILD_DIRS_RELEASE} ${CMAKE_MODULE_PATH})

########## COMPONENTS TARGET PROPERTIES Release ########################################

    ########## COMPONENT googleapis::google_cloud_asset_v1_asset_cc_proto #############

        set(googleapis_googleapis_google_cloud_asset_v1_asset_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_asset_v1_asset_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_asset_v1_asset_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_asset_v1_asset_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_asset_v1_asset_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_asset_v1_asset_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_asset_v1_asset_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_asset_v1_asset_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_asset_v1_asset_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_asset_v1_asset_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_asset_v1_asset_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_asset_v1_asset_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_asset_v1_asset_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_asset_v1_asset_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_asset_v1_asset_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_asset_v1_asset_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_asset_v1_asset_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_asset_v1_asset_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_asset_v1_asset_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_asset_v1_asset_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_asset_v1_asset_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_asset_v1_asset_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_asset_v1_asset_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_asset_v1_asset_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_asset_v1_asset_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_asset_v1_asset_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_asset_v1_asset_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_asset_v1_asset_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_asset_v1_asset_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_asset_v1_asset_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_asset_v1_asset_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_asset_v1_asset_proto #############

        set(googleapis_googleapis_google_cloud_asset_v1_asset_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_asset_v1_asset_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_asset_v1_asset_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_asset_v1_asset_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_asset_v1_asset_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_asset_v1_asset_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_asset_v1_asset_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_asset_v1_asset_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_asset_v1_asset_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_asset_v1_asset_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_asset_v1_asset_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_asset_v1_asset_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_asset_v1_asset_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_asset_v1_asset_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_asset_v1_asset_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_asset_v1_asset_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_asset_v1_asset_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_asset_v1_asset_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_asset_v1_asset_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_asset_v1_asset_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_asset_v1_asset_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_asset_v1_asset_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_asset_v1_asset_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_asset_v1_asset_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_asset_v1_asset_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_asset_v1_asset_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_asset_v1_asset_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_asset_v1_asset_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_asset_v1_asset_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_asset_v1_asset_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_asset_v1_asset_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_storage_v2_storage_cc_proto #############

        set(googleapis_googleapis_google_storage_v2_storage_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_storage_v2_storage_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_storage_v2_storage_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_storage_v2_storage_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_storage_v2_storage_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_storage_v2_storage_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_storage_v2_storage_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_storage_v2_storage_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storage_v2_storage_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storage_v2_storage_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storage_v2_storage_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_storage_v2_storage_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_storage_v2_storage_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_storage_v2_storage_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_storage_v2_storage_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_storage_v2_storage_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_storage_v2_storage_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_storage_v2_storage_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storage_v2_storage_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storage_v2_storage_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_storage_v2_storage_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_storage_v2_storage_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_storage_v2_storage_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_storage_v2_storage_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storage_v2_storage_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_storage_v2_storage_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storage_v2_storage_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_storage_v2_storage_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storage_v2_storage_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_storage_v2_storage_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storage_v2_storage_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_storage_v2_storage_proto #############

        set(googleapis_googleapis_google_storage_v2_storage_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_storage_v2_storage_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_storage_v2_storage_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_storage_v2_storage_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_storage_v2_storage_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_storage_v2_storage_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_storage_v2_storage_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_storage_v2_storage_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storage_v2_storage_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storage_v2_storage_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storage_v2_storage_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_storage_v2_storage_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_storage_v2_storage_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_storage_v2_storage_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_storage_v2_storage_proto_DEPS_TARGET
                                      googleapis_googleapis_google_storage_v2_storage_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_storage_v2_storage_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_storage_v2_storage_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storage_v2_storage_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storage_v2_storage_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_storage_v2_storage_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_storage_v2_storage_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_storage_v2_storage_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_storage_v2_storage_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storage_v2_storage_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_storage_v2_storage_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storage_v2_storage_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_storage_v2_storage_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storage_v2_storage_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_storage_v2_storage_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storage_v2_storage_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_storage_v1_storage_cc_proto #############

        set(googleapis_googleapis_google_storage_v1_storage_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_storage_v1_storage_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_storage_v1_storage_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_storage_v1_storage_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_storage_v1_storage_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_storage_v1_storage_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_storage_v1_storage_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_storage_v1_storage_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storage_v1_storage_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storage_v1_storage_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storage_v1_storage_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_storage_v1_storage_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_storage_v1_storage_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_storage_v1_storage_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_storage_v1_storage_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_storage_v1_storage_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_storage_v1_storage_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_storage_v1_storage_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storage_v1_storage_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storage_v1_storage_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_storage_v1_storage_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_storage_v1_storage_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_storage_v1_storage_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_storage_v1_storage_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storage_v1_storage_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_storage_v1_storage_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storage_v1_storage_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_storage_v1_storage_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storage_v1_storage_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_storage_v1_storage_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storage_v1_storage_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_storage_v1_storage_proto #############

        set(googleapis_googleapis_google_storage_v1_storage_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_storage_v1_storage_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_storage_v1_storage_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_storage_v1_storage_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_storage_v1_storage_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_storage_v1_storage_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_storage_v1_storage_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_storage_v1_storage_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storage_v1_storage_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storage_v1_storage_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storage_v1_storage_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_storage_v1_storage_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_storage_v1_storage_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_storage_v1_storage_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_storage_v1_storage_proto_DEPS_TARGET
                                      googleapis_googleapis_google_storage_v1_storage_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_storage_v1_storage_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_storage_v1_storage_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storage_v1_storage_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storage_v1_storage_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_storage_v1_storage_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_storage_v1_storage_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_storage_v1_storage_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_storage_v1_storage_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storage_v1_storage_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_storage_v1_storage_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storage_v1_storage_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_storage_v1_storage_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storage_v1_storage_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_storage_v1_storage_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storage_v1_storage_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_identity_accesscontextmanager_v1_accesscontextmanager_cc_proto #############

        set(googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_identity_accesscontextmanager_v1_accesscontextmanager_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_identity_accesscontextmanager_v1_accesscontextmanager_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_identity_accesscontextmanager_v1_accesscontextmanager_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_identity_accesscontextmanager_v1_accesscontextmanager_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_identity_accesscontextmanager_v1_accesscontextmanager_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_identity_accesscontextmanager_v1_accesscontextmanager_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_identity_accesscontextmanager_v1_accesscontextmanager_proto #############

        set(googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_proto_DEPS_TARGET
                                      googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_identity_accesscontextmanager_v1_accesscontextmanager_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_identity_accesscontextmanager_v1_accesscontextmanager_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_identity_accesscontextmanager_v1_accesscontextmanager_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_identity_accesscontextmanager_v1_accesscontextmanager_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_identity_accesscontextmanager_v1_accesscontextmanager_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_identity_accesscontextmanager_v1_accesscontextmanager_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_identity_accesscontextmanager_v1_accesscontextmanager_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_bigtable_admin_v2_admin_cc_proto #############

        set(googleapis_googleapis_google_bigtable_admin_v2_admin_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_bigtable_admin_v2_admin_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_bigtable_admin_v2_admin_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_bigtable_admin_v2_admin_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_bigtable_admin_v2_admin_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_bigtable_admin_v2_admin_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_bigtable_admin_v2_admin_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_bigtable_admin_v2_admin_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_bigtable_admin_v2_admin_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_bigtable_admin_v2_admin_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_bigtable_admin_v2_admin_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_bigtable_admin_v2_admin_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_bigtable_admin_v2_admin_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_bigtable_admin_v2_admin_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_bigtable_admin_v2_admin_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_bigtable_admin_v2_admin_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_bigtable_admin_v2_admin_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_bigtable_admin_v2_admin_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_bigtable_admin_v2_admin_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_bigtable_admin_v2_admin_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_bigtable_admin_v2_admin_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_bigtable_admin_v2_admin_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_bigtable_admin_v2_admin_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_bigtable_admin_v2_admin_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_bigtable_admin_v2_admin_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_bigtable_admin_v2_admin_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_bigtable_admin_v2_admin_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_bigtable_admin_v2_admin_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_bigtable_admin_v2_admin_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_bigtable_admin_v2_admin_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_bigtable_admin_v2_admin_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_bigtable_admin_v2_admin_proto #############

        set(googleapis_googleapis_google_bigtable_admin_v2_admin_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_bigtable_admin_v2_admin_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_bigtable_admin_v2_admin_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_bigtable_admin_v2_admin_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_bigtable_admin_v2_admin_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_bigtable_admin_v2_admin_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_bigtable_admin_v2_admin_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_bigtable_admin_v2_admin_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_bigtable_admin_v2_admin_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_bigtable_admin_v2_admin_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_bigtable_admin_v2_admin_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_bigtable_admin_v2_admin_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_bigtable_admin_v2_admin_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_bigtable_admin_v2_admin_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_bigtable_admin_v2_admin_proto_DEPS_TARGET
                                      googleapis_googleapis_google_bigtable_admin_v2_admin_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_bigtable_admin_v2_admin_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_bigtable_admin_v2_admin_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_bigtable_admin_v2_admin_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_bigtable_admin_v2_admin_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_bigtable_admin_v2_admin_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_bigtable_admin_v2_admin_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_bigtable_admin_v2_admin_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_bigtable_admin_v2_admin_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_bigtable_admin_v2_admin_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_bigtable_admin_v2_admin_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_bigtable_admin_v2_admin_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_bigtable_admin_v2_admin_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_bigtable_admin_v2_admin_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_bigtable_admin_v2_admin_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_bigtable_admin_v2_admin_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_spanner_admin_instance_v1_instance_cc_proto #############

        set(googleapis_googleapis_google_spanner_admin_instance_v1_instance_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_spanner_admin_instance_v1_instance_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_spanner_admin_instance_v1_instance_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_spanner_admin_instance_v1_instance_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_spanner_admin_instance_v1_instance_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_spanner_admin_instance_v1_instance_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_spanner_admin_instance_v1_instance_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_spanner_admin_instance_v1_instance_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_admin_instance_v1_instance_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_admin_instance_v1_instance_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_admin_instance_v1_instance_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_spanner_admin_instance_v1_instance_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_spanner_admin_instance_v1_instance_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_spanner_admin_instance_v1_instance_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_spanner_admin_instance_v1_instance_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_spanner_admin_instance_v1_instance_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_spanner_admin_instance_v1_instance_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_spanner_admin_instance_v1_instance_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_admin_instance_v1_instance_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_admin_instance_v1_instance_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_spanner_admin_instance_v1_instance_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_spanner_admin_instance_v1_instance_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_spanner_admin_instance_v1_instance_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_spanner_admin_instance_v1_instance_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_admin_instance_v1_instance_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_spanner_admin_instance_v1_instance_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_admin_instance_v1_instance_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_spanner_admin_instance_v1_instance_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_admin_instance_v1_instance_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_spanner_admin_instance_v1_instance_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_admin_instance_v1_instance_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_spanner_admin_instance_v1_instance_proto #############

        set(googleapis_googleapis_google_spanner_admin_instance_v1_instance_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_spanner_admin_instance_v1_instance_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_spanner_admin_instance_v1_instance_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_spanner_admin_instance_v1_instance_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_spanner_admin_instance_v1_instance_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_spanner_admin_instance_v1_instance_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_spanner_admin_instance_v1_instance_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_spanner_admin_instance_v1_instance_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_admin_instance_v1_instance_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_admin_instance_v1_instance_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_admin_instance_v1_instance_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_spanner_admin_instance_v1_instance_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_spanner_admin_instance_v1_instance_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_spanner_admin_instance_v1_instance_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_spanner_admin_instance_v1_instance_proto_DEPS_TARGET
                                      googleapis_googleapis_google_spanner_admin_instance_v1_instance_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_spanner_admin_instance_v1_instance_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_spanner_admin_instance_v1_instance_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_admin_instance_v1_instance_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_admin_instance_v1_instance_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_spanner_admin_instance_v1_instance_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_spanner_admin_instance_v1_instance_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_spanner_admin_instance_v1_instance_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_spanner_admin_instance_v1_instance_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_admin_instance_v1_instance_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_spanner_admin_instance_v1_instance_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_admin_instance_v1_instance_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_spanner_admin_instance_v1_instance_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_admin_instance_v1_instance_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_spanner_admin_instance_v1_instance_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_admin_instance_v1_instance_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_spanner_admin_database_v1_database_cc_proto #############

        set(googleapis_googleapis_google_spanner_admin_database_v1_database_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_spanner_admin_database_v1_database_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_spanner_admin_database_v1_database_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_spanner_admin_database_v1_database_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_spanner_admin_database_v1_database_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_spanner_admin_database_v1_database_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_spanner_admin_database_v1_database_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_spanner_admin_database_v1_database_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_admin_database_v1_database_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_admin_database_v1_database_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_admin_database_v1_database_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_spanner_admin_database_v1_database_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_spanner_admin_database_v1_database_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_spanner_admin_database_v1_database_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_spanner_admin_database_v1_database_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_spanner_admin_database_v1_database_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_spanner_admin_database_v1_database_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_spanner_admin_database_v1_database_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_admin_database_v1_database_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_admin_database_v1_database_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_spanner_admin_database_v1_database_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_spanner_admin_database_v1_database_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_spanner_admin_database_v1_database_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_spanner_admin_database_v1_database_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_admin_database_v1_database_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_spanner_admin_database_v1_database_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_admin_database_v1_database_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_spanner_admin_database_v1_database_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_admin_database_v1_database_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_spanner_admin_database_v1_database_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_admin_database_v1_database_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_spanner_admin_database_v1_database_proto #############

        set(googleapis_googleapis_google_spanner_admin_database_v1_database_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_spanner_admin_database_v1_database_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_spanner_admin_database_v1_database_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_spanner_admin_database_v1_database_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_spanner_admin_database_v1_database_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_spanner_admin_database_v1_database_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_spanner_admin_database_v1_database_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_spanner_admin_database_v1_database_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_admin_database_v1_database_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_admin_database_v1_database_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_admin_database_v1_database_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_spanner_admin_database_v1_database_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_spanner_admin_database_v1_database_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_spanner_admin_database_v1_database_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_spanner_admin_database_v1_database_proto_DEPS_TARGET
                                      googleapis_googleapis_google_spanner_admin_database_v1_database_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_spanner_admin_database_v1_database_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_spanner_admin_database_v1_database_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_admin_database_v1_database_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_admin_database_v1_database_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_spanner_admin_database_v1_database_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_spanner_admin_database_v1_database_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_spanner_admin_database_v1_database_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_spanner_admin_database_v1_database_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_admin_database_v1_database_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_spanner_admin_database_v1_database_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_admin_database_v1_database_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_spanner_admin_database_v1_database_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_admin_database_v1_database_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_spanner_admin_database_v1_database_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_admin_database_v1_database_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_billing_v1_billing_cc_proto #############

        set(googleapis_googleapis_google_cloud_billing_v1_billing_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_billing_v1_billing_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_billing_v1_billing_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_billing_v1_billing_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_billing_v1_billing_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_billing_v1_billing_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_billing_v1_billing_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_billing_v1_billing_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_billing_v1_billing_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_billing_v1_billing_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_billing_v1_billing_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_billing_v1_billing_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_billing_v1_billing_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_billing_v1_billing_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_billing_v1_billing_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_billing_v1_billing_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_billing_v1_billing_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_billing_v1_billing_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_billing_v1_billing_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_billing_v1_billing_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_billing_v1_billing_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_billing_v1_billing_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_billing_v1_billing_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_billing_v1_billing_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_billing_v1_billing_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_billing_v1_billing_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_billing_v1_billing_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_billing_v1_billing_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_billing_v1_billing_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_billing_v1_billing_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_billing_v1_billing_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_billing_v1_billing_proto #############

        set(googleapis_googleapis_google_cloud_billing_v1_billing_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_billing_v1_billing_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_billing_v1_billing_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_billing_v1_billing_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_billing_v1_billing_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_billing_v1_billing_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_billing_v1_billing_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_billing_v1_billing_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_billing_v1_billing_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_billing_v1_billing_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_billing_v1_billing_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_billing_v1_billing_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_billing_v1_billing_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_billing_v1_billing_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_billing_v1_billing_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_billing_v1_billing_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_billing_v1_billing_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_billing_v1_billing_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_billing_v1_billing_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_billing_v1_billing_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_billing_v1_billing_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_billing_v1_billing_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_billing_v1_billing_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_billing_v1_billing_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_billing_v1_billing_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_billing_v1_billing_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_billing_v1_billing_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_billing_v1_billing_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_billing_v1_billing_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_billing_v1_billing_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_billing_v1_billing_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_datacatalog_v1_datacatalog_cc_proto #############

        set(googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_datacatalog_v1_datacatalog_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_datacatalog_v1_datacatalog_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_datacatalog_v1_datacatalog_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_datacatalog_v1_datacatalog_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_datacatalog_v1_datacatalog_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_datacatalog_v1_datacatalog_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_datacatalog_v1_datacatalog_proto #############

        set(googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_datacatalog_v1_datacatalog_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_datacatalog_v1_datacatalog_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_datacatalog_v1_datacatalog_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_datacatalog_v1_datacatalog_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_datacatalog_v1_datacatalog_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_datacatalog_v1_datacatalog_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datacatalog_v1_datacatalog_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_run_v2_run_cc_proto #############

        set(googleapis_googleapis_google_cloud_run_v2_run_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_run_v2_run_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_run_v2_run_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_run_v2_run_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_run_v2_run_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_run_v2_run_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_run_v2_run_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_run_v2_run_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_run_v2_run_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_run_v2_run_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_run_v2_run_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_run_v2_run_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_run_v2_run_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_run_v2_run_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_run_v2_run_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_run_v2_run_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_run_v2_run_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_run_v2_run_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_run_v2_run_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_run_v2_run_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_run_v2_run_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_run_v2_run_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_run_v2_run_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_run_v2_run_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_run_v2_run_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_run_v2_run_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_run_v2_run_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_run_v2_run_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_run_v2_run_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_run_v2_run_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_run_v2_run_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_run_v2_run_proto #############

        set(googleapis_googleapis_google_cloud_run_v2_run_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_run_v2_run_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_run_v2_run_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_run_v2_run_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_run_v2_run_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_run_v2_run_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_run_v2_run_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_run_v2_run_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_run_v2_run_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_run_v2_run_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_run_v2_run_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_run_v2_run_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_run_v2_run_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_run_v2_run_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_run_v2_run_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_run_v2_run_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_run_v2_run_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_run_v2_run_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_run_v2_run_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_run_v2_run_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_run_v2_run_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_run_v2_run_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_run_v2_run_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_run_v2_run_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_run_v2_run_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_run_v2_run_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_run_v2_run_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_run_v2_run_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_run_v2_run_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_run_v2_run_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_run_v2_run_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_functions_v1_functions_cc_proto #############

        set(googleapis_googleapis_google_cloud_functions_v1_functions_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_functions_v1_functions_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_functions_v1_functions_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_functions_v1_functions_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_functions_v1_functions_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_functions_v1_functions_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_functions_v1_functions_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_functions_v1_functions_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v1_functions_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v1_functions_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v1_functions_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_functions_v1_functions_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_functions_v1_functions_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_functions_v1_functions_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_functions_v1_functions_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_functions_v1_functions_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_functions_v1_functions_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_functions_v1_functions_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v1_functions_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v1_functions_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_functions_v1_functions_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_functions_v1_functions_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_functions_v1_functions_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_functions_v1_functions_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v1_functions_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_functions_v1_functions_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v1_functions_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_functions_v1_functions_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v1_functions_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_functions_v1_functions_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v1_functions_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_functions_v1_functions_proto #############

        set(googleapis_googleapis_google_cloud_functions_v1_functions_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_functions_v1_functions_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_functions_v1_functions_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_functions_v1_functions_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_functions_v1_functions_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_functions_v1_functions_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_functions_v1_functions_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_functions_v1_functions_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v1_functions_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v1_functions_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v1_functions_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_functions_v1_functions_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_functions_v1_functions_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_functions_v1_functions_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_functions_v1_functions_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_functions_v1_functions_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_functions_v1_functions_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_functions_v1_functions_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v1_functions_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v1_functions_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_functions_v1_functions_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_functions_v1_functions_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_functions_v1_functions_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_functions_v1_functions_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v1_functions_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_functions_v1_functions_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v1_functions_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_functions_v1_functions_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v1_functions_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_functions_v1_functions_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v1_functions_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_sensitiveaction_logging_v1_logging_cc_proto #############

        set(googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_sensitiveaction_logging_v1_logging_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_sensitiveaction_logging_v1_logging_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_sensitiveaction_logging_v1_logging_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_sensitiveaction_logging_v1_logging_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_sensitiveaction_logging_v1_logging_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_sensitiveaction_logging_v1_logging_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_sensitiveaction_logging_v1_logging_proto #############

        set(googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_sensitiveaction_logging_v1_logging_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_sensitiveaction_logging_v1_logging_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_sensitiveaction_logging_v1_logging_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_sensitiveaction_logging_v1_logging_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_sensitiveaction_logging_v1_logging_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_sensitiveaction_logging_v1_logging_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sensitiveaction_logging_v1_logging_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_servicedirectory_v1_servicedirectory_cc_proto #############

        set(googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_servicedirectory_v1_servicedirectory_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_servicedirectory_v1_servicedirectory_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_servicedirectory_v1_servicedirectory_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_servicedirectory_v1_servicedirectory_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_servicedirectory_v1_servicedirectory_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_servicedirectory_v1_servicedirectory_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_servicedirectory_v1_servicedirectory_proto #############

        set(googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_servicedirectory_v1_servicedirectory_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_servicedirectory_v1_servicedirectory_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_servicedirectory_v1_servicedirectory_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_servicedirectory_v1_servicedirectory_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_servicedirectory_v1_servicedirectory_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_servicedirectory_v1_servicedirectory_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_servicedirectory_v1_servicedirectory_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_iap_v1_iap_cc_proto #############

        set(googleapis_googleapis_google_cloud_iap_v1_iap_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_iap_v1_iap_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_iap_v1_iap_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_iap_v1_iap_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_iap_v1_iap_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_iap_v1_iap_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_iap_v1_iap_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_iap_v1_iap_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_iap_v1_iap_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_iap_v1_iap_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_iap_v1_iap_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_iap_v1_iap_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_iap_v1_iap_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_iap_v1_iap_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_iap_v1_iap_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_iap_v1_iap_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_iap_v1_iap_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_iap_v1_iap_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_iap_v1_iap_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_iap_v1_iap_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_iap_v1_iap_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_iap_v1_iap_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_iap_v1_iap_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_iap_v1_iap_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_iap_v1_iap_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_iap_v1_iap_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_iap_v1_iap_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_iap_v1_iap_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_iap_v1_iap_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_iap_v1_iap_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_iap_v1_iap_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_iap_v1_iap_proto #############

        set(googleapis_googleapis_google_cloud_iap_v1_iap_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_iap_v1_iap_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_iap_v1_iap_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_iap_v1_iap_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_iap_v1_iap_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_iap_v1_iap_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_iap_v1_iap_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_iap_v1_iap_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_iap_v1_iap_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_iap_v1_iap_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_iap_v1_iap_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_iap_v1_iap_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_iap_v1_iap_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_iap_v1_iap_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_iap_v1_iap_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_iap_v1_iap_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_iap_v1_iap_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_iap_v1_iap_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_iap_v1_iap_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_iap_v1_iap_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_iap_v1_iap_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_iap_v1_iap_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_iap_v1_iap_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_iap_v1_iap_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_iap_v1_iap_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_iap_v1_iap_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_iap_v1_iap_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_iap_v1_iap_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_iap_v1_iap_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_iap_v1_iap_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_iap_v1_iap_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_iot_v1_iot_cc_proto #############

        set(googleapis_googleapis_google_cloud_iot_v1_iot_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_iot_v1_iot_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_iot_v1_iot_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_iot_v1_iot_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_iot_v1_iot_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_iot_v1_iot_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_iot_v1_iot_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_iot_v1_iot_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_iot_v1_iot_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_iot_v1_iot_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_iot_v1_iot_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_iot_v1_iot_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_iot_v1_iot_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_iot_v1_iot_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_iot_v1_iot_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_iot_v1_iot_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_iot_v1_iot_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_iot_v1_iot_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_iot_v1_iot_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_iot_v1_iot_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_iot_v1_iot_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_iot_v1_iot_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_iot_v1_iot_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_iot_v1_iot_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_iot_v1_iot_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_iot_v1_iot_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_iot_v1_iot_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_iot_v1_iot_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_iot_v1_iot_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_iot_v1_iot_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_iot_v1_iot_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_iot_v1_iot_proto #############

        set(googleapis_googleapis_google_cloud_iot_v1_iot_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_iot_v1_iot_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_iot_v1_iot_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_iot_v1_iot_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_iot_v1_iot_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_iot_v1_iot_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_iot_v1_iot_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_iot_v1_iot_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_iot_v1_iot_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_iot_v1_iot_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_iot_v1_iot_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_iot_v1_iot_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_iot_v1_iot_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_iot_v1_iot_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_iot_v1_iot_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_iot_v1_iot_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_iot_v1_iot_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_iot_v1_iot_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_iot_v1_iot_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_iot_v1_iot_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_iot_v1_iot_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_iot_v1_iot_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_iot_v1_iot_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_iot_v1_iot_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_iot_v1_iot_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_iot_v1_iot_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_iot_v1_iot_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_iot_v1_iot_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_iot_v1_iot_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_iot_v1_iot_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_iot_v1_iot_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_bigquery_dataexchange_v1beta1_dataexchange_cc_proto #############

        set(googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_bigquery_dataexchange_v1beta1_dataexchange_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_bigquery_dataexchange_v1beta1_dataexchange_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_bigquery_dataexchange_v1beta1_dataexchange_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_dataexchange_v1beta1_dataexchange_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_dataexchange_v1beta1_dataexchange_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_dataexchange_v1beta1_dataexchange_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_bigquery_dataexchange_v1beta1_dataexchange_proto #############

        set(googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_bigquery_dataexchange_v1beta1_dataexchange_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_bigquery_dataexchange_v1beta1_dataexchange_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_bigquery_dataexchange_v1beta1_dataexchange_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_dataexchange_v1beta1_dataexchange_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_dataexchange_v1beta1_dataexchange_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_dataexchange_v1beta1_dataexchange_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_dataexchange_v1beta1_dataexchange_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_bigquery_logging_v1_logging_cc_proto #############

        set(googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_bigquery_logging_v1_logging_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_bigquery_logging_v1_logging_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_bigquery_logging_v1_logging_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_logging_v1_logging_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_logging_v1_logging_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_logging_v1_logging_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_bigquery_logging_v1_logging_proto #############

        set(googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_bigquery_logging_v1_logging_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_bigquery_logging_v1_logging_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_bigquery_logging_v1_logging_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_logging_v1_logging_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_logging_v1_logging_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_logging_v1_logging_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_logging_v1_logging_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_bigquery_datapolicies_v1beta1_datapolicies_cc_proto #############

        set(googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_bigquery_datapolicies_v1beta1_datapolicies_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_bigquery_datapolicies_v1beta1_datapolicies_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_bigquery_datapolicies_v1beta1_datapolicies_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_datapolicies_v1beta1_datapolicies_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_datapolicies_v1beta1_datapolicies_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_datapolicies_v1beta1_datapolicies_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_bigquery_datapolicies_v1beta1_datapolicies_proto #############

        set(googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_bigquery_datapolicies_v1beta1_datapolicies_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_bigquery_datapolicies_v1beta1_datapolicies_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_bigquery_datapolicies_v1beta1_datapolicies_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_datapolicies_v1beta1_datapolicies_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_datapolicies_v1beta1_datapolicies_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_datapolicies_v1beta1_datapolicies_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_datapolicies_v1beta1_datapolicies_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_bigquery_analyticshub_v1_analyticshub_cc_proto #############

        set(googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_bigquery_analyticshub_v1_analyticshub_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_bigquery_analyticshub_v1_analyticshub_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_bigquery_analyticshub_v1_analyticshub_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_analyticshub_v1_analyticshub_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_analyticshub_v1_analyticshub_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_analyticshub_v1_analyticshub_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_bigquery_analyticshub_v1_analyticshub_proto #############

        set(googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_bigquery_analyticshub_v1_analyticshub_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_bigquery_analyticshub_v1_analyticshub_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_bigquery_analyticshub_v1_analyticshub_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_analyticshub_v1_analyticshub_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_analyticshub_v1_analyticshub_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_analyticshub_v1_analyticshub_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_analyticshub_v1_analyticshub_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_bigquery_connection_v1_connection_cc_proto #############

        set(googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_bigquery_connection_v1_connection_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_bigquery_connection_v1_connection_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_bigquery_connection_v1_connection_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_connection_v1_connection_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_connection_v1_connection_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_connection_v1_connection_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_bigquery_connection_v1_connection_proto #############

        set(googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_bigquery_connection_v1_connection_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_bigquery_connection_v1_connection_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_bigquery_connection_v1_connection_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_connection_v1_connection_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_connection_v1_connection_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_connection_v1_connection_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_connection_v1_connection_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_secretmanager_v1_secretmanager_cc_proto #############

        set(googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_secretmanager_v1_secretmanager_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_secretmanager_v1_secretmanager_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_secretmanager_v1_secretmanager_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_secretmanager_v1_secretmanager_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_secretmanager_v1_secretmanager_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_secretmanager_v1_secretmanager_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_secretmanager_v1_secretmanager_proto #############

        set(googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_secretmanager_v1_secretmanager_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_secretmanager_v1_secretmanager_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_secretmanager_v1_secretmanager_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_secretmanager_v1_secretmanager_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_secretmanager_v1_secretmanager_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_secretmanager_v1_secretmanager_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_secretmanager_v1_secretmanager_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_dataplex_v1_dataplex_cc_proto #############

        set(googleapis_googleapis_google_cloud_dataplex_v1_dataplex_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_dataplex_v1_dataplex_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_dataplex_v1_dataplex_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_dataplex_v1_dataplex_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_dataplex_v1_dataplex_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_dataplex_v1_dataplex_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_dataplex_v1_dataplex_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_dataplex_v1_dataplex_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataplex_v1_dataplex_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataplex_v1_dataplex_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataplex_v1_dataplex_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_dataplex_v1_dataplex_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_dataplex_v1_dataplex_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_dataplex_v1_dataplex_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_dataplex_v1_dataplex_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_dataplex_v1_dataplex_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_dataplex_v1_dataplex_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_dataplex_v1_dataplex_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataplex_v1_dataplex_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataplex_v1_dataplex_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_dataplex_v1_dataplex_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_dataplex_v1_dataplex_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_dataplex_v1_dataplex_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_dataplex_v1_dataplex_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataplex_v1_dataplex_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dataplex_v1_dataplex_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataplex_v1_dataplex_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dataplex_v1_dataplex_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataplex_v1_dataplex_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dataplex_v1_dataplex_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataplex_v1_dataplex_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_dataplex_v1_dataplex_proto #############

        set(googleapis_googleapis_google_cloud_dataplex_v1_dataplex_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_dataplex_v1_dataplex_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_dataplex_v1_dataplex_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_dataplex_v1_dataplex_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_dataplex_v1_dataplex_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_dataplex_v1_dataplex_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_dataplex_v1_dataplex_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_dataplex_v1_dataplex_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataplex_v1_dataplex_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataplex_v1_dataplex_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataplex_v1_dataplex_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_dataplex_v1_dataplex_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_dataplex_v1_dataplex_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_dataplex_v1_dataplex_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_dataplex_v1_dataplex_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_dataplex_v1_dataplex_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_dataplex_v1_dataplex_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_dataplex_v1_dataplex_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataplex_v1_dataplex_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataplex_v1_dataplex_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_dataplex_v1_dataplex_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_dataplex_v1_dataplex_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_dataplex_v1_dataplex_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_dataplex_v1_dataplex_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataplex_v1_dataplex_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dataplex_v1_dataplex_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataplex_v1_dataplex_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dataplex_v1_dataplex_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataplex_v1_dataplex_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dataplex_v1_dataplex_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataplex_v1_dataplex_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_securitycenter_v1_securitycenter_cc_proto #############

        set(googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_securitycenter_v1_securitycenter_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_securitycenter_v1_securitycenter_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_securitycenter_v1_securitycenter_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_securitycenter_v1_securitycenter_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_securitycenter_v1_securitycenter_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_securitycenter_v1_securitycenter_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_securitycenter_v1_securitycenter_proto #############

        set(googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_securitycenter_v1_securitycenter_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_securitycenter_v1_securitycenter_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_securitycenter_v1_securitycenter_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_securitycenter_v1_securitycenter_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_securitycenter_v1_securitycenter_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_securitycenter_v1_securitycenter_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_securitycenter_v1_securitycenter_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_gkehub_v1_gkehub_cc_proto #############

        set(googleapis_googleapis_google_cloud_gkehub_v1_gkehub_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_gkehub_v1_gkehub_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_gkehub_v1_gkehub_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_gkehub_v1_gkehub_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_gkehub_v1_gkehub_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_gkehub_v1_gkehub_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_gkehub_v1_gkehub_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_gkehub_v1_gkehub_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_gkehub_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_gkehub_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_gkehub_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_gkehub_v1_gkehub_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_gkehub_v1_gkehub_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_gkehub_v1_gkehub_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_gkehub_v1_gkehub_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_gkehub_v1_gkehub_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_gkehub_v1_gkehub_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_gkehub_v1_gkehub_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_gkehub_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_gkehub_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_gkehub_v1_gkehub_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_gkehub_v1_gkehub_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_gkehub_v1_gkehub_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_gkehub_v1_gkehub_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_gkehub_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkehub_v1_gkehub_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_gkehub_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkehub_v1_gkehub_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_gkehub_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkehub_v1_gkehub_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_gkehub_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_gkehub_v1_gkehub_proto #############

        set(googleapis_googleapis_google_cloud_gkehub_v1_gkehub_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_gkehub_v1_gkehub_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_gkehub_v1_gkehub_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_gkehub_v1_gkehub_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_gkehub_v1_gkehub_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_gkehub_v1_gkehub_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_gkehub_v1_gkehub_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_gkehub_v1_gkehub_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_gkehub_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_gkehub_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_gkehub_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_gkehub_v1_gkehub_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_gkehub_v1_gkehub_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_gkehub_v1_gkehub_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_gkehub_v1_gkehub_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_gkehub_v1_gkehub_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_gkehub_v1_gkehub_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_gkehub_v1_gkehub_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_gkehub_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_gkehub_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_gkehub_v1_gkehub_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_gkehub_v1_gkehub_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_gkehub_v1_gkehub_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_gkehub_v1_gkehub_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_gkehub_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkehub_v1_gkehub_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_gkehub_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkehub_v1_gkehub_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_gkehub_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkehub_v1_gkehub_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_gkehub_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_tasks_v2_tasks_cc_proto #############

        set(googleapis_googleapis_google_cloud_tasks_v2_tasks_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_tasks_v2_tasks_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_tasks_v2_tasks_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_tasks_v2_tasks_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_tasks_v2_tasks_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_tasks_v2_tasks_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_tasks_v2_tasks_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_tasks_v2_tasks_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_tasks_v2_tasks_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_tasks_v2_tasks_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_tasks_v2_tasks_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_tasks_v2_tasks_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_tasks_v2_tasks_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_tasks_v2_tasks_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_tasks_v2_tasks_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_tasks_v2_tasks_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_tasks_v2_tasks_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_tasks_v2_tasks_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_tasks_v2_tasks_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_tasks_v2_tasks_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_tasks_v2_tasks_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_tasks_v2_tasks_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_tasks_v2_tasks_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_tasks_v2_tasks_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_tasks_v2_tasks_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_tasks_v2_tasks_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_tasks_v2_tasks_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_tasks_v2_tasks_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_tasks_v2_tasks_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_tasks_v2_tasks_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_tasks_v2_tasks_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_tasks_v2_tasks_proto #############

        set(googleapis_googleapis_google_cloud_tasks_v2_tasks_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_tasks_v2_tasks_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_tasks_v2_tasks_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_tasks_v2_tasks_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_tasks_v2_tasks_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_tasks_v2_tasks_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_tasks_v2_tasks_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_tasks_v2_tasks_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_tasks_v2_tasks_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_tasks_v2_tasks_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_tasks_v2_tasks_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_tasks_v2_tasks_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_tasks_v2_tasks_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_tasks_v2_tasks_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_tasks_v2_tasks_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_tasks_v2_tasks_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_tasks_v2_tasks_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_tasks_v2_tasks_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_tasks_v2_tasks_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_tasks_v2_tasks_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_tasks_v2_tasks_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_tasks_v2_tasks_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_tasks_v2_tasks_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_tasks_v2_tasks_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_tasks_v2_tasks_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_tasks_v2_tasks_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_tasks_v2_tasks_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_tasks_v2_tasks_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_tasks_v2_tasks_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_tasks_v2_tasks_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_tasks_v2_tasks_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_aiplatform_v1_aiplatform_cc_proto #############

        set(googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_aiplatform_v1_aiplatform_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_aiplatform_v1_aiplatform_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_aiplatform_v1_aiplatform_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_aiplatform_v1_aiplatform_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_aiplatform_v1_aiplatform_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_aiplatform_v1_aiplatform_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_aiplatform_v1_aiplatform_proto #############

        set(googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_aiplatform_v1_aiplatform_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_aiplatform_v1_aiplatform_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_aiplatform_v1_aiplatform_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_aiplatform_v1_aiplatform_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_aiplatform_v1_aiplatform_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_aiplatform_v1_aiplatform_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_aiplatform_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_resourcemanager_v3_resourcemanager_cc_proto #############

        set(googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_resourcemanager_v3_resourcemanager_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_resourcemanager_v3_resourcemanager_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_resourcemanager_v3_resourcemanager_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_resourcemanager_v3_resourcemanager_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_resourcemanager_v3_resourcemanager_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_resourcemanager_v3_resourcemanager_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_resourcemanager_v3_resourcemanager_proto #############

        set(googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_resourcemanager_v3_resourcemanager_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_resourcemanager_v3_resourcemanager_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_resourcemanager_v3_resourcemanager_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_resourcemanager_v3_resourcemanager_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_resourcemanager_v3_resourcemanager_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_resourcemanager_v3_resourcemanager_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcemanager_v3_resourcemanager_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_resourcemanager_v2_resourcemanager_cc_proto #############

        set(googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_resourcemanager_v2_resourcemanager_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_resourcemanager_v2_resourcemanager_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_resourcemanager_v2_resourcemanager_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_resourcemanager_v2_resourcemanager_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_resourcemanager_v2_resourcemanager_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_resourcemanager_v2_resourcemanager_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_resourcemanager_v2_resourcemanager_proto #############

        set(googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_resourcemanager_v2_resourcemanager_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_resourcemanager_v2_resourcemanager_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_resourcemanager_v2_resourcemanager_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_resourcemanager_v2_resourcemanager_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_resourcemanager_v2_resourcemanager_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_resourcemanager_v2_resourcemanager_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcemanager_v2_resourcemanager_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_devtools_containeranalysis_v1_containeranalysis_cc_proto #############

        set(googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_devtools_containeranalysis_v1_containeranalysis_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_devtools_containeranalysis_v1_containeranalysis_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_devtools_containeranalysis_v1_containeranalysis_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_containeranalysis_v1_containeranalysis_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_containeranalysis_v1_containeranalysis_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_containeranalysis_v1_containeranalysis_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_devtools_containeranalysis_v1_containeranalysis_proto #############

        set(googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_proto_DEPS_TARGET
                                      googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_devtools_containeranalysis_v1_containeranalysis_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_devtools_containeranalysis_v1_containeranalysis_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_devtools_containeranalysis_v1_containeranalysis_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_containeranalysis_v1_containeranalysis_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_containeranalysis_v1_containeranalysis_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_containeranalysis_v1_containeranalysis_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_containeranalysis_v1_containeranalysis_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_devtools_artifactregistry_v1_artifactregistry_cc_proto #############

        set(googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_devtools_artifactregistry_v1_artifactregistry_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_devtools_artifactregistry_v1_artifactregistry_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_devtools_artifactregistry_v1_artifactregistry_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_artifactregistry_v1_artifactregistry_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_artifactregistry_v1_artifactregistry_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_artifactregistry_v1_artifactregistry_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_devtools_artifactregistry_v1_artifactregistry_proto #############

        set(googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_proto_DEPS_TARGET
                                      googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_devtools_artifactregistry_v1_artifactregistry_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_devtools_artifactregistry_v1_artifactregistry_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_devtools_artifactregistry_v1_artifactregistry_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_artifactregistry_v1_artifactregistry_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_artifactregistry_v1_artifactregistry_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_artifactregistry_v1_artifactregistry_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_artifactregistry_v1_artifactregistry_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_iam_admin_v1_admin_cc_proto #############

        set(googleapis_googleapis_google_iam_admin_v1_admin_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_iam_admin_v1_admin_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_iam_admin_v1_admin_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_iam_admin_v1_admin_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_iam_admin_v1_admin_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_iam_admin_v1_admin_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_iam_admin_v1_admin_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_iam_admin_v1_admin_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_admin_v1_admin_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_admin_v1_admin_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_admin_v1_admin_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_iam_admin_v1_admin_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_iam_admin_v1_admin_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_iam_admin_v1_admin_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_iam_admin_v1_admin_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_iam_admin_v1_admin_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_iam_admin_v1_admin_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_iam_admin_v1_admin_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_admin_v1_admin_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_admin_v1_admin_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_iam_admin_v1_admin_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_iam_admin_v1_admin_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_iam_admin_v1_admin_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_iam_admin_v1_admin_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_admin_v1_admin_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_admin_v1_admin_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_admin_v1_admin_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_admin_v1_admin_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_admin_v1_admin_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_admin_v1_admin_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_admin_v1_admin_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_iam_admin_v1_admin_proto #############

        set(googleapis_googleapis_google_iam_admin_v1_admin_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_iam_admin_v1_admin_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_iam_admin_v1_admin_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_iam_admin_v1_admin_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_iam_admin_v1_admin_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_iam_admin_v1_admin_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_iam_admin_v1_admin_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_iam_admin_v1_admin_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_admin_v1_admin_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_admin_v1_admin_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_admin_v1_admin_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_iam_admin_v1_admin_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_iam_admin_v1_admin_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_iam_admin_v1_admin_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_iam_admin_v1_admin_proto_DEPS_TARGET
                                      googleapis_googleapis_google_iam_admin_v1_admin_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_iam_admin_v1_admin_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_iam_admin_v1_admin_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_admin_v1_admin_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_admin_v1_admin_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_iam_admin_v1_admin_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_iam_admin_v1_admin_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_iam_admin_v1_admin_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_iam_admin_v1_admin_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_admin_v1_admin_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_admin_v1_admin_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_admin_v1_admin_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_admin_v1_admin_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_admin_v1_admin_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_admin_v1_admin_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_admin_v1_admin_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_iam_v1_iam_policy_cc_proto #############

        set(googleapis_googleapis_google_iam_v1_iam_policy_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_iam_v1_iam_policy_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_iam_v1_iam_policy_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_iam_v1_iam_policy_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_iam_v1_iam_policy_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_iam_v1_iam_policy_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_iam_v1_iam_policy_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_iam_v1_iam_policy_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_iam_policy_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_iam_policy_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_iam_policy_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_iam_v1_iam_policy_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_iam_v1_iam_policy_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_iam_v1_iam_policy_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_iam_v1_iam_policy_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_iam_v1_iam_policy_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_iam_v1_iam_policy_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_iam_v1_iam_policy_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_iam_policy_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_iam_policy_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_iam_v1_iam_policy_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_iam_v1_iam_policy_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_iam_v1_iam_policy_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_iam_v1_iam_policy_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_iam_policy_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_v1_iam_policy_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_iam_policy_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_v1_iam_policy_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_iam_policy_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_v1_iam_policy_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_iam_policy_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_iam_v1_iam_policy_proto #############

        set(googleapis_googleapis_google_iam_v1_iam_policy_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_iam_v1_iam_policy_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_iam_v1_iam_policy_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_iam_v1_iam_policy_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_iam_v1_iam_policy_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_iam_v1_iam_policy_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_iam_v1_iam_policy_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_iam_v1_iam_policy_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_iam_policy_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_iam_policy_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_iam_policy_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_iam_v1_iam_policy_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_iam_v1_iam_policy_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_iam_v1_iam_policy_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_iam_v1_iam_policy_proto_DEPS_TARGET
                                      googleapis_googleapis_google_iam_v1_iam_policy_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_iam_v1_iam_policy_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_iam_v1_iam_policy_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_iam_policy_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_iam_policy_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_iam_v1_iam_policy_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_iam_v1_iam_policy_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_iam_v1_iam_policy_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_iam_v1_iam_policy_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_iam_policy_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_v1_iam_policy_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_iam_policy_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_v1_iam_policy_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_iam_policy_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_v1_iam_policy_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_iam_policy_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_appengine_v1_appengine_cc_proto #############

        set(googleapis_googleapis_google_appengine_v1_appengine_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_appengine_v1_appengine_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_appengine_v1_appengine_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_appengine_v1_appengine_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_appengine_v1_appengine_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_appengine_v1_appengine_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_appengine_v1_appengine_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_appengine_v1_appengine_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_v1_appengine_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_v1_appengine_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_v1_appengine_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_appengine_v1_appengine_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_appengine_v1_appengine_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_appengine_v1_appengine_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_appengine_v1_appengine_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_appengine_v1_appengine_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_appengine_v1_appengine_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_appengine_v1_appengine_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_v1_appengine_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_v1_appengine_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_appengine_v1_appengine_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_appengine_v1_appengine_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_appengine_v1_appengine_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_appengine_v1_appengine_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_v1_appengine_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_appengine_v1_appengine_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_v1_appengine_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_appengine_v1_appengine_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_v1_appengine_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_appengine_v1_appengine_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_v1_appengine_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_appengine_v1_appengine_proto #############

        set(googleapis_googleapis_google_appengine_v1_appengine_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_appengine_v1_appengine_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_appengine_v1_appengine_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_appengine_v1_appengine_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_appengine_v1_appengine_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_appengine_v1_appengine_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_appengine_v1_appengine_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_appengine_v1_appengine_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_v1_appengine_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_v1_appengine_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_v1_appengine_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_appengine_v1_appengine_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_appengine_v1_appengine_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_appengine_v1_appengine_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_appengine_v1_appengine_proto_DEPS_TARGET
                                      googleapis_googleapis_google_appengine_v1_appengine_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_appengine_v1_appengine_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_appengine_v1_appengine_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_v1_appengine_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_v1_appengine_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_appengine_v1_appengine_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_appengine_v1_appengine_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_appengine_v1_appengine_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_appengine_v1_appengine_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_v1_appengine_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_appengine_v1_appengine_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_v1_appengine_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_appengine_v1_appengine_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_v1_appengine_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_appengine_v1_appengine_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_v1_appengine_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_firestore_admin_v1_admin_cc_proto #############

        set(googleapis_googleapis_google_firestore_admin_v1_admin_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_firestore_admin_v1_admin_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_firestore_admin_v1_admin_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_firestore_admin_v1_admin_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_firestore_admin_v1_admin_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_firestore_admin_v1_admin_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_firestore_admin_v1_admin_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_firestore_admin_v1_admin_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_admin_v1_admin_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_admin_v1_admin_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_admin_v1_admin_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_firestore_admin_v1_admin_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_firestore_admin_v1_admin_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_firestore_admin_v1_admin_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_firestore_admin_v1_admin_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_firestore_admin_v1_admin_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_firestore_admin_v1_admin_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_firestore_admin_v1_admin_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_admin_v1_admin_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_admin_v1_admin_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_firestore_admin_v1_admin_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_firestore_admin_v1_admin_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_firestore_admin_v1_admin_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_firestore_admin_v1_admin_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_admin_v1_admin_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_firestore_admin_v1_admin_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_admin_v1_admin_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_firestore_admin_v1_admin_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_admin_v1_admin_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_firestore_admin_v1_admin_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_admin_v1_admin_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_firestore_admin_v1_admin_proto #############

        set(googleapis_googleapis_google_firestore_admin_v1_admin_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_firestore_admin_v1_admin_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_firestore_admin_v1_admin_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_firestore_admin_v1_admin_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_firestore_admin_v1_admin_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_firestore_admin_v1_admin_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_firestore_admin_v1_admin_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_firestore_admin_v1_admin_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_admin_v1_admin_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_admin_v1_admin_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_admin_v1_admin_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_firestore_admin_v1_admin_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_firestore_admin_v1_admin_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_firestore_admin_v1_admin_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_firestore_admin_v1_admin_proto_DEPS_TARGET
                                      googleapis_googleapis_google_firestore_admin_v1_admin_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_firestore_admin_v1_admin_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_firestore_admin_v1_admin_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_admin_v1_admin_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_admin_v1_admin_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_firestore_admin_v1_admin_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_firestore_admin_v1_admin_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_firestore_admin_v1_admin_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_firestore_admin_v1_admin_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_admin_v1_admin_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_firestore_admin_v1_admin_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_admin_v1_admin_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_firestore_admin_v1_admin_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_admin_v1_admin_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_firestore_admin_v1_admin_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_admin_v1_admin_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_logging_v2_logging_cc_proto #############

        set(googleapis_googleapis_google_logging_v2_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_logging_v2_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_logging_v2_logging_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_logging_v2_logging_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_logging_v2_logging_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_logging_v2_logging_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_logging_v2_logging_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_logging_v2_logging_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_logging_v2_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_logging_v2_logging_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_logging_v2_logging_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_logging_v2_logging_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_logging_v2_logging_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_logging_v2_logging_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_logging_v2_logging_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_logging_v2_logging_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_logging_v2_logging_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_logging_v2_logging_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_logging_v2_logging_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_logging_v2_logging_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_logging_v2_logging_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_logging_v2_logging_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_logging_v2_logging_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_logging_v2_logging_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_logging_v2_logging_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_logging_v2_logging_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_logging_v2_logging_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_logging_v2_logging_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_logging_v2_logging_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_logging_v2_logging_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_logging_v2_logging_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_logging_v2_logging_proto #############

        set(googleapis_googleapis_google_logging_v2_logging_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_logging_v2_logging_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_logging_v2_logging_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_logging_v2_logging_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_logging_v2_logging_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_logging_v2_logging_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_logging_v2_logging_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_logging_v2_logging_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_logging_v2_logging_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_logging_v2_logging_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_logging_v2_logging_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_logging_v2_logging_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_logging_v2_logging_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_logging_v2_logging_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_logging_v2_logging_proto_DEPS_TARGET
                                      googleapis_googleapis_google_logging_v2_logging_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_logging_v2_logging_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_logging_v2_logging_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_logging_v2_logging_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_logging_v2_logging_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_logging_v2_logging_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_logging_v2_logging_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_logging_v2_logging_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_logging_v2_logging_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_logging_v2_logging_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_logging_v2_logging_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_logging_v2_logging_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_logging_v2_logging_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_logging_v2_logging_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_logging_v2_logging_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_logging_v2_logging_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_streetview_publish_v1_publish_cc_proto #############

        set(googleapis_googleapis_google_streetview_publish_v1_publish_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_streetview_publish_v1_publish_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_streetview_publish_v1_publish_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_streetview_publish_v1_publish_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_streetview_publish_v1_publish_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_streetview_publish_v1_publish_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_streetview_publish_v1_publish_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_streetview_publish_v1_publish_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_streetview_publish_v1_publish_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_streetview_publish_v1_publish_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_streetview_publish_v1_publish_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_streetview_publish_v1_publish_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_streetview_publish_v1_publish_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_streetview_publish_v1_publish_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_streetview_publish_v1_publish_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_streetview_publish_v1_publish_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_streetview_publish_v1_publish_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_streetview_publish_v1_publish_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_streetview_publish_v1_publish_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_streetview_publish_v1_publish_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_streetview_publish_v1_publish_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_streetview_publish_v1_publish_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_streetview_publish_v1_publish_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_streetview_publish_v1_publish_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_streetview_publish_v1_publish_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_streetview_publish_v1_publish_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_streetview_publish_v1_publish_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_streetview_publish_v1_publish_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_streetview_publish_v1_publish_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_streetview_publish_v1_publish_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_streetview_publish_v1_publish_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_streetview_publish_v1_publish_proto #############

        set(googleapis_googleapis_google_streetview_publish_v1_publish_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_streetview_publish_v1_publish_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_streetview_publish_v1_publish_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_streetview_publish_v1_publish_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_streetview_publish_v1_publish_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_streetview_publish_v1_publish_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_streetview_publish_v1_publish_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_streetview_publish_v1_publish_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_streetview_publish_v1_publish_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_streetview_publish_v1_publish_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_streetview_publish_v1_publish_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_streetview_publish_v1_publish_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_streetview_publish_v1_publish_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_streetview_publish_v1_publish_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_streetview_publish_v1_publish_proto_DEPS_TARGET
                                      googleapis_googleapis_google_streetview_publish_v1_publish_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_streetview_publish_v1_publish_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_streetview_publish_v1_publish_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_streetview_publish_v1_publish_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_streetview_publish_v1_publish_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_streetview_publish_v1_publish_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_streetview_publish_v1_publish_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_streetview_publish_v1_publish_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_streetview_publish_v1_publish_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_streetview_publish_v1_publish_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_streetview_publish_v1_publish_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_streetview_publish_v1_publish_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_streetview_publish_v1_publish_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_streetview_publish_v1_publish_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_streetview_publish_v1_publish_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_streetview_publish_v1_publish_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_monitoring_v3_monitoring_cc_proto #############

        set(googleapis_googleapis_google_monitoring_v3_monitoring_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_monitoring_v3_monitoring_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_monitoring_v3_monitoring_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_monitoring_v3_monitoring_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_monitoring_v3_monitoring_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_monitoring_v3_monitoring_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_monitoring_v3_monitoring_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_monitoring_v3_monitoring_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_v3_monitoring_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_v3_monitoring_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_v3_monitoring_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_monitoring_v3_monitoring_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_monitoring_v3_monitoring_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_monitoring_v3_monitoring_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_monitoring_v3_monitoring_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_monitoring_v3_monitoring_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_monitoring_v3_monitoring_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_monitoring_v3_monitoring_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_v3_monitoring_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_v3_monitoring_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_monitoring_v3_monitoring_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_monitoring_v3_monitoring_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_monitoring_v3_monitoring_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_monitoring_v3_monitoring_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_v3_monitoring_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_monitoring_v3_monitoring_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_v3_monitoring_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_monitoring_v3_monitoring_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_v3_monitoring_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_monitoring_v3_monitoring_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_v3_monitoring_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_monitoring_v3_monitoring_proto #############

        set(googleapis_googleapis_google_monitoring_v3_monitoring_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_monitoring_v3_monitoring_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_monitoring_v3_monitoring_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_monitoring_v3_monitoring_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_monitoring_v3_monitoring_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_monitoring_v3_monitoring_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_monitoring_v3_monitoring_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_monitoring_v3_monitoring_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_v3_monitoring_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_v3_monitoring_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_v3_monitoring_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_monitoring_v3_monitoring_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_monitoring_v3_monitoring_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_monitoring_v3_monitoring_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_monitoring_v3_monitoring_proto_DEPS_TARGET
                                      googleapis_googleapis_google_monitoring_v3_monitoring_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_monitoring_v3_monitoring_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_monitoring_v3_monitoring_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_v3_monitoring_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_v3_monitoring_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_monitoring_v3_monitoring_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_monitoring_v3_monitoring_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_monitoring_v3_monitoring_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_monitoring_v3_monitoring_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_v3_monitoring_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_monitoring_v3_monitoring_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_v3_monitoring_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_monitoring_v3_monitoring_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_v3_monitoring_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_monitoring_v3_monitoring_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_v3_monitoring_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_monitoring_metricsscope_v1_metricsscope_cc_proto #############

        set(googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_monitoring_metricsscope_v1_metricsscope_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_monitoring_metricsscope_v1_metricsscope_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_monitoring_metricsscope_v1_metricsscope_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_monitoring_metricsscope_v1_metricsscope_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_monitoring_metricsscope_v1_metricsscope_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_monitoring_metricsscope_v1_metricsscope_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_monitoring_metricsscope_v1_metricsscope_proto #############

        set(googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_proto_DEPS_TARGET
                                      googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_monitoring_metricsscope_v1_metricsscope_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_monitoring_metricsscope_v1_metricsscope_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_monitoring_metricsscope_v1_metricsscope_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_monitoring_metricsscope_v1_metricsscope_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_monitoring_metricsscope_v1_metricsscope_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_monitoring_metricsscope_v1_metricsscope_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_metricsscope_v1_metricsscope_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_serviceusage_v1_serviceusage_cc_proto #############

        set(googleapis_googleapis_google_api_serviceusage_v1_serviceusage_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_serviceusage_v1_serviceusage_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_serviceusage_v1_serviceusage_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_serviceusage_v1_serviceusage_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_serviceusage_v1_serviceusage_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_serviceusage_v1_serviceusage_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_serviceusage_v1_serviceusage_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_serviceusage_v1_serviceusage_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_serviceusage_v1_serviceusage_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_serviceusage_v1_serviceusage_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_serviceusage_v1_serviceusage_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_serviceusage_v1_serviceusage_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_serviceusage_v1_serviceusage_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_serviceusage_v1_serviceusage_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_serviceusage_v1_serviceusage_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_serviceusage_v1_serviceusage_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_serviceusage_v1_serviceusage_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_serviceusage_v1_serviceusage_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_serviceusage_v1_serviceusage_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_serviceusage_v1_serviceusage_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_serviceusage_v1_serviceusage_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_serviceusage_v1_serviceusage_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_serviceusage_v1_serviceusage_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_serviceusage_v1_serviceusage_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_serviceusage_v1_serviceusage_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_serviceusage_v1_serviceusage_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_serviceusage_v1_serviceusage_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_serviceusage_v1_serviceusage_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_serviceusage_v1_serviceusage_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_serviceusage_v1_serviceusage_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_serviceusage_v1_serviceusage_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_serviceusage_v1_serviceusage_proto #############

        set(googleapis_googleapis_google_api_serviceusage_v1_serviceusage_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_serviceusage_v1_serviceusage_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_serviceusage_v1_serviceusage_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_serviceusage_v1_serviceusage_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_serviceusage_v1_serviceusage_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_serviceusage_v1_serviceusage_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_serviceusage_v1_serviceusage_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_serviceusage_v1_serviceusage_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_serviceusage_v1_serviceusage_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_serviceusage_v1_serviceusage_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_serviceusage_v1_serviceusage_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_serviceusage_v1_serviceusage_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_serviceusage_v1_serviceusage_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_serviceusage_v1_serviceusage_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_serviceusage_v1_serviceusage_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_serviceusage_v1_serviceusage_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_serviceusage_v1_serviceusage_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_serviceusage_v1_serviceusage_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_serviceusage_v1_serviceusage_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_serviceusage_v1_serviceusage_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_serviceusage_v1_serviceusage_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_serviceusage_v1_serviceusage_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_serviceusage_v1_serviceusage_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_serviceusage_v1_serviceusage_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_serviceusage_v1_serviceusage_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_serviceusage_v1_serviceusage_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_serviceusage_v1_serviceusage_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_serviceusage_v1_serviceusage_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_serviceusage_v1_serviceusage_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_serviceusage_v1_serviceusage_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_serviceusage_v1_serviceusage_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_servicecontrol_v1_servicecontrol_cc_proto #############

        set(googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_servicecontrol_v1_servicecontrol_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_servicecontrol_v1_servicecontrol_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_servicecontrol_v1_servicecontrol_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_servicecontrol_v1_servicecontrol_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_servicecontrol_v1_servicecontrol_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_servicecontrol_v1_servicecontrol_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_servicecontrol_v1_servicecontrol_proto #############

        set(googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_servicecontrol_v1_servicecontrol_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_servicecontrol_v1_servicecontrol_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_servicecontrol_v1_servicecontrol_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_servicecontrol_v1_servicecontrol_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_servicecontrol_v1_servicecontrol_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_servicecontrol_v1_servicecontrol_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicecontrol_v1_servicecontrol_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_expr_v1beta1_decl_cc_proto #############

        set(googleapis_googleapis_google_api_expr_v1beta1_decl_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_expr_v1beta1_decl_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_expr_v1beta1_decl_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_expr_v1beta1_decl_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_expr_v1beta1_decl_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_expr_v1beta1_decl_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_expr_v1beta1_decl_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_expr_v1beta1_decl_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_decl_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_decl_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_decl_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_expr_v1beta1_decl_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_expr_v1beta1_decl_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_expr_v1beta1_decl_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_expr_v1beta1_decl_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_expr_v1beta1_decl_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_expr_v1beta1_decl_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_expr_v1beta1_decl_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_decl_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_decl_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_expr_v1beta1_decl_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_expr_v1beta1_decl_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_expr_v1beta1_decl_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_expr_v1beta1_decl_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_decl_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1beta1_decl_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_decl_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1beta1_decl_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_decl_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1beta1_decl_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_decl_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_expr_v1beta1_decl_proto #############

        set(googleapis_googleapis_google_api_expr_v1beta1_decl_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_expr_v1beta1_decl_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_expr_v1beta1_decl_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_expr_v1beta1_decl_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_expr_v1beta1_decl_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_expr_v1beta1_decl_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_expr_v1beta1_decl_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_expr_v1beta1_decl_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_decl_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_decl_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_decl_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_expr_v1beta1_decl_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_expr_v1beta1_decl_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_expr_v1beta1_decl_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_expr_v1beta1_decl_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_expr_v1beta1_decl_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_expr_v1beta1_decl_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_expr_v1beta1_decl_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_decl_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_decl_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_expr_v1beta1_decl_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_expr_v1beta1_decl_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_expr_v1beta1_decl_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_expr_v1beta1_decl_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_decl_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1beta1_decl_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_decl_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1beta1_decl_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_decl_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1beta1_decl_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_decl_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_apikeys_v2_apikeys_cc_proto #############

        set(googleapis_googleapis_google_api_apikeys_v2_apikeys_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_apikeys_v2_apikeys_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_apikeys_v2_apikeys_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_apikeys_v2_apikeys_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_apikeys_v2_apikeys_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_apikeys_v2_apikeys_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_apikeys_v2_apikeys_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_apikeys_v2_apikeys_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_apikeys_v2_apikeys_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_apikeys_v2_apikeys_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_apikeys_v2_apikeys_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_apikeys_v2_apikeys_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_apikeys_v2_apikeys_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_apikeys_v2_apikeys_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_apikeys_v2_apikeys_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_apikeys_v2_apikeys_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_apikeys_v2_apikeys_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_apikeys_v2_apikeys_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_apikeys_v2_apikeys_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_apikeys_v2_apikeys_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_apikeys_v2_apikeys_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_apikeys_v2_apikeys_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_apikeys_v2_apikeys_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_apikeys_v2_apikeys_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_apikeys_v2_apikeys_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_apikeys_v2_apikeys_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_apikeys_v2_apikeys_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_apikeys_v2_apikeys_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_apikeys_v2_apikeys_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_apikeys_v2_apikeys_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_apikeys_v2_apikeys_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_apikeys_v2_apikeys_proto #############

        set(googleapis_googleapis_google_api_apikeys_v2_apikeys_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_apikeys_v2_apikeys_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_apikeys_v2_apikeys_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_apikeys_v2_apikeys_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_apikeys_v2_apikeys_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_apikeys_v2_apikeys_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_apikeys_v2_apikeys_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_apikeys_v2_apikeys_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_apikeys_v2_apikeys_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_apikeys_v2_apikeys_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_apikeys_v2_apikeys_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_apikeys_v2_apikeys_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_apikeys_v2_apikeys_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_apikeys_v2_apikeys_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_apikeys_v2_apikeys_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_apikeys_v2_apikeys_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_apikeys_v2_apikeys_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_apikeys_v2_apikeys_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_apikeys_v2_apikeys_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_apikeys_v2_apikeys_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_apikeys_v2_apikeys_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_apikeys_v2_apikeys_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_apikeys_v2_apikeys_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_apikeys_v2_apikeys_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_apikeys_v2_apikeys_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_apikeys_v2_apikeys_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_apikeys_v2_apikeys_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_apikeys_v2_apikeys_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_apikeys_v2_apikeys_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_apikeys_v2_apikeys_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_apikeys_v2_apikeys_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_servicemanagement_v1_servicemanagement_cc_proto #############

        set(googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_servicemanagement_v1_servicemanagement_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_servicemanagement_v1_servicemanagement_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_servicemanagement_v1_servicemanagement_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_servicemanagement_v1_servicemanagement_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_servicemanagement_v1_servicemanagement_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_servicemanagement_v1_servicemanagement_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_servicemanagement_v1_servicemanagement_proto #############

        set(googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_servicemanagement_v1_servicemanagement_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_servicemanagement_v1_servicemanagement_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_servicemanagement_v1_servicemanagement_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_servicemanagement_v1_servicemanagement_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_servicemanagement_v1_servicemanagement_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_servicemanagement_v1_servicemanagement_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicemanagement_v1_servicemanagement_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_service_cc_proto #############

        set(googleapis_googleapis_google_api_service_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_service_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_service_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_service_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_service_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_service_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_service_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_service_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_service_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_service_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_service_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_service_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_service_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_service_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_service_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_service_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_service_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_service_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_service_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_service_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_service_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_service_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_service_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_service_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_service_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_service_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_service_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_service_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_service_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_service_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_service_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_service_proto #############

        set(googleapis_googleapis_google_api_service_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_service_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_service_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_service_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_service_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_service_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_service_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_service_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_service_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_service_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_service_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_service_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_service_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_service_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_service_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_service_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_service_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_service_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_service_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_service_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_service_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_service_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_service_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_service_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_service_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_service_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_service_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_service_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_service_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_service_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_service_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_sql_v1_sql_cc_proto #############

        set(googleapis_googleapis_google_cloud_sql_v1_sql_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_sql_v1_sql_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_sql_v1_sql_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_sql_v1_sql_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_sql_v1_sql_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_sql_v1_sql_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_sql_v1_sql_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_sql_v1_sql_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sql_v1_sql_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sql_v1_sql_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sql_v1_sql_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_sql_v1_sql_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_sql_v1_sql_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_sql_v1_sql_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_sql_v1_sql_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_sql_v1_sql_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_sql_v1_sql_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_sql_v1_sql_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sql_v1_sql_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sql_v1_sql_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_sql_v1_sql_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_sql_v1_sql_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_sql_v1_sql_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_sql_v1_sql_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sql_v1_sql_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_sql_v1_sql_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sql_v1_sql_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_sql_v1_sql_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sql_v1_sql_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_sql_v1_sql_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sql_v1_sql_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_sql_v1_sql_proto #############

        set(googleapis_googleapis_google_cloud_sql_v1_sql_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_sql_v1_sql_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_sql_v1_sql_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_sql_v1_sql_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_sql_v1_sql_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_sql_v1_sql_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_sql_v1_sql_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_sql_v1_sql_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sql_v1_sql_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sql_v1_sql_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sql_v1_sql_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_sql_v1_sql_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_sql_v1_sql_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_sql_v1_sql_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_sql_v1_sql_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_sql_v1_sql_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_sql_v1_sql_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_sql_v1_sql_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sql_v1_sql_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sql_v1_sql_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_sql_v1_sql_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_sql_v1_sql_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_sql_v1_sql_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_sql_v1_sql_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sql_v1_sql_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_sql_v1_sql_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sql_v1_sql_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_sql_v1_sql_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sql_v1_sql_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_sql_v1_sql_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sql_v1_sql_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_sql_v1beta4_sql_cc_proto #############

        set(googleapis_googleapis_google_cloud_sql_v1beta4_sql_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_sql_v1beta4_sql_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_sql_v1beta4_sql_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_sql_v1beta4_sql_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_sql_v1beta4_sql_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_sql_v1beta4_sql_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_sql_v1beta4_sql_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_sql_v1beta4_sql_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sql_v1beta4_sql_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sql_v1beta4_sql_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sql_v1beta4_sql_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_sql_v1beta4_sql_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_sql_v1beta4_sql_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_sql_v1beta4_sql_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_sql_v1beta4_sql_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_sql_v1beta4_sql_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_sql_v1beta4_sql_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_sql_v1beta4_sql_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sql_v1beta4_sql_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sql_v1beta4_sql_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_sql_v1beta4_sql_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_sql_v1beta4_sql_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_sql_v1beta4_sql_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_sql_v1beta4_sql_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sql_v1beta4_sql_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_sql_v1beta4_sql_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sql_v1beta4_sql_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_sql_v1beta4_sql_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sql_v1beta4_sql_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_sql_v1beta4_sql_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sql_v1beta4_sql_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_sql_v1beta4_sql_proto #############

        set(googleapis_googleapis_google_cloud_sql_v1beta4_sql_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_sql_v1beta4_sql_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_sql_v1beta4_sql_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_sql_v1beta4_sql_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_sql_v1beta4_sql_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_sql_v1beta4_sql_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_sql_v1beta4_sql_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_sql_v1beta4_sql_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sql_v1beta4_sql_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sql_v1beta4_sql_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sql_v1beta4_sql_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_sql_v1beta4_sql_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_sql_v1beta4_sql_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_sql_v1beta4_sql_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_sql_v1beta4_sql_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_sql_v1beta4_sql_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_sql_v1beta4_sql_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_sql_v1beta4_sql_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sql_v1beta4_sql_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sql_v1beta4_sql_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_sql_v1beta4_sql_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_sql_v1beta4_sql_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_sql_v1beta4_sql_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_sql_v1beta4_sql_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sql_v1beta4_sql_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_sql_v1beta4_sql_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sql_v1beta4_sql_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_sql_v1beta4_sql_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sql_v1beta4_sql_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_sql_v1beta4_sql_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_sql_v1beta4_sql_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_managedidentities_v1beta1_managedidentities_cc_proto #############

        set(googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_managedidentities_v1beta1_managedidentities_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_managedidentities_v1beta1_managedidentities_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_managedidentities_v1beta1_managedidentities_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_managedidentities_v1beta1_managedidentities_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_managedidentities_v1beta1_managedidentities_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_managedidentities_v1beta1_managedidentities_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_managedidentities_v1beta1_managedidentities_proto #############

        set(googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_managedidentities_v1beta1_managedidentities_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_managedidentities_v1beta1_managedidentities_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_managedidentities_v1beta1_managedidentities_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_managedidentities_v1beta1_managedidentities_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_managedidentities_v1beta1_managedidentities_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_managedidentities_v1beta1_managedidentities_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_managedidentities_v1beta1_managedidentities_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_managedidentities_v1_managedidentities_cc_proto #############

        set(googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_managedidentities_v1_managedidentities_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_managedidentities_v1_managedidentities_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_managedidentities_v1_managedidentities_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_managedidentities_v1_managedidentities_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_managedidentities_v1_managedidentities_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_managedidentities_v1_managedidentities_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_managedidentities_v1_managedidentities_proto #############

        set(googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_managedidentities_v1_managedidentities_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_managedidentities_v1_managedidentities_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_managedidentities_v1_managedidentities_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_managedidentities_v1_managedidentities_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_managedidentities_v1_managedidentities_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_managedidentities_v1_managedidentities_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_managedidentities_v1_managedidentities_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_baremetalsolution_v2_baremetalsolution_cc_proto #############

        set(googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_baremetalsolution_v2_baremetalsolution_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_baremetalsolution_v2_baremetalsolution_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_baremetalsolution_v2_baremetalsolution_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_baremetalsolution_v2_baremetalsolution_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_baremetalsolution_v2_baremetalsolution_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_baremetalsolution_v2_baremetalsolution_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_baremetalsolution_v2_baremetalsolution_proto #############

        set(googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_baremetalsolution_v2_baremetalsolution_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_baremetalsolution_v2_baremetalsolution_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_baremetalsolution_v2_baremetalsolution_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_baremetalsolution_v2_baremetalsolution_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_baremetalsolution_v2_baremetalsolution_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_baremetalsolution_v2_baremetalsolution_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_baremetalsolution_v2_baremetalsolution_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_dataproc_v1_dataproc_cc_proto #############

        set(googleapis_googleapis_google_cloud_dataproc_v1_dataproc_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_dataproc_v1_dataproc_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_dataproc_v1_dataproc_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_dataproc_v1_dataproc_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_dataproc_v1_dataproc_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_dataproc_v1_dataproc_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_dataproc_v1_dataproc_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_dataproc_v1_dataproc_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataproc_v1_dataproc_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataproc_v1_dataproc_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataproc_v1_dataproc_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_dataproc_v1_dataproc_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_dataproc_v1_dataproc_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_dataproc_v1_dataproc_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_dataproc_v1_dataproc_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_dataproc_v1_dataproc_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_dataproc_v1_dataproc_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_dataproc_v1_dataproc_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataproc_v1_dataproc_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataproc_v1_dataproc_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_dataproc_v1_dataproc_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_dataproc_v1_dataproc_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_dataproc_v1_dataproc_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_dataproc_v1_dataproc_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataproc_v1_dataproc_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dataproc_v1_dataproc_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataproc_v1_dataproc_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dataproc_v1_dataproc_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataproc_v1_dataproc_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dataproc_v1_dataproc_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataproc_v1_dataproc_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_dataproc_v1_dataproc_proto #############

        set(googleapis_googleapis_google_cloud_dataproc_v1_dataproc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_dataproc_v1_dataproc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_dataproc_v1_dataproc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_dataproc_v1_dataproc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_dataproc_v1_dataproc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_dataproc_v1_dataproc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_dataproc_v1_dataproc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_dataproc_v1_dataproc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataproc_v1_dataproc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataproc_v1_dataproc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataproc_v1_dataproc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_dataproc_v1_dataproc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_dataproc_v1_dataproc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_dataproc_v1_dataproc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_dataproc_v1_dataproc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_dataproc_v1_dataproc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_dataproc_v1_dataproc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_dataproc_v1_dataproc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataproc_v1_dataproc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataproc_v1_dataproc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_dataproc_v1_dataproc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_dataproc_v1_dataproc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_dataproc_v1_dataproc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_dataproc_v1_dataproc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataproc_v1_dataproc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dataproc_v1_dataproc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataproc_v1_dataproc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dataproc_v1_dataproc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataproc_v1_dataproc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dataproc_v1_dataproc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataproc_v1_dataproc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_certificatemanager_v1_certificatemanager_cc_proto #############

        set(googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_certificatemanager_v1_certificatemanager_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_certificatemanager_v1_certificatemanager_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_certificatemanager_v1_certificatemanager_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_certificatemanager_v1_certificatemanager_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_certificatemanager_v1_certificatemanager_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_certificatemanager_v1_certificatemanager_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_certificatemanager_v1_certificatemanager_proto #############

        set(googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_certificatemanager_v1_certificatemanager_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_certificatemanager_v1_certificatemanager_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_certificatemanager_v1_certificatemanager_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_certificatemanager_v1_certificatemanager_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_certificatemanager_v1_certificatemanager_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_certificatemanager_v1_certificatemanager_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_certificatemanager_v1_certificatemanager_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_pubsublite_v1_pubsublite_cc_proto #############

        set(googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_pubsublite_v1_pubsublite_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_pubsublite_v1_pubsublite_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_pubsublite_v1_pubsublite_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_pubsublite_v1_pubsublite_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_pubsublite_v1_pubsublite_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_pubsublite_v1_pubsublite_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_pubsublite_v1_pubsublite_proto #############

        set(googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_pubsublite_v1_pubsublite_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_pubsublite_v1_pubsublite_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_pubsublite_v1_pubsublite_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_pubsublite_v1_pubsublite_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_pubsublite_v1_pubsublite_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_pubsublite_v1_pubsublite_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_pubsublite_v1_pubsublite_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_talent_v4_talent_cc_proto #############

        set(googleapis_googleapis_google_cloud_talent_v4_talent_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_talent_v4_talent_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_talent_v4_talent_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_talent_v4_talent_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_talent_v4_talent_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_talent_v4_talent_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_talent_v4_talent_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_talent_v4_talent_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_talent_v4_talent_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_talent_v4_talent_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_talent_v4_talent_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_talent_v4_talent_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_talent_v4_talent_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_talent_v4_talent_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_talent_v4_talent_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_talent_v4_talent_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_talent_v4_talent_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_talent_v4_talent_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_talent_v4_talent_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_talent_v4_talent_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_talent_v4_talent_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_talent_v4_talent_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_talent_v4_talent_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_talent_v4_talent_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_talent_v4_talent_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_talent_v4_talent_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_talent_v4_talent_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_talent_v4_talent_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_talent_v4_talent_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_talent_v4_talent_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_talent_v4_talent_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_talent_v4_talent_proto #############

        set(googleapis_googleapis_google_cloud_talent_v4_talent_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_talent_v4_talent_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_talent_v4_talent_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_talent_v4_talent_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_talent_v4_talent_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_talent_v4_talent_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_talent_v4_talent_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_talent_v4_talent_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_talent_v4_talent_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_talent_v4_talent_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_talent_v4_talent_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_talent_v4_talent_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_talent_v4_talent_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_talent_v4_talent_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_talent_v4_talent_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_talent_v4_talent_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_talent_v4_talent_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_talent_v4_talent_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_talent_v4_talent_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_talent_v4_talent_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_talent_v4_talent_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_talent_v4_talent_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_talent_v4_talent_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_talent_v4_talent_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_talent_v4_talent_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_talent_v4_talent_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_talent_v4_talent_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_talent_v4_talent_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_talent_v4_talent_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_talent_v4_talent_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_talent_v4_talent_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_talent_v4beta1_talent_cc_proto #############

        set(googleapis_googleapis_google_cloud_talent_v4beta1_talent_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_talent_v4beta1_talent_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_talent_v4beta1_talent_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_talent_v4beta1_talent_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_talent_v4beta1_talent_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_talent_v4beta1_talent_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_talent_v4beta1_talent_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_talent_v4beta1_talent_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_talent_v4beta1_talent_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_talent_v4beta1_talent_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_talent_v4beta1_talent_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_talent_v4beta1_talent_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_talent_v4beta1_talent_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_talent_v4beta1_talent_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_talent_v4beta1_talent_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_talent_v4beta1_talent_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_talent_v4beta1_talent_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_talent_v4beta1_talent_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_talent_v4beta1_talent_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_talent_v4beta1_talent_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_talent_v4beta1_talent_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_talent_v4beta1_talent_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_talent_v4beta1_talent_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_talent_v4beta1_talent_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_talent_v4beta1_talent_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_talent_v4beta1_talent_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_talent_v4beta1_talent_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_talent_v4beta1_talent_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_talent_v4beta1_talent_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_talent_v4beta1_talent_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_talent_v4beta1_talent_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_talent_v4beta1_talent_proto #############

        set(googleapis_googleapis_google_cloud_talent_v4beta1_talent_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_talent_v4beta1_talent_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_talent_v4beta1_talent_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_talent_v4beta1_talent_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_talent_v4beta1_talent_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_talent_v4beta1_talent_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_talent_v4beta1_talent_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_talent_v4beta1_talent_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_talent_v4beta1_talent_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_talent_v4beta1_talent_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_talent_v4beta1_talent_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_talent_v4beta1_talent_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_talent_v4beta1_talent_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_talent_v4beta1_talent_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_talent_v4beta1_talent_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_talent_v4beta1_talent_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_talent_v4beta1_talent_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_talent_v4beta1_talent_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_talent_v4beta1_talent_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_talent_v4beta1_talent_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_talent_v4beta1_talent_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_talent_v4beta1_talent_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_talent_v4beta1_talent_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_talent_v4beta1_talent_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_talent_v4beta1_talent_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_talent_v4beta1_talent_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_talent_v4beta1_talent_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_talent_v4beta1_talent_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_talent_v4beta1_talent_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_talent_v4beta1_talent_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_talent_v4beta1_talent_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_metastore_v1alpha_metastore_cc_proto #############

        set(googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_metastore_v1alpha_metastore_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_metastore_v1alpha_metastore_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_metastore_v1alpha_metastore_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_metastore_v1alpha_metastore_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_metastore_v1alpha_metastore_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_metastore_v1alpha_metastore_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_metastore_v1alpha_metastore_proto #############

        set(googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_metastore_v1alpha_metastore_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_metastore_v1alpha_metastore_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_metastore_v1alpha_metastore_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_metastore_v1alpha_metastore_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_metastore_v1alpha_metastore_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_metastore_v1alpha_metastore_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_v1alpha_metastore_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_metastore_v1_metastore_cc_proto #############

        set(googleapis_googleapis_google_cloud_metastore_v1_metastore_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_metastore_v1_metastore_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_metastore_v1_metastore_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_metastore_v1_metastore_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_metastore_v1_metastore_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_metastore_v1_metastore_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_metastore_v1_metastore_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_metastore_v1_metastore_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_v1_metastore_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_v1_metastore_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_v1_metastore_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_metastore_v1_metastore_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_metastore_v1_metastore_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_metastore_v1_metastore_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_metastore_v1_metastore_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_metastore_v1_metastore_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_metastore_v1_metastore_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_metastore_v1_metastore_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_v1_metastore_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_v1_metastore_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_metastore_v1_metastore_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_metastore_v1_metastore_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_metastore_v1_metastore_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_metastore_v1_metastore_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_v1_metastore_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_metastore_v1_metastore_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_v1_metastore_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_metastore_v1_metastore_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_v1_metastore_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_metastore_v1_metastore_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_v1_metastore_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_metastore_v1_metastore_proto #############

        set(googleapis_googleapis_google_cloud_metastore_v1_metastore_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_metastore_v1_metastore_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_metastore_v1_metastore_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_metastore_v1_metastore_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_metastore_v1_metastore_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_metastore_v1_metastore_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_metastore_v1_metastore_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_metastore_v1_metastore_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_v1_metastore_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_v1_metastore_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_v1_metastore_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_metastore_v1_metastore_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_metastore_v1_metastore_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_metastore_v1_metastore_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_metastore_v1_metastore_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_metastore_v1_metastore_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_metastore_v1_metastore_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_metastore_v1_metastore_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_v1_metastore_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_v1_metastore_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_metastore_v1_metastore_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_metastore_v1_metastore_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_metastore_v1_metastore_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_metastore_v1_metastore_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_v1_metastore_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_metastore_v1_metastore_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_v1_metastore_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_metastore_v1_metastore_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_v1_metastore_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_metastore_v1_metastore_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_v1_metastore_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_apigateway_v1_apigateway_cc_proto #############

        set(googleapis_googleapis_google_cloud_apigateway_v1_apigateway_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_apigateway_v1_apigateway_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_apigateway_v1_apigateway_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_apigateway_v1_apigateway_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_apigateway_v1_apigateway_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_apigateway_v1_apigateway_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_apigateway_v1_apigateway_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_apigateway_v1_apigateway_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigateway_v1_apigateway_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigateway_v1_apigateway_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigateway_v1_apigateway_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_apigateway_v1_apigateway_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_apigateway_v1_apigateway_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_apigateway_v1_apigateway_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_apigateway_v1_apigateway_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_apigateway_v1_apigateway_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_apigateway_v1_apigateway_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_apigateway_v1_apigateway_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigateway_v1_apigateway_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigateway_v1_apigateway_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_apigateway_v1_apigateway_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_apigateway_v1_apigateway_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_apigateway_v1_apigateway_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_apigateway_v1_apigateway_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigateway_v1_apigateway_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_apigateway_v1_apigateway_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigateway_v1_apigateway_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_apigateway_v1_apigateway_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigateway_v1_apigateway_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_apigateway_v1_apigateway_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigateway_v1_apigateway_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_apigateway_v1_apigateway_proto #############

        set(googleapis_googleapis_google_cloud_apigateway_v1_apigateway_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_apigateway_v1_apigateway_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_apigateway_v1_apigateway_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_apigateway_v1_apigateway_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_apigateway_v1_apigateway_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_apigateway_v1_apigateway_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_apigateway_v1_apigateway_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_apigateway_v1_apigateway_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigateway_v1_apigateway_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigateway_v1_apigateway_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigateway_v1_apigateway_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_apigateway_v1_apigateway_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_apigateway_v1_apigateway_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_apigateway_v1_apigateway_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_apigateway_v1_apigateway_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_apigateway_v1_apigateway_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_apigateway_v1_apigateway_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_apigateway_v1_apigateway_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigateway_v1_apigateway_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigateway_v1_apigateway_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_apigateway_v1_apigateway_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_apigateway_v1_apigateway_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_apigateway_v1_apigateway_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_apigateway_v1_apigateway_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigateway_v1_apigateway_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_apigateway_v1_apigateway_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigateway_v1_apigateway_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_apigateway_v1_apigateway_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigateway_v1_apigateway_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_apigateway_v1_apigateway_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigateway_v1_apigateway_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_billing_budgets_v1_budgets_cc_proto #############

        set(googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_billing_budgets_v1_budgets_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_billing_budgets_v1_budgets_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_billing_budgets_v1_budgets_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_billing_budgets_v1_budgets_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_billing_budgets_v1_budgets_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_billing_budgets_v1_budgets_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_billing_budgets_v1_budgets_proto #############

        set(googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_billing_budgets_v1_budgets_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_billing_budgets_v1_budgets_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_billing_budgets_v1_budgets_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_billing_budgets_v1_budgets_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_billing_budgets_v1_budgets_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_billing_budgets_v1_budgets_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_billing_budgets_v1_budgets_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_visionai_v1alpha1_visionai_cc_proto #############

        set(googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_visionai_v1alpha1_visionai_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_visionai_v1alpha1_visionai_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_visionai_v1alpha1_visionai_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_visionai_v1alpha1_visionai_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_visionai_v1alpha1_visionai_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_visionai_v1alpha1_visionai_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_visionai_v1alpha1_visionai_proto #############

        set(googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_visionai_v1alpha1_visionai_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_visionai_v1alpha1_visionai_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_visionai_v1alpha1_visionai_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_visionai_v1alpha1_visionai_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_visionai_v1alpha1_visionai_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_visionai_v1alpha1_visionai_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_visionai_v1alpha1_visionai_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_cc_proto #############

        set(googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_proto #############

        set(googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_osconfig_agentendpoint_v1_agentendpoint_cc_proto #############

        set(googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_osconfig_agentendpoint_v1_agentendpoint_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_osconfig_agentendpoint_v1_agentendpoint_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_osconfig_agentendpoint_v1_agentendpoint_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_osconfig_agentendpoint_v1_agentendpoint_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_osconfig_agentendpoint_v1_agentendpoint_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_osconfig_agentendpoint_v1_agentendpoint_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_osconfig_agentendpoint_v1_agentendpoint_proto #############

        set(googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_osconfig_agentendpoint_v1_agentendpoint_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_osconfig_agentendpoint_v1_agentendpoint_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_osconfig_agentendpoint_v1_agentendpoint_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_osconfig_agentendpoint_v1_agentendpoint_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_osconfig_agentendpoint_v1_agentendpoint_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_osconfig_agentendpoint_v1_agentendpoint_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_agentendpoint_v1_agentendpoint_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_osconfig_v1beta_osconfig_cc_proto #############

        set(googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_osconfig_v1beta_osconfig_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_osconfig_v1beta_osconfig_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_osconfig_v1beta_osconfig_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_osconfig_v1beta_osconfig_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_osconfig_v1beta_osconfig_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_osconfig_v1beta_osconfig_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_osconfig_v1beta_osconfig_proto #############

        set(googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_osconfig_v1beta_osconfig_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_osconfig_v1beta_osconfig_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_osconfig_v1beta_osconfig_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_osconfig_v1beta_osconfig_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_osconfig_v1beta_osconfig_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_osconfig_v1beta_osconfig_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1beta_osconfig_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_osconfig_v1alpha_osconfig_cc_proto #############

        set(googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_osconfig_v1alpha_osconfig_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_osconfig_v1alpha_osconfig_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_osconfig_v1alpha_osconfig_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_osconfig_v1alpha_osconfig_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_osconfig_v1alpha_osconfig_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_osconfig_v1alpha_osconfig_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_osconfig_v1alpha_osconfig_proto #############

        set(googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_osconfig_v1alpha_osconfig_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_osconfig_v1alpha_osconfig_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_osconfig_v1alpha_osconfig_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_osconfig_v1alpha_osconfig_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_osconfig_v1alpha_osconfig_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_osconfig_v1alpha_osconfig_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1alpha_osconfig_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_osconfig_v1_osconfig_cc_proto #############

        set(googleapis_googleapis_google_cloud_osconfig_v1_osconfig_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_osconfig_v1_osconfig_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_osconfig_v1_osconfig_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_osconfig_v1_osconfig_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_osconfig_v1_osconfig_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_osconfig_v1_osconfig_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_osconfig_v1_osconfig_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_osconfig_v1_osconfig_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1_osconfig_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1_osconfig_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1_osconfig_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_osconfig_v1_osconfig_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_osconfig_v1_osconfig_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_osconfig_v1_osconfig_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_osconfig_v1_osconfig_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_osconfig_v1_osconfig_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_osconfig_v1_osconfig_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_osconfig_v1_osconfig_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1_osconfig_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1_osconfig_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_osconfig_v1_osconfig_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_osconfig_v1_osconfig_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_osconfig_v1_osconfig_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_osconfig_v1_osconfig_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1_osconfig_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_osconfig_v1_osconfig_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1_osconfig_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_osconfig_v1_osconfig_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1_osconfig_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_osconfig_v1_osconfig_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1_osconfig_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_osconfig_v1_osconfig_proto #############

        set(googleapis_googleapis_google_cloud_osconfig_v1_osconfig_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_osconfig_v1_osconfig_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_osconfig_v1_osconfig_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_osconfig_v1_osconfig_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_osconfig_v1_osconfig_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_osconfig_v1_osconfig_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_osconfig_v1_osconfig_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_osconfig_v1_osconfig_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1_osconfig_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1_osconfig_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1_osconfig_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_osconfig_v1_osconfig_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_osconfig_v1_osconfig_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_osconfig_v1_osconfig_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_osconfig_v1_osconfig_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_osconfig_v1_osconfig_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_osconfig_v1_osconfig_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_osconfig_v1_osconfig_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1_osconfig_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1_osconfig_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_osconfig_v1_osconfig_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_osconfig_v1_osconfig_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_osconfig_v1_osconfig_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_osconfig_v1_osconfig_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1_osconfig_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_osconfig_v1_osconfig_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1_osconfig_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_osconfig_v1_osconfig_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1_osconfig_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_osconfig_v1_osconfig_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_osconfig_v1_osconfig_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_notebooks_v1_notebooks_cc_proto #############

        set(googleapis_googleapis_google_cloud_notebooks_v1_notebooks_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_notebooks_v1_notebooks_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_notebooks_v1_notebooks_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_notebooks_v1_notebooks_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_notebooks_v1_notebooks_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_notebooks_v1_notebooks_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_notebooks_v1_notebooks_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_notebooks_v1_notebooks_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_notebooks_v1_notebooks_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_notebooks_v1_notebooks_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_notebooks_v1_notebooks_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_notebooks_v1_notebooks_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_notebooks_v1_notebooks_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_notebooks_v1_notebooks_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_notebooks_v1_notebooks_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_notebooks_v1_notebooks_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_notebooks_v1_notebooks_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_notebooks_v1_notebooks_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_notebooks_v1_notebooks_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_notebooks_v1_notebooks_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_notebooks_v1_notebooks_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_notebooks_v1_notebooks_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_notebooks_v1_notebooks_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_notebooks_v1_notebooks_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_notebooks_v1_notebooks_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_notebooks_v1_notebooks_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_notebooks_v1_notebooks_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_notebooks_v1_notebooks_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_notebooks_v1_notebooks_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_notebooks_v1_notebooks_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_notebooks_v1_notebooks_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_notebooks_v1_notebooks_proto #############

        set(googleapis_googleapis_google_cloud_notebooks_v1_notebooks_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_notebooks_v1_notebooks_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_notebooks_v1_notebooks_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_notebooks_v1_notebooks_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_notebooks_v1_notebooks_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_notebooks_v1_notebooks_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_notebooks_v1_notebooks_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_notebooks_v1_notebooks_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_notebooks_v1_notebooks_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_notebooks_v1_notebooks_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_notebooks_v1_notebooks_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_notebooks_v1_notebooks_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_notebooks_v1_notebooks_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_notebooks_v1_notebooks_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_notebooks_v1_notebooks_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_notebooks_v1_notebooks_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_notebooks_v1_notebooks_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_notebooks_v1_notebooks_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_notebooks_v1_notebooks_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_notebooks_v1_notebooks_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_notebooks_v1_notebooks_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_notebooks_v1_notebooks_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_notebooks_v1_notebooks_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_notebooks_v1_notebooks_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_notebooks_v1_notebooks_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_notebooks_v1_notebooks_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_notebooks_v1_notebooks_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_notebooks_v1_notebooks_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_notebooks_v1_notebooks_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_notebooks_v1_notebooks_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_notebooks_v1_notebooks_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_dataform_v1beta1_dataform_cc_proto #############

        set(googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_dataform_v1beta1_dataform_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_dataform_v1beta1_dataform_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_dataform_v1beta1_dataform_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dataform_v1beta1_dataform_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dataform_v1beta1_dataform_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dataform_v1beta1_dataform_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_dataform_v1beta1_dataform_proto #############

        set(googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_dataform_v1beta1_dataform_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_dataform_v1beta1_dataform_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_dataform_v1beta1_dataform_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dataform_v1beta1_dataform_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dataform_v1beta1_dataform_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dataform_v1beta1_dataform_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataform_v1beta1_dataform_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_dataform_v1alpha2_dataform_cc_proto #############

        set(googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_dataform_v1alpha2_dataform_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_dataform_v1alpha2_dataform_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_dataform_v1alpha2_dataform_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dataform_v1alpha2_dataform_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dataform_v1alpha2_dataform_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dataform_v1alpha2_dataform_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_dataform_v1alpha2_dataform_proto #############

        set(googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_dataform_v1alpha2_dataform_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_dataform_v1alpha2_dataform_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_dataform_v1alpha2_dataform_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dataform_v1alpha2_dataform_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dataform_v1alpha2_dataform_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dataform_v1alpha2_dataform_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataform_v1alpha2_dataform_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_vmwareengine_v1_vmwareengine_cc_proto #############

        set(googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_vmwareengine_v1_vmwareengine_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_vmwareengine_v1_vmwareengine_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_vmwareengine_v1_vmwareengine_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_vmwareengine_v1_vmwareengine_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_vmwareengine_v1_vmwareengine_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_vmwareengine_v1_vmwareengine_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_vmwareengine_v1_vmwareengine_proto #############

        set(googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_vmwareengine_v1_vmwareengine_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_vmwareengine_v1_vmwareengine_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_vmwareengine_v1_vmwareengine_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_vmwareengine_v1_vmwareengine_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_vmwareengine_v1_vmwareengine_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_vmwareengine_v1_vmwareengine_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vmwareengine_v1_vmwareengine_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_assuredworkloads_v1beta1_assuredworkloads_cc_proto #############

        set(googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_assuredworkloads_v1beta1_assuredworkloads_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_assuredworkloads_v1beta1_assuredworkloads_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_assuredworkloads_v1beta1_assuredworkloads_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_assuredworkloads_v1beta1_assuredworkloads_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_assuredworkloads_v1beta1_assuredworkloads_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_assuredworkloads_v1beta1_assuredworkloads_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_assuredworkloads_v1beta1_assuredworkloads_proto #############

        set(googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_assuredworkloads_v1beta1_assuredworkloads_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_assuredworkloads_v1beta1_assuredworkloads_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_assuredworkloads_v1beta1_assuredworkloads_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_assuredworkloads_v1beta1_assuredworkloads_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_assuredworkloads_v1beta1_assuredworkloads_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_assuredworkloads_v1beta1_assuredworkloads_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_v1beta1_assuredworkloads_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_assuredworkloads_v1_assuredworkloads_cc_proto #############

        set(googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_assuredworkloads_v1_assuredworkloads_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_assuredworkloads_v1_assuredworkloads_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_assuredworkloads_v1_assuredworkloads_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_assuredworkloads_v1_assuredworkloads_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_assuredworkloads_v1_assuredworkloads_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_assuredworkloads_v1_assuredworkloads_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_assuredworkloads_v1_assuredworkloads_proto #############

        set(googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_assuredworkloads_v1_assuredworkloads_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_assuredworkloads_v1_assuredworkloads_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_assuredworkloads_v1_assuredworkloads_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_assuredworkloads_v1_assuredworkloads_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_assuredworkloads_v1_assuredworkloads_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_assuredworkloads_v1_assuredworkloads_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_v1_assuredworkloads_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_policytroubleshooter_v1_policytroubleshooter_cc_proto #############

        set(googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_policytroubleshooter_v1_policytroubleshooter_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_policytroubleshooter_v1_policytroubleshooter_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_policytroubleshooter_v1_policytroubleshooter_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_policytroubleshooter_v1_policytroubleshooter_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_policytroubleshooter_v1_policytroubleshooter_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_policytroubleshooter_v1_policytroubleshooter_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_policytroubleshooter_v1_policytroubleshooter_proto #############

        set(googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_policytroubleshooter_v1_policytroubleshooter_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_policytroubleshooter_v1_policytroubleshooter_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_policytroubleshooter_v1_policytroubleshooter_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_policytroubleshooter_v1_policytroubleshooter_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_policytroubleshooter_v1_policytroubleshooter_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_policytroubleshooter_v1_policytroubleshooter_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_policytroubleshooter_v1_policytroubleshooter_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_networksecurity_v1beta1_networksecurity_cc_proto #############

        set(googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_networksecurity_v1beta1_networksecurity_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_networksecurity_v1beta1_networksecurity_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_networksecurity_v1beta1_networksecurity_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_networksecurity_v1beta1_networksecurity_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_networksecurity_v1beta1_networksecurity_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_networksecurity_v1beta1_networksecurity_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_networksecurity_v1beta1_networksecurity_proto #############

        set(googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_networksecurity_v1beta1_networksecurity_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_networksecurity_v1beta1_networksecurity_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_networksecurity_v1beta1_networksecurity_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_networksecurity_v1beta1_networksecurity_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_networksecurity_v1beta1_networksecurity_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_networksecurity_v1beta1_networksecurity_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networksecurity_v1beta1_networksecurity_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_tpu_v1_tpu_cc_proto #############

        set(googleapis_googleapis_google_cloud_tpu_v1_tpu_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_tpu_v1_tpu_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_tpu_v1_tpu_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_tpu_v1_tpu_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_tpu_v1_tpu_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_tpu_v1_tpu_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_tpu_v1_tpu_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_tpu_v1_tpu_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_tpu_v1_tpu_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_tpu_v1_tpu_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_tpu_v1_tpu_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_tpu_v1_tpu_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_tpu_v1_tpu_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_tpu_v1_tpu_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_tpu_v1_tpu_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_tpu_v1_tpu_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_tpu_v1_tpu_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_tpu_v1_tpu_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_tpu_v1_tpu_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_tpu_v1_tpu_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_tpu_v1_tpu_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_tpu_v1_tpu_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_tpu_v1_tpu_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_tpu_v1_tpu_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_tpu_v1_tpu_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_tpu_v1_tpu_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_tpu_v1_tpu_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_tpu_v1_tpu_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_tpu_v1_tpu_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_tpu_v1_tpu_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_tpu_v1_tpu_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_tpu_v1_tpu_proto #############

        set(googleapis_googleapis_google_cloud_tpu_v1_tpu_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_tpu_v1_tpu_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_tpu_v1_tpu_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_tpu_v1_tpu_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_tpu_v1_tpu_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_tpu_v1_tpu_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_tpu_v1_tpu_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_tpu_v1_tpu_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_tpu_v1_tpu_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_tpu_v1_tpu_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_tpu_v1_tpu_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_tpu_v1_tpu_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_tpu_v1_tpu_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_tpu_v1_tpu_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_tpu_v1_tpu_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_tpu_v1_tpu_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_tpu_v1_tpu_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_tpu_v1_tpu_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_tpu_v1_tpu_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_tpu_v1_tpu_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_tpu_v1_tpu_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_tpu_v1_tpu_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_tpu_v1_tpu_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_tpu_v1_tpu_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_tpu_v1_tpu_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_tpu_v1_tpu_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_tpu_v1_tpu_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_tpu_v1_tpu_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_tpu_v1_tpu_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_tpu_v1_tpu_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_tpu_v1_tpu_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_gsuiteaddons_v1_gsuiteaddons_cc_proto #############

        set(googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_gsuiteaddons_v1_gsuiteaddons_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_gsuiteaddons_v1_gsuiteaddons_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_gsuiteaddons_v1_gsuiteaddons_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gsuiteaddons_v1_gsuiteaddons_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gsuiteaddons_v1_gsuiteaddons_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gsuiteaddons_v1_gsuiteaddons_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_gsuiteaddons_v1_gsuiteaddons_proto #############

        set(googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_gsuiteaddons_v1_gsuiteaddons_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_gsuiteaddons_v1_gsuiteaddons_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_gsuiteaddons_v1_gsuiteaddons_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gsuiteaddons_v1_gsuiteaddons_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gsuiteaddons_v1_gsuiteaddons_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gsuiteaddons_v1_gsuiteaddons_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gsuiteaddons_v1_gsuiteaddons_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_apigeeconnect_v1_apigeeconnect_cc_proto #############

        set(googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_apigeeconnect_v1_apigeeconnect_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_apigeeconnect_v1_apigeeconnect_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_apigeeconnect_v1_apigeeconnect_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_apigeeconnect_v1_apigeeconnect_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_apigeeconnect_v1_apigeeconnect_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_apigeeconnect_v1_apigeeconnect_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_apigeeconnect_v1_apigeeconnect_proto #############

        set(googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_apigeeconnect_v1_apigeeconnect_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_apigeeconnect_v1_apigeeconnect_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_apigeeconnect_v1_apigeeconnect_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_apigeeconnect_v1_apigeeconnect_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_apigeeconnect_v1_apigeeconnect_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_apigeeconnect_v1_apigeeconnect_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigeeconnect_v1_apigeeconnect_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_functions_v2alpha_functions_cc_proto #############

        set(googleapis_googleapis_google_cloud_functions_v2alpha_functions_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_functions_v2alpha_functions_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_functions_v2alpha_functions_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_functions_v2alpha_functions_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_functions_v2alpha_functions_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_functions_v2alpha_functions_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_functions_v2alpha_functions_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_functions_v2alpha_functions_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2alpha_functions_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2alpha_functions_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2alpha_functions_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_functions_v2alpha_functions_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_functions_v2alpha_functions_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_functions_v2alpha_functions_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_functions_v2alpha_functions_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_functions_v2alpha_functions_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_functions_v2alpha_functions_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_functions_v2alpha_functions_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2alpha_functions_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2alpha_functions_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_functions_v2alpha_functions_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_functions_v2alpha_functions_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_functions_v2alpha_functions_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_functions_v2alpha_functions_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2alpha_functions_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_functions_v2alpha_functions_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2alpha_functions_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_functions_v2alpha_functions_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2alpha_functions_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_functions_v2alpha_functions_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2alpha_functions_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_functions_v2alpha_functions_proto #############

        set(googleapis_googleapis_google_cloud_functions_v2alpha_functions_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_functions_v2alpha_functions_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_functions_v2alpha_functions_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_functions_v2alpha_functions_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_functions_v2alpha_functions_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_functions_v2alpha_functions_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_functions_v2alpha_functions_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_functions_v2alpha_functions_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2alpha_functions_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2alpha_functions_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2alpha_functions_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_functions_v2alpha_functions_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_functions_v2alpha_functions_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_functions_v2alpha_functions_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_functions_v2alpha_functions_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_functions_v2alpha_functions_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_functions_v2alpha_functions_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_functions_v2alpha_functions_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2alpha_functions_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2alpha_functions_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_functions_v2alpha_functions_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_functions_v2alpha_functions_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_functions_v2alpha_functions_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_functions_v2alpha_functions_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2alpha_functions_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_functions_v2alpha_functions_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2alpha_functions_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_functions_v2alpha_functions_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2alpha_functions_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_functions_v2alpha_functions_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2alpha_functions_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_functions_v2_functions_cc_proto #############

        set(googleapis_googleapis_google_cloud_functions_v2_functions_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_functions_v2_functions_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_functions_v2_functions_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_functions_v2_functions_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_functions_v2_functions_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_functions_v2_functions_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_functions_v2_functions_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_functions_v2_functions_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2_functions_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2_functions_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2_functions_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_functions_v2_functions_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_functions_v2_functions_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_functions_v2_functions_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_functions_v2_functions_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_functions_v2_functions_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_functions_v2_functions_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_functions_v2_functions_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2_functions_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2_functions_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_functions_v2_functions_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_functions_v2_functions_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_functions_v2_functions_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_functions_v2_functions_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2_functions_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_functions_v2_functions_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2_functions_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_functions_v2_functions_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2_functions_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_functions_v2_functions_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2_functions_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_functions_v2_functions_proto #############

        set(googleapis_googleapis_google_cloud_functions_v2_functions_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_functions_v2_functions_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_functions_v2_functions_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_functions_v2_functions_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_functions_v2_functions_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_functions_v2_functions_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_functions_v2_functions_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_functions_v2_functions_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2_functions_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2_functions_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2_functions_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_functions_v2_functions_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_functions_v2_functions_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_functions_v2_functions_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_functions_v2_functions_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_functions_v2_functions_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_functions_v2_functions_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_functions_v2_functions_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2_functions_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2_functions_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_functions_v2_functions_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_functions_v2_functions_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_functions_v2_functions_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_functions_v2_functions_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2_functions_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_functions_v2_functions_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2_functions_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_functions_v2_functions_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2_functions_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_functions_v2_functions_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2_functions_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_functions_v2beta_functions_cc_proto #############

        set(googleapis_googleapis_google_cloud_functions_v2beta_functions_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_functions_v2beta_functions_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_functions_v2beta_functions_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_functions_v2beta_functions_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_functions_v2beta_functions_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_functions_v2beta_functions_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_functions_v2beta_functions_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_functions_v2beta_functions_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2beta_functions_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2beta_functions_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2beta_functions_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_functions_v2beta_functions_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_functions_v2beta_functions_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_functions_v2beta_functions_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_functions_v2beta_functions_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_functions_v2beta_functions_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_functions_v2beta_functions_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_functions_v2beta_functions_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2beta_functions_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2beta_functions_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_functions_v2beta_functions_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_functions_v2beta_functions_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_functions_v2beta_functions_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_functions_v2beta_functions_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2beta_functions_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_functions_v2beta_functions_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2beta_functions_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_functions_v2beta_functions_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2beta_functions_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_functions_v2beta_functions_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2beta_functions_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_functions_v2beta_functions_proto #############

        set(googleapis_googleapis_google_cloud_functions_v2beta_functions_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_functions_v2beta_functions_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_functions_v2beta_functions_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_functions_v2beta_functions_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_functions_v2beta_functions_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_functions_v2beta_functions_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_functions_v2beta_functions_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_functions_v2beta_functions_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2beta_functions_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2beta_functions_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2beta_functions_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_functions_v2beta_functions_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_functions_v2beta_functions_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_functions_v2beta_functions_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_functions_v2beta_functions_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_functions_v2beta_functions_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_functions_v2beta_functions_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_functions_v2beta_functions_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2beta_functions_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2beta_functions_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_functions_v2beta_functions_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_functions_v2beta_functions_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_functions_v2beta_functions_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_functions_v2beta_functions_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2beta_functions_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_functions_v2beta_functions_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2beta_functions_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_functions_v2beta_functions_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2beta_functions_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_functions_v2beta_functions_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_functions_v2beta_functions_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_texttospeech_v1_texttospeech_cc_proto #############

        set(googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_texttospeech_v1_texttospeech_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_texttospeech_v1_texttospeech_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_texttospeech_v1_texttospeech_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_texttospeech_v1_texttospeech_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_texttospeech_v1_texttospeech_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_texttospeech_v1_texttospeech_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_texttospeech_v1_texttospeech_proto #############

        set(googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_texttospeech_v1_texttospeech_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_texttospeech_v1_texttospeech_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_texttospeech_v1_texttospeech_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_texttospeech_v1_texttospeech_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_texttospeech_v1_texttospeech_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_texttospeech_v1_texttospeech_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_texttospeech_v1_texttospeech_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_orchestration_airflow_service_v1_service_cc_proto #############

        set(googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_orchestration_airflow_service_v1_service_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_orchestration_airflow_service_v1_service_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_orchestration_airflow_service_v1_service_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_orchestration_airflow_service_v1_service_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_orchestration_airflow_service_v1_service_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_orchestration_airflow_service_v1_service_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_orchestration_airflow_service_v1_service_proto #############

        set(googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_orchestration_airflow_service_v1_service_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_orchestration_airflow_service_v1_service_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_orchestration_airflow_service_v1_service_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_orchestration_airflow_service_v1_service_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_orchestration_airflow_service_v1_service_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_orchestration_airflow_service_v1_service_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orchestration_airflow_service_v1_service_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_gkemulticloud_v1_gkemulticloud_cc_proto #############

        set(googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_gkemulticloud_v1_gkemulticloud_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_gkemulticloud_v1_gkemulticloud_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_gkemulticloud_v1_gkemulticloud_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkemulticloud_v1_gkemulticloud_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkemulticloud_v1_gkemulticloud_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkemulticloud_v1_gkemulticloud_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_gkemulticloud_v1_gkemulticloud_proto #############

        set(googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_gkemulticloud_v1_gkemulticloud_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_gkemulticloud_v1_gkemulticloud_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_gkemulticloud_v1_gkemulticloud_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkemulticloud_v1_gkemulticloud_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkemulticloud_v1_gkemulticloud_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkemulticloud_v1_gkemulticloud_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkemulticloud_v1_gkemulticloud_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_contentwarehouse_v1_contentwarehouse_cc_proto #############

        set(googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_contentwarehouse_v1_contentwarehouse_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_contentwarehouse_v1_contentwarehouse_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_contentwarehouse_v1_contentwarehouse_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_contentwarehouse_v1_contentwarehouse_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_contentwarehouse_v1_contentwarehouse_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_contentwarehouse_v1_contentwarehouse_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_contentwarehouse_v1_contentwarehouse_proto #############

        set(googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_contentwarehouse_v1_contentwarehouse_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_contentwarehouse_v1_contentwarehouse_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_contentwarehouse_v1_contentwarehouse_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_contentwarehouse_v1_contentwarehouse_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_contentwarehouse_v1_contentwarehouse_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_contentwarehouse_v1_contentwarehouse_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_contentwarehouse_v1_contentwarehouse_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_cc_proto #############

        set(googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_proto #############

        set(googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_eventarc_publishing_v1_publishing_cc_proto #############

        set(googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_eventarc_publishing_v1_publishing_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_eventarc_publishing_v1_publishing_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_eventarc_publishing_v1_publishing_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_eventarc_publishing_v1_publishing_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_eventarc_publishing_v1_publishing_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_eventarc_publishing_v1_publishing_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_eventarc_publishing_v1_publishing_proto #############

        set(googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_eventarc_publishing_v1_publishing_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_eventarc_publishing_v1_publishing_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_eventarc_publishing_v1_publishing_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_eventarc_publishing_v1_publishing_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_eventarc_publishing_v1_publishing_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_eventarc_publishing_v1_publishing_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_eventarc_publishing_v1_publishing_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_eventarc_v1_eventarc_cc_proto #############

        set(googleapis_googleapis_google_cloud_eventarc_v1_eventarc_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_eventarc_v1_eventarc_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_eventarc_v1_eventarc_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_eventarc_v1_eventarc_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_eventarc_v1_eventarc_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_eventarc_v1_eventarc_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_eventarc_v1_eventarc_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_eventarc_v1_eventarc_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_eventarc_v1_eventarc_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_eventarc_v1_eventarc_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_eventarc_v1_eventarc_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_eventarc_v1_eventarc_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_eventarc_v1_eventarc_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_eventarc_v1_eventarc_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_eventarc_v1_eventarc_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_eventarc_v1_eventarc_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_eventarc_v1_eventarc_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_eventarc_v1_eventarc_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_eventarc_v1_eventarc_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_eventarc_v1_eventarc_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_eventarc_v1_eventarc_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_eventarc_v1_eventarc_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_eventarc_v1_eventarc_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_eventarc_v1_eventarc_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_eventarc_v1_eventarc_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_eventarc_v1_eventarc_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_eventarc_v1_eventarc_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_eventarc_v1_eventarc_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_eventarc_v1_eventarc_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_eventarc_v1_eventarc_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_eventarc_v1_eventarc_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_eventarc_v1_eventarc_proto #############

        set(googleapis_googleapis_google_cloud_eventarc_v1_eventarc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_eventarc_v1_eventarc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_eventarc_v1_eventarc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_eventarc_v1_eventarc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_eventarc_v1_eventarc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_eventarc_v1_eventarc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_eventarc_v1_eventarc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_eventarc_v1_eventarc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_eventarc_v1_eventarc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_eventarc_v1_eventarc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_eventarc_v1_eventarc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_eventarc_v1_eventarc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_eventarc_v1_eventarc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_eventarc_v1_eventarc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_eventarc_v1_eventarc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_eventarc_v1_eventarc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_eventarc_v1_eventarc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_eventarc_v1_eventarc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_eventarc_v1_eventarc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_eventarc_v1_eventarc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_eventarc_v1_eventarc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_eventarc_v1_eventarc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_eventarc_v1_eventarc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_eventarc_v1_eventarc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_eventarc_v1_eventarc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_eventarc_v1_eventarc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_eventarc_v1_eventarc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_eventarc_v1_eventarc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_eventarc_v1_eventarc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_eventarc_v1_eventarc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_eventarc_v1_eventarc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_batch_v1alpha_batch_cc_proto #############

        set(googleapis_googleapis_google_cloud_batch_v1alpha_batch_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_batch_v1alpha_batch_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_batch_v1alpha_batch_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_batch_v1alpha_batch_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_batch_v1alpha_batch_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_batch_v1alpha_batch_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_batch_v1alpha_batch_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_batch_v1alpha_batch_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_batch_v1alpha_batch_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_batch_v1alpha_batch_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_batch_v1alpha_batch_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_batch_v1alpha_batch_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_batch_v1alpha_batch_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_batch_v1alpha_batch_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_batch_v1alpha_batch_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_batch_v1alpha_batch_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_batch_v1alpha_batch_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_batch_v1alpha_batch_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_batch_v1alpha_batch_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_batch_v1alpha_batch_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_batch_v1alpha_batch_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_batch_v1alpha_batch_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_batch_v1alpha_batch_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_batch_v1alpha_batch_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_batch_v1alpha_batch_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_batch_v1alpha_batch_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_batch_v1alpha_batch_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_batch_v1alpha_batch_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_batch_v1alpha_batch_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_batch_v1alpha_batch_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_batch_v1alpha_batch_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_batch_v1alpha_batch_proto #############

        set(googleapis_googleapis_google_cloud_batch_v1alpha_batch_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_batch_v1alpha_batch_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_batch_v1alpha_batch_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_batch_v1alpha_batch_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_batch_v1alpha_batch_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_batch_v1alpha_batch_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_batch_v1alpha_batch_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_batch_v1alpha_batch_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_batch_v1alpha_batch_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_batch_v1alpha_batch_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_batch_v1alpha_batch_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_batch_v1alpha_batch_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_batch_v1alpha_batch_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_batch_v1alpha_batch_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_batch_v1alpha_batch_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_batch_v1alpha_batch_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_batch_v1alpha_batch_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_batch_v1alpha_batch_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_batch_v1alpha_batch_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_batch_v1alpha_batch_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_batch_v1alpha_batch_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_batch_v1alpha_batch_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_batch_v1alpha_batch_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_batch_v1alpha_batch_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_batch_v1alpha_batch_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_batch_v1alpha_batch_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_batch_v1alpha_batch_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_batch_v1alpha_batch_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_batch_v1alpha_batch_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_batch_v1alpha_batch_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_batch_v1alpha_batch_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_batch_v1_batch_cc_proto #############

        set(googleapis_googleapis_google_cloud_batch_v1_batch_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_batch_v1_batch_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_batch_v1_batch_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_batch_v1_batch_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_batch_v1_batch_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_batch_v1_batch_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_batch_v1_batch_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_batch_v1_batch_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_batch_v1_batch_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_batch_v1_batch_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_batch_v1_batch_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_batch_v1_batch_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_batch_v1_batch_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_batch_v1_batch_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_batch_v1_batch_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_batch_v1_batch_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_batch_v1_batch_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_batch_v1_batch_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_batch_v1_batch_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_batch_v1_batch_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_batch_v1_batch_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_batch_v1_batch_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_batch_v1_batch_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_batch_v1_batch_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_batch_v1_batch_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_batch_v1_batch_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_batch_v1_batch_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_batch_v1_batch_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_batch_v1_batch_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_batch_v1_batch_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_batch_v1_batch_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_batch_v1_batch_proto #############

        set(googleapis_googleapis_google_cloud_batch_v1_batch_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_batch_v1_batch_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_batch_v1_batch_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_batch_v1_batch_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_batch_v1_batch_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_batch_v1_batch_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_batch_v1_batch_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_batch_v1_batch_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_batch_v1_batch_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_batch_v1_batch_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_batch_v1_batch_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_batch_v1_batch_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_batch_v1_batch_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_batch_v1_batch_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_batch_v1_batch_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_batch_v1_batch_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_batch_v1_batch_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_batch_v1_batch_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_batch_v1_batch_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_batch_v1_batch_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_batch_v1_batch_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_batch_v1_batch_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_batch_v1_batch_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_batch_v1_batch_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_batch_v1_batch_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_batch_v1_batch_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_batch_v1_batch_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_batch_v1_batch_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_batch_v1_batch_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_batch_v1_batch_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_batch_v1_batch_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_networkconnectivity_v1_networkconnectivity_cc_proto #############

        set(googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_networkconnectivity_v1_networkconnectivity_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_networkconnectivity_v1_networkconnectivity_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_networkconnectivity_v1_networkconnectivity_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_networkconnectivity_v1_networkconnectivity_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_networkconnectivity_v1_networkconnectivity_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_networkconnectivity_v1_networkconnectivity_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_networkconnectivity_v1_networkconnectivity_proto #############

        set(googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_networkconnectivity_v1_networkconnectivity_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_networkconnectivity_v1_networkconnectivity_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_networkconnectivity_v1_networkconnectivity_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_networkconnectivity_v1_networkconnectivity_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_networkconnectivity_v1_networkconnectivity_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_networkconnectivity_v1_networkconnectivity_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkconnectivity_v1_networkconnectivity_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_timeseriesinsights_v1_timeseriesinsights_cc_proto #############

        set(googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_timeseriesinsights_v1_timeseriesinsights_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_timeseriesinsights_v1_timeseriesinsights_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_timeseriesinsights_v1_timeseriesinsights_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_timeseriesinsights_v1_timeseriesinsights_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_timeseriesinsights_v1_timeseriesinsights_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_timeseriesinsights_v1_timeseriesinsights_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_timeseriesinsights_v1_timeseriesinsights_proto #############

        set(googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_timeseriesinsights_v1_timeseriesinsights_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_timeseriesinsights_v1_timeseriesinsights_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_timeseriesinsights_v1_timeseriesinsights_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_timeseriesinsights_v1_timeseriesinsights_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_timeseriesinsights_v1_timeseriesinsights_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_timeseriesinsights_v1_timeseriesinsights_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_timeseriesinsights_v1_timeseriesinsights_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_clouddms_v1_clouddms_cc_proto #############

        set(googleapis_googleapis_google_cloud_clouddms_v1_clouddms_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_clouddms_v1_clouddms_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_clouddms_v1_clouddms_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_clouddms_v1_clouddms_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_clouddms_v1_clouddms_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_clouddms_v1_clouddms_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_clouddms_v1_clouddms_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_clouddms_v1_clouddms_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_clouddms_v1_clouddms_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_clouddms_v1_clouddms_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_clouddms_v1_clouddms_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_clouddms_v1_clouddms_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_clouddms_v1_clouddms_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_clouddms_v1_clouddms_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_clouddms_v1_clouddms_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_clouddms_v1_clouddms_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_clouddms_v1_clouddms_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_clouddms_v1_clouddms_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_clouddms_v1_clouddms_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_clouddms_v1_clouddms_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_clouddms_v1_clouddms_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_clouddms_v1_clouddms_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_clouddms_v1_clouddms_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_clouddms_v1_clouddms_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_clouddms_v1_clouddms_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_clouddms_v1_clouddms_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_clouddms_v1_clouddms_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_clouddms_v1_clouddms_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_clouddms_v1_clouddms_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_clouddms_v1_clouddms_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_clouddms_v1_clouddms_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_clouddms_v1_clouddms_proto #############

        set(googleapis_googleapis_google_cloud_clouddms_v1_clouddms_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_clouddms_v1_clouddms_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_clouddms_v1_clouddms_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_clouddms_v1_clouddms_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_clouddms_v1_clouddms_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_clouddms_v1_clouddms_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_clouddms_v1_clouddms_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_clouddms_v1_clouddms_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_clouddms_v1_clouddms_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_clouddms_v1_clouddms_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_clouddms_v1_clouddms_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_clouddms_v1_clouddms_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_clouddms_v1_clouddms_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_clouddms_v1_clouddms_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_clouddms_v1_clouddms_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_clouddms_v1_clouddms_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_clouddms_v1_clouddms_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_clouddms_v1_clouddms_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_clouddms_v1_clouddms_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_clouddms_v1_clouddms_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_clouddms_v1_clouddms_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_clouddms_v1_clouddms_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_clouddms_v1_clouddms_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_clouddms_v1_clouddms_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_clouddms_v1_clouddms_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_clouddms_v1_clouddms_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_clouddms_v1_clouddms_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_clouddms_v1_clouddms_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_clouddms_v1_clouddms_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_clouddms_v1_clouddms_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_clouddms_v1_clouddms_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_audit_audit_cc_proto #############

        set(googleapis_googleapis_google_cloud_audit_audit_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_audit_audit_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_audit_audit_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_audit_audit_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_audit_audit_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_audit_audit_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_audit_audit_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_audit_audit_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_audit_audit_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_audit_audit_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_audit_audit_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_audit_audit_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_audit_audit_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_audit_audit_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_audit_audit_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_audit_audit_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_audit_audit_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_audit_audit_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_audit_audit_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_audit_audit_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_audit_audit_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_audit_audit_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_audit_audit_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_audit_audit_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_audit_audit_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_audit_audit_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_audit_audit_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_audit_audit_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_audit_audit_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_audit_audit_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_audit_audit_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_audit_audit_proto #############

        set(googleapis_googleapis_google_cloud_audit_audit_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_audit_audit_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_audit_audit_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_audit_audit_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_audit_audit_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_audit_audit_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_audit_audit_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_audit_audit_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_audit_audit_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_audit_audit_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_audit_audit_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_audit_audit_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_audit_audit_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_audit_audit_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_audit_audit_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_audit_audit_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_audit_audit_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_audit_audit_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_audit_audit_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_audit_audit_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_audit_audit_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_audit_audit_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_audit_audit_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_audit_audit_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_audit_audit_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_audit_audit_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_audit_audit_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_audit_audit_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_audit_audit_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_audit_audit_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_audit_audit_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_recommender_logging_v1_logging_cc_proto #############

        set(googleapis_googleapis_google_cloud_recommender_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_recommender_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_recommender_logging_v1_logging_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_recommender_logging_v1_logging_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_recommender_logging_v1_logging_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_recommender_logging_v1_logging_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_recommender_logging_v1_logging_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_recommender_logging_v1_logging_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_logging_v1_logging_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_logging_v1_logging_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_recommender_logging_v1_logging_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_recommender_logging_v1_logging_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_recommender_logging_v1_logging_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_recommender_logging_v1_logging_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_recommender_logging_v1_logging_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_recommender_logging_v1_logging_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_recommender_logging_v1_logging_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_logging_v1_logging_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_logging_v1_logging_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_recommender_logging_v1_logging_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_recommender_logging_v1_logging_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_recommender_logging_v1_logging_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_recommender_logging_v1_logging_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_logging_v1_logging_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_recommender_logging_v1_logging_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_logging_v1_logging_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_recommender_logging_v1_logging_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_logging_v1_logging_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_recommender_logging_v1_logging_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_logging_v1_logging_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_recommender_logging_v1_logging_proto #############

        set(googleapis_googleapis_google_cloud_recommender_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_recommender_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_recommender_logging_v1_logging_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_recommender_logging_v1_logging_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_recommender_logging_v1_logging_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_recommender_logging_v1_logging_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_recommender_logging_v1_logging_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_recommender_logging_v1_logging_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_logging_v1_logging_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_logging_v1_logging_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_recommender_logging_v1_logging_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_recommender_logging_v1_logging_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_recommender_logging_v1_logging_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_recommender_logging_v1_logging_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_recommender_logging_v1_logging_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_recommender_logging_v1_logging_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_recommender_logging_v1_logging_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_logging_v1_logging_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_logging_v1_logging_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_recommender_logging_v1_logging_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_recommender_logging_v1_logging_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_recommender_logging_v1_logging_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_recommender_logging_v1_logging_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_logging_v1_logging_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_recommender_logging_v1_logging_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_logging_v1_logging_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_recommender_logging_v1_logging_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_logging_v1_logging_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_recommender_logging_v1_logging_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_logging_v1_logging_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_recommender_v1beta1_recommender_cc_proto #############

        set(googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_recommender_v1beta1_recommender_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_recommender_v1beta1_recommender_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_recommender_v1beta1_recommender_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_recommender_v1beta1_recommender_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_recommender_v1beta1_recommender_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_recommender_v1beta1_recommender_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_recommender_v1beta1_recommender_proto #############

        set(googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_recommender_v1beta1_recommender_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_recommender_v1beta1_recommender_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_recommender_v1beta1_recommender_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_recommender_v1beta1_recommender_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_recommender_v1beta1_recommender_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_recommender_v1beta1_recommender_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_v1beta1_recommender_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_recommender_v1_recommender_cc_proto #############

        set(googleapis_googleapis_google_cloud_recommender_v1_recommender_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_recommender_v1_recommender_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_recommender_v1_recommender_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_recommender_v1_recommender_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_recommender_v1_recommender_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_recommender_v1_recommender_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_recommender_v1_recommender_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_recommender_v1_recommender_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_v1_recommender_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_v1_recommender_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_v1_recommender_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_recommender_v1_recommender_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_recommender_v1_recommender_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_recommender_v1_recommender_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_recommender_v1_recommender_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_recommender_v1_recommender_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_recommender_v1_recommender_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_recommender_v1_recommender_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_v1_recommender_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_v1_recommender_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_recommender_v1_recommender_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_recommender_v1_recommender_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_recommender_v1_recommender_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_recommender_v1_recommender_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_v1_recommender_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_recommender_v1_recommender_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_v1_recommender_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_recommender_v1_recommender_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_v1_recommender_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_recommender_v1_recommender_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_v1_recommender_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_recommender_v1_recommender_proto #############

        set(googleapis_googleapis_google_cloud_recommender_v1_recommender_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_recommender_v1_recommender_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_recommender_v1_recommender_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_recommender_v1_recommender_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_recommender_v1_recommender_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_recommender_v1_recommender_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_recommender_v1_recommender_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_recommender_v1_recommender_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_v1_recommender_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_v1_recommender_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_v1_recommender_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_recommender_v1_recommender_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_recommender_v1_recommender_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_recommender_v1_recommender_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_recommender_v1_recommender_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_recommender_v1_recommender_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_recommender_v1_recommender_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_recommender_v1_recommender_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_v1_recommender_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_v1_recommender_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_recommender_v1_recommender_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_recommender_v1_recommender_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_recommender_v1_recommender_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_recommender_v1_recommender_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_v1_recommender_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_recommender_v1_recommender_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_v1_recommender_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_recommender_v1_recommender_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_v1_recommender_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_recommender_v1_recommender_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recommender_v1_recommender_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_edgecontainer_v1_edgecontainer_cc_proto #############

        set(googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_edgecontainer_v1_edgecontainer_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_edgecontainer_v1_edgecontainer_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_edgecontainer_v1_edgecontainer_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_edgecontainer_v1_edgecontainer_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_edgecontainer_v1_edgecontainer_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_edgecontainer_v1_edgecontainer_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_edgecontainer_v1_edgecontainer_proto #############

        set(googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_edgecontainer_v1_edgecontainer_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_edgecontainer_v1_edgecontainer_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_edgecontainer_v1_edgecontainer_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_edgecontainer_v1_edgecontainer_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_edgecontainer_v1_edgecontainer_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_edgecontainer_v1_edgecontainer_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_edgecontainer_v1_edgecontainer_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_memcache_v1_memcache_cc_proto #############

        set(googleapis_googleapis_google_cloud_memcache_v1_memcache_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_memcache_v1_memcache_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_memcache_v1_memcache_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_memcache_v1_memcache_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_memcache_v1_memcache_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_memcache_v1_memcache_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_memcache_v1_memcache_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_memcache_v1_memcache_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_memcache_v1_memcache_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_memcache_v1_memcache_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_memcache_v1_memcache_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_memcache_v1_memcache_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_memcache_v1_memcache_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_memcache_v1_memcache_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_memcache_v1_memcache_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_memcache_v1_memcache_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_memcache_v1_memcache_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_memcache_v1_memcache_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_memcache_v1_memcache_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_memcache_v1_memcache_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_memcache_v1_memcache_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_memcache_v1_memcache_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_memcache_v1_memcache_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_memcache_v1_memcache_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_memcache_v1_memcache_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_memcache_v1_memcache_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_memcache_v1_memcache_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_memcache_v1_memcache_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_memcache_v1_memcache_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_memcache_v1_memcache_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_memcache_v1_memcache_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_memcache_v1_memcache_proto #############

        set(googleapis_googleapis_google_cloud_memcache_v1_memcache_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_memcache_v1_memcache_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_memcache_v1_memcache_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_memcache_v1_memcache_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_memcache_v1_memcache_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_memcache_v1_memcache_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_memcache_v1_memcache_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_memcache_v1_memcache_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_memcache_v1_memcache_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_memcache_v1_memcache_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_memcache_v1_memcache_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_memcache_v1_memcache_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_memcache_v1_memcache_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_memcache_v1_memcache_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_memcache_v1_memcache_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_memcache_v1_memcache_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_memcache_v1_memcache_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_memcache_v1_memcache_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_memcache_v1_memcache_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_memcache_v1_memcache_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_memcache_v1_memcache_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_memcache_v1_memcache_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_memcache_v1_memcache_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_memcache_v1_memcache_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_memcache_v1_memcache_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_memcache_v1_memcache_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_memcache_v1_memcache_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_memcache_v1_memcache_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_memcache_v1_memcache_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_memcache_v1_memcache_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_memcache_v1_memcache_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_channel_v1_channel_cc_proto #############

        set(googleapis_googleapis_google_cloud_channel_v1_channel_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_channel_v1_channel_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_channel_v1_channel_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_channel_v1_channel_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_channel_v1_channel_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_channel_v1_channel_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_channel_v1_channel_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_channel_v1_channel_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_channel_v1_channel_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_channel_v1_channel_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_channel_v1_channel_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_channel_v1_channel_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_channel_v1_channel_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_channel_v1_channel_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_channel_v1_channel_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_channel_v1_channel_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_channel_v1_channel_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_channel_v1_channel_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_channel_v1_channel_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_channel_v1_channel_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_channel_v1_channel_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_channel_v1_channel_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_channel_v1_channel_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_channel_v1_channel_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_channel_v1_channel_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_channel_v1_channel_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_channel_v1_channel_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_channel_v1_channel_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_channel_v1_channel_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_channel_v1_channel_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_channel_v1_channel_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_channel_v1_channel_proto #############

        set(googleapis_googleapis_google_cloud_channel_v1_channel_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_channel_v1_channel_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_channel_v1_channel_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_channel_v1_channel_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_channel_v1_channel_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_channel_v1_channel_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_channel_v1_channel_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_channel_v1_channel_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_channel_v1_channel_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_channel_v1_channel_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_channel_v1_channel_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_channel_v1_channel_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_channel_v1_channel_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_channel_v1_channel_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_channel_v1_channel_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_channel_v1_channel_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_channel_v1_channel_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_channel_v1_channel_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_channel_v1_channel_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_channel_v1_channel_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_channel_v1_channel_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_channel_v1_channel_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_channel_v1_channel_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_channel_v1_channel_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_channel_v1_channel_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_channel_v1_channel_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_channel_v1_channel_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_channel_v1_channel_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_channel_v1_channel_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_channel_v1_channel_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_channel_v1_channel_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_gkebackup_v1_gkebackup_cc_proto #############

        set(googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_gkebackup_v1_gkebackup_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_gkebackup_v1_gkebackup_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_gkebackup_v1_gkebackup_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkebackup_v1_gkebackup_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkebackup_v1_gkebackup_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkebackup_v1_gkebackup_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_gkebackup_v1_gkebackup_proto #############

        set(googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_gkebackup_v1_gkebackup_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_gkebackup_v1_gkebackup_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_gkebackup_v1_gkebackup_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkebackup_v1_gkebackup_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkebackup_v1_gkebackup_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkebackup_v1_gkebackup_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkebackup_v1_gkebackup_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_videointelligence_v1_videointelligence_cc_proto #############

        set(googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_videointelligence_v1_videointelligence_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_videointelligence_v1_videointelligence_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_videointelligence_v1_videointelligence_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_videointelligence_v1_videointelligence_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_videointelligence_v1_videointelligence_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_videointelligence_v1_videointelligence_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_videointelligence_v1_videointelligence_proto #############

        set(googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_videointelligence_v1_videointelligence_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_videointelligence_v1_videointelligence_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_videointelligence_v1_videointelligence_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_videointelligence_v1_videointelligence_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_videointelligence_v1_videointelligence_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_videointelligence_v1_videointelligence_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_videointelligence_v1_videointelligence_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_ids_v1_ids_cc_proto #############

        set(googleapis_googleapis_google_cloud_ids_v1_ids_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_ids_v1_ids_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_ids_v1_ids_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_ids_v1_ids_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_ids_v1_ids_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_ids_v1_ids_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_ids_v1_ids_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_ids_v1_ids_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_ids_v1_ids_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_ids_v1_ids_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_ids_v1_ids_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_ids_v1_ids_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_ids_v1_ids_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_ids_v1_ids_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_ids_v1_ids_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_ids_v1_ids_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_ids_v1_ids_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_ids_v1_ids_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_ids_v1_ids_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_ids_v1_ids_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_ids_v1_ids_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_ids_v1_ids_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_ids_v1_ids_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_ids_v1_ids_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_ids_v1_ids_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_ids_v1_ids_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_ids_v1_ids_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_ids_v1_ids_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_ids_v1_ids_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_ids_v1_ids_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_ids_v1_ids_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_ids_v1_ids_proto #############

        set(googleapis_googleapis_google_cloud_ids_v1_ids_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_ids_v1_ids_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_ids_v1_ids_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_ids_v1_ids_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_ids_v1_ids_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_ids_v1_ids_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_ids_v1_ids_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_ids_v1_ids_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_ids_v1_ids_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_ids_v1_ids_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_ids_v1_ids_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_ids_v1_ids_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_ids_v1_ids_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_ids_v1_ids_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_ids_v1_ids_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_ids_v1_ids_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_ids_v1_ids_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_ids_v1_ids_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_ids_v1_ids_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_ids_v1_ids_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_ids_v1_ids_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_ids_v1_ids_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_ids_v1_ids_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_ids_v1_ids_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_ids_v1_ids_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_ids_v1_ids_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_ids_v1_ids_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_ids_v1_ids_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_ids_v1_ids_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_ids_v1_ids_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_ids_v1_ids_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_speech_v2_speech_cc_proto #############

        set(googleapis_googleapis_google_cloud_speech_v2_speech_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_speech_v2_speech_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_speech_v2_speech_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_speech_v2_speech_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_speech_v2_speech_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_speech_v2_speech_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_speech_v2_speech_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_speech_v2_speech_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_speech_v2_speech_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_speech_v2_speech_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_speech_v2_speech_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_speech_v2_speech_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_speech_v2_speech_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_speech_v2_speech_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_speech_v2_speech_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_speech_v2_speech_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_speech_v2_speech_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_speech_v2_speech_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_speech_v2_speech_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_speech_v2_speech_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_speech_v2_speech_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_speech_v2_speech_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_speech_v2_speech_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_speech_v2_speech_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_speech_v2_speech_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_speech_v2_speech_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_speech_v2_speech_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_speech_v2_speech_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_speech_v2_speech_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_speech_v2_speech_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_speech_v2_speech_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_speech_v2_speech_proto #############

        set(googleapis_googleapis_google_cloud_speech_v2_speech_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_speech_v2_speech_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_speech_v2_speech_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_speech_v2_speech_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_speech_v2_speech_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_speech_v2_speech_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_speech_v2_speech_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_speech_v2_speech_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_speech_v2_speech_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_speech_v2_speech_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_speech_v2_speech_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_speech_v2_speech_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_speech_v2_speech_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_speech_v2_speech_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_speech_v2_speech_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_speech_v2_speech_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_speech_v2_speech_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_speech_v2_speech_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_speech_v2_speech_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_speech_v2_speech_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_speech_v2_speech_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_speech_v2_speech_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_speech_v2_speech_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_speech_v2_speech_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_speech_v2_speech_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_speech_v2_speech_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_speech_v2_speech_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_speech_v2_speech_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_speech_v2_speech_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_speech_v2_speech_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_speech_v2_speech_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_speech_v1_speech_cc_proto #############

        set(googleapis_googleapis_google_cloud_speech_v1_speech_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_speech_v1_speech_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_speech_v1_speech_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_speech_v1_speech_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_speech_v1_speech_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_speech_v1_speech_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_speech_v1_speech_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_speech_v1_speech_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_speech_v1_speech_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_speech_v1_speech_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_speech_v1_speech_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_speech_v1_speech_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_speech_v1_speech_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_speech_v1_speech_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_speech_v1_speech_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_speech_v1_speech_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_speech_v1_speech_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_speech_v1_speech_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_speech_v1_speech_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_speech_v1_speech_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_speech_v1_speech_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_speech_v1_speech_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_speech_v1_speech_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_speech_v1_speech_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_speech_v1_speech_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_speech_v1_speech_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_speech_v1_speech_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_speech_v1_speech_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_speech_v1_speech_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_speech_v1_speech_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_speech_v1_speech_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_speech_v1_speech_proto #############

        set(googleapis_googleapis_google_cloud_speech_v1_speech_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_speech_v1_speech_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_speech_v1_speech_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_speech_v1_speech_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_speech_v1_speech_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_speech_v1_speech_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_speech_v1_speech_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_speech_v1_speech_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_speech_v1_speech_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_speech_v1_speech_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_speech_v1_speech_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_speech_v1_speech_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_speech_v1_speech_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_speech_v1_speech_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_speech_v1_speech_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_speech_v1_speech_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_speech_v1_speech_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_speech_v1_speech_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_speech_v1_speech_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_speech_v1_speech_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_speech_v1_speech_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_speech_v1_speech_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_speech_v1_speech_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_speech_v1_speech_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_speech_v1_speech_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_speech_v1_speech_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_speech_v1_speech_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_speech_v1_speech_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_speech_v1_speech_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_speech_v1_speech_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_speech_v1_speech_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_automl_v1_automl_cc_proto #############

        set(googleapis_googleapis_google_cloud_automl_v1_automl_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_automl_v1_automl_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_automl_v1_automl_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_automl_v1_automl_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_automl_v1_automl_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_automl_v1_automl_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_automl_v1_automl_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_automl_v1_automl_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_automl_v1_automl_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_automl_v1_automl_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_automl_v1_automl_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_automl_v1_automl_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_automl_v1_automl_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_automl_v1_automl_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_automl_v1_automl_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_automl_v1_automl_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_automl_v1_automl_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_automl_v1_automl_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_automl_v1_automl_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_automl_v1_automl_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_automl_v1_automl_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_automl_v1_automl_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_automl_v1_automl_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_automl_v1_automl_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_automl_v1_automl_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_automl_v1_automl_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_automl_v1_automl_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_automl_v1_automl_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_automl_v1_automl_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_automl_v1_automl_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_automl_v1_automl_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_automl_v1_automl_proto #############

        set(googleapis_googleapis_google_cloud_automl_v1_automl_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_automl_v1_automl_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_automl_v1_automl_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_automl_v1_automl_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_automl_v1_automl_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_automl_v1_automl_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_automl_v1_automl_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_automl_v1_automl_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_automl_v1_automl_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_automl_v1_automl_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_automl_v1_automl_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_automl_v1_automl_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_automl_v1_automl_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_automl_v1_automl_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_automl_v1_automl_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_automl_v1_automl_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_automl_v1_automl_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_automl_v1_automl_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_automl_v1_automl_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_automl_v1_automl_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_automl_v1_automl_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_automl_v1_automl_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_automl_v1_automl_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_automl_v1_automl_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_automl_v1_automl_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_automl_v1_automl_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_automl_v1_automl_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_automl_v1_automl_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_automl_v1_automl_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_automl_v1_automl_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_automl_v1_automl_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_vision_v1_vision_cc_proto #############

        set(googleapis_googleapis_google_cloud_vision_v1_vision_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_vision_v1_vision_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_vision_v1_vision_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_vision_v1_vision_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_vision_v1_vision_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_vision_v1_vision_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_vision_v1_vision_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_vision_v1_vision_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vision_v1_vision_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vision_v1_vision_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vision_v1_vision_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_vision_v1_vision_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_vision_v1_vision_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_vision_v1_vision_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_vision_v1_vision_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_vision_v1_vision_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_vision_v1_vision_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_vision_v1_vision_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vision_v1_vision_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vision_v1_vision_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_vision_v1_vision_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_vision_v1_vision_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_vision_v1_vision_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_vision_v1_vision_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vision_v1_vision_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_vision_v1_vision_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vision_v1_vision_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_vision_v1_vision_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vision_v1_vision_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_vision_v1_vision_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vision_v1_vision_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_vision_v1_vision_proto #############

        set(googleapis_googleapis_google_cloud_vision_v1_vision_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_vision_v1_vision_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_vision_v1_vision_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_vision_v1_vision_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_vision_v1_vision_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_vision_v1_vision_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_vision_v1_vision_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_vision_v1_vision_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vision_v1_vision_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vision_v1_vision_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vision_v1_vision_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_vision_v1_vision_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_vision_v1_vision_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_vision_v1_vision_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_vision_v1_vision_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_vision_v1_vision_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_vision_v1_vision_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_vision_v1_vision_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vision_v1_vision_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vision_v1_vision_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_vision_v1_vision_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_vision_v1_vision_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_vision_v1_vision_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_vision_v1_vision_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vision_v1_vision_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_vision_v1_vision_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vision_v1_vision_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_vision_v1_vision_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vision_v1_vision_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_vision_v1_vision_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vision_v1_vision_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_bigquery_migration_v2_migration_cc_proto #############

        set(googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_bigquery_migration_v2_migration_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_bigquery_migration_v2_migration_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_bigquery_migration_v2_migration_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_migration_v2_migration_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_migration_v2_migration_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_migration_v2_migration_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_bigquery_migration_v2_migration_proto #############

        set(googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_bigquery_migration_v2_migration_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_bigquery_migration_v2_migration_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_bigquery_migration_v2_migration_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_migration_v2_migration_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_migration_v2_migration_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_migration_v2_migration_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_migration_v2_migration_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_bigquery_v2_bigquery_cc_proto #############

        set(googleapis_googleapis_google_cloud_bigquery_v2_bigquery_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_bigquery_v2_bigquery_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_bigquery_v2_bigquery_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_bigquery_v2_bigquery_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_bigquery_v2_bigquery_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_bigquery_v2_bigquery_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_bigquery_v2_bigquery_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_bigquery_v2_bigquery_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_v2_bigquery_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_v2_bigquery_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_v2_bigquery_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_bigquery_v2_bigquery_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_bigquery_v2_bigquery_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_bigquery_v2_bigquery_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_bigquery_v2_bigquery_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_bigquery_v2_bigquery_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_bigquery_v2_bigquery_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_bigquery_v2_bigquery_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_v2_bigquery_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_v2_bigquery_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_bigquery_v2_bigquery_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_bigquery_v2_bigquery_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_bigquery_v2_bigquery_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_bigquery_v2_bigquery_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_v2_bigquery_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_v2_bigquery_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_v2_bigquery_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_v2_bigquery_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_v2_bigquery_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_v2_bigquery_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_v2_bigquery_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_bigquery_v2_bigquery_proto #############

        set(googleapis_googleapis_google_cloud_bigquery_v2_bigquery_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_bigquery_v2_bigquery_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_bigquery_v2_bigquery_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_bigquery_v2_bigquery_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_bigquery_v2_bigquery_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_bigquery_v2_bigquery_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_bigquery_v2_bigquery_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_bigquery_v2_bigquery_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_v2_bigquery_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_v2_bigquery_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_v2_bigquery_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_bigquery_v2_bigquery_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_bigquery_v2_bigquery_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_bigquery_v2_bigquery_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_bigquery_v2_bigquery_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_bigquery_v2_bigquery_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_bigquery_v2_bigquery_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_bigquery_v2_bigquery_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_v2_bigquery_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_v2_bigquery_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_bigquery_v2_bigquery_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_bigquery_v2_bigquery_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_bigquery_v2_bigquery_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_bigquery_v2_bigquery_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_v2_bigquery_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_v2_bigquery_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_v2_bigquery_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_v2_bigquery_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_v2_bigquery_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_v2_bigquery_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_v2_bigquery_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_bigquery_datatransfer_v1_datatransfer_cc_proto #############

        set(googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_bigquery_datatransfer_v1_datatransfer_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_bigquery_datatransfer_v1_datatransfer_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_bigquery_datatransfer_v1_datatransfer_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_datatransfer_v1_datatransfer_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_datatransfer_v1_datatransfer_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_datatransfer_v1_datatransfer_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_bigquery_datatransfer_v1_datatransfer_proto #############

        set(googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_bigquery_datatransfer_v1_datatransfer_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_bigquery_datatransfer_v1_datatransfer_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_bigquery_datatransfer_v1_datatransfer_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_datatransfer_v1_datatransfer_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_datatransfer_v1_datatransfer_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_datatransfer_v1_datatransfer_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_datatransfer_v1_datatransfer_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_bigquery_storage_v1beta1_storage_cc_proto #############

        set(googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_bigquery_storage_v1beta1_storage_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_bigquery_storage_v1beta1_storage_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_bigquery_storage_v1beta1_storage_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_storage_v1beta1_storage_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_storage_v1beta1_storage_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_storage_v1beta1_storage_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_bigquery_storage_v1beta1_storage_proto #############

        set(googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_bigquery_storage_v1beta1_storage_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_bigquery_storage_v1beta1_storage_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_bigquery_storage_v1beta1_storage_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_storage_v1beta1_storage_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_storage_v1beta1_storage_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_storage_v1beta1_storage_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1beta1_storage_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_bigquery_storage_v1beta2_storage_cc_proto #############

        set(googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_bigquery_storage_v1beta2_storage_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_bigquery_storage_v1beta2_storage_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_bigquery_storage_v1beta2_storage_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_storage_v1beta2_storage_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_storage_v1beta2_storage_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_storage_v1beta2_storage_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_bigquery_storage_v1beta2_storage_proto #############

        set(googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_bigquery_storage_v1beta2_storage_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_bigquery_storage_v1beta2_storage_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_bigquery_storage_v1beta2_storage_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_storage_v1beta2_storage_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_storage_v1beta2_storage_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_storage_v1beta2_storage_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1beta2_storage_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_bigquery_storage_v1_storage_cc_proto #############

        set(googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_bigquery_storage_v1_storage_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_bigquery_storage_v1_storage_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_bigquery_storage_v1_storage_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_storage_v1_storage_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_storage_v1_storage_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_storage_v1_storage_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_bigquery_storage_v1_storage_proto #############

        set(googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_bigquery_storage_v1_storage_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_bigquery_storage_v1_storage_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_bigquery_storage_v1_storage_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_storage_v1_storage_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_storage_v1_storage_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_storage_v1_storage_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_storage_v1_storage_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_bigquery_reservation_v1_reservation_cc_proto #############

        set(googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_bigquery_reservation_v1_reservation_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_bigquery_reservation_v1_reservation_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_bigquery_reservation_v1_reservation_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_reservation_v1_reservation_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_reservation_v1_reservation_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_reservation_v1_reservation_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_bigquery_reservation_v1_reservation_proto #############

        set(googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_bigquery_reservation_v1_reservation_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_bigquery_reservation_v1_reservation_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_bigquery_reservation_v1_reservation_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_reservation_v1_reservation_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_reservation_v1_reservation_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_bigquery_reservation_v1_reservation_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_bigquery_reservation_v1_reservation_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_retail_v2alpha_retail_cc_proto #############

        set(googleapis_googleapis_google_cloud_retail_v2alpha_retail_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_retail_v2alpha_retail_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_retail_v2alpha_retail_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_retail_v2alpha_retail_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_retail_v2alpha_retail_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_retail_v2alpha_retail_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_retail_v2alpha_retail_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_retail_v2alpha_retail_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2alpha_retail_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2alpha_retail_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2alpha_retail_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_retail_v2alpha_retail_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_retail_v2alpha_retail_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_retail_v2alpha_retail_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_retail_v2alpha_retail_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_retail_v2alpha_retail_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_retail_v2alpha_retail_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_retail_v2alpha_retail_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2alpha_retail_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2alpha_retail_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_retail_v2alpha_retail_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_retail_v2alpha_retail_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_retail_v2alpha_retail_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_retail_v2alpha_retail_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2alpha_retail_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_retail_v2alpha_retail_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2alpha_retail_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_retail_v2alpha_retail_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2alpha_retail_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_retail_v2alpha_retail_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2alpha_retail_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_retail_v2alpha_retail_proto #############

        set(googleapis_googleapis_google_cloud_retail_v2alpha_retail_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_retail_v2alpha_retail_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_retail_v2alpha_retail_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_retail_v2alpha_retail_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_retail_v2alpha_retail_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_retail_v2alpha_retail_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_retail_v2alpha_retail_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_retail_v2alpha_retail_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2alpha_retail_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2alpha_retail_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2alpha_retail_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_retail_v2alpha_retail_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_retail_v2alpha_retail_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_retail_v2alpha_retail_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_retail_v2alpha_retail_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_retail_v2alpha_retail_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_retail_v2alpha_retail_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_retail_v2alpha_retail_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2alpha_retail_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2alpha_retail_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_retail_v2alpha_retail_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_retail_v2alpha_retail_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_retail_v2alpha_retail_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_retail_v2alpha_retail_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2alpha_retail_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_retail_v2alpha_retail_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2alpha_retail_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_retail_v2alpha_retail_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2alpha_retail_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_retail_v2alpha_retail_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2alpha_retail_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_retail_v2_retail_cc_proto #############

        set(googleapis_googleapis_google_cloud_retail_v2_retail_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_retail_v2_retail_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_retail_v2_retail_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_retail_v2_retail_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_retail_v2_retail_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_retail_v2_retail_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_retail_v2_retail_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_retail_v2_retail_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2_retail_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2_retail_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2_retail_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_retail_v2_retail_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_retail_v2_retail_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_retail_v2_retail_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_retail_v2_retail_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_retail_v2_retail_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_retail_v2_retail_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_retail_v2_retail_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2_retail_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2_retail_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_retail_v2_retail_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_retail_v2_retail_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_retail_v2_retail_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_retail_v2_retail_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2_retail_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_retail_v2_retail_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2_retail_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_retail_v2_retail_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2_retail_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_retail_v2_retail_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2_retail_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_retail_v2_retail_proto #############

        set(googleapis_googleapis_google_cloud_retail_v2_retail_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_retail_v2_retail_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_retail_v2_retail_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_retail_v2_retail_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_retail_v2_retail_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_retail_v2_retail_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_retail_v2_retail_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_retail_v2_retail_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2_retail_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2_retail_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2_retail_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_retail_v2_retail_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_retail_v2_retail_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_retail_v2_retail_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_retail_v2_retail_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_retail_v2_retail_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_retail_v2_retail_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_retail_v2_retail_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2_retail_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2_retail_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_retail_v2_retail_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_retail_v2_retail_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_retail_v2_retail_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_retail_v2_retail_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2_retail_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_retail_v2_retail_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2_retail_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_retail_v2_retail_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2_retail_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_retail_v2_retail_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2_retail_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_retail_v2beta_retail_cc_proto #############

        set(googleapis_googleapis_google_cloud_retail_v2beta_retail_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_retail_v2beta_retail_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_retail_v2beta_retail_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_retail_v2beta_retail_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_retail_v2beta_retail_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_retail_v2beta_retail_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_retail_v2beta_retail_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_retail_v2beta_retail_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2beta_retail_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2beta_retail_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2beta_retail_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_retail_v2beta_retail_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_retail_v2beta_retail_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_retail_v2beta_retail_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_retail_v2beta_retail_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_retail_v2beta_retail_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_retail_v2beta_retail_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_retail_v2beta_retail_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2beta_retail_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2beta_retail_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_retail_v2beta_retail_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_retail_v2beta_retail_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_retail_v2beta_retail_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_retail_v2beta_retail_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2beta_retail_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_retail_v2beta_retail_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2beta_retail_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_retail_v2beta_retail_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2beta_retail_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_retail_v2beta_retail_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2beta_retail_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_retail_v2beta_retail_proto #############

        set(googleapis_googleapis_google_cloud_retail_v2beta_retail_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_retail_v2beta_retail_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_retail_v2beta_retail_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_retail_v2beta_retail_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_retail_v2beta_retail_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_retail_v2beta_retail_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_retail_v2beta_retail_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_retail_v2beta_retail_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2beta_retail_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2beta_retail_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2beta_retail_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_retail_v2beta_retail_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_retail_v2beta_retail_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_retail_v2beta_retail_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_retail_v2beta_retail_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_retail_v2beta_retail_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_retail_v2beta_retail_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_retail_v2beta_retail_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2beta_retail_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2beta_retail_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_retail_v2beta_retail_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_retail_v2beta_retail_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_retail_v2beta_retail_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_retail_v2beta_retail_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2beta_retail_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_retail_v2beta_retail_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2beta_retail_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_retail_v2beta_retail_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2beta_retail_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_retail_v2beta_retail_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_retail_v2beta_retail_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_language_v1beta2_language_cc_proto #############

        set(googleapis_googleapis_google_cloud_language_v1beta2_language_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_language_v1beta2_language_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_language_v1beta2_language_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_language_v1beta2_language_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_language_v1beta2_language_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_language_v1beta2_language_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_language_v1beta2_language_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_language_v1beta2_language_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_language_v1beta2_language_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_language_v1beta2_language_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_language_v1beta2_language_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_language_v1beta2_language_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_language_v1beta2_language_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_language_v1beta2_language_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_language_v1beta2_language_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_language_v1beta2_language_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_language_v1beta2_language_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_language_v1beta2_language_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_language_v1beta2_language_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_language_v1beta2_language_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_language_v1beta2_language_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_language_v1beta2_language_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_language_v1beta2_language_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_language_v1beta2_language_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_language_v1beta2_language_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_language_v1beta2_language_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_language_v1beta2_language_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_language_v1beta2_language_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_language_v1beta2_language_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_language_v1beta2_language_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_language_v1beta2_language_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_language_v1beta2_language_proto #############

        set(googleapis_googleapis_google_cloud_language_v1beta2_language_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_language_v1beta2_language_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_language_v1beta2_language_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_language_v1beta2_language_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_language_v1beta2_language_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_language_v1beta2_language_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_language_v1beta2_language_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_language_v1beta2_language_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_language_v1beta2_language_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_language_v1beta2_language_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_language_v1beta2_language_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_language_v1beta2_language_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_language_v1beta2_language_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_language_v1beta2_language_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_language_v1beta2_language_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_language_v1beta2_language_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_language_v1beta2_language_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_language_v1beta2_language_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_language_v1beta2_language_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_language_v1beta2_language_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_language_v1beta2_language_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_language_v1beta2_language_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_language_v1beta2_language_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_language_v1beta2_language_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_language_v1beta2_language_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_language_v1beta2_language_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_language_v1beta2_language_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_language_v1beta2_language_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_language_v1beta2_language_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_language_v1beta2_language_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_language_v1beta2_language_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_language_v1_language_cc_proto #############

        set(googleapis_googleapis_google_cloud_language_v1_language_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_language_v1_language_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_language_v1_language_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_language_v1_language_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_language_v1_language_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_language_v1_language_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_language_v1_language_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_language_v1_language_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_language_v1_language_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_language_v1_language_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_language_v1_language_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_language_v1_language_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_language_v1_language_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_language_v1_language_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_language_v1_language_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_language_v1_language_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_language_v1_language_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_language_v1_language_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_language_v1_language_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_language_v1_language_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_language_v1_language_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_language_v1_language_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_language_v1_language_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_language_v1_language_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_language_v1_language_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_language_v1_language_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_language_v1_language_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_language_v1_language_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_language_v1_language_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_language_v1_language_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_language_v1_language_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_language_v1_language_proto #############

        set(googleapis_googleapis_google_cloud_language_v1_language_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_language_v1_language_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_language_v1_language_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_language_v1_language_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_language_v1_language_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_language_v1_language_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_language_v1_language_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_language_v1_language_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_language_v1_language_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_language_v1_language_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_language_v1_language_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_language_v1_language_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_language_v1_language_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_language_v1_language_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_language_v1_language_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_language_v1_language_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_language_v1_language_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_language_v1_language_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_language_v1_language_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_language_v1_language_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_language_v1_language_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_language_v1_language_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_language_v1_language_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_language_v1_language_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_language_v1_language_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_language_v1_language_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_language_v1_language_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_language_v1_language_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_language_v1_language_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_language_v1_language_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_language_v1_language_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_scheduler_v1_scheduler_cc_proto #############

        set(googleapis_googleapis_google_cloud_scheduler_v1_scheduler_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_scheduler_v1_scheduler_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_scheduler_v1_scheduler_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_scheduler_v1_scheduler_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_scheduler_v1_scheduler_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_scheduler_v1_scheduler_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_scheduler_v1_scheduler_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_scheduler_v1_scheduler_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_scheduler_v1_scheduler_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_scheduler_v1_scheduler_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_scheduler_v1_scheduler_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_scheduler_v1_scheduler_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_scheduler_v1_scheduler_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_scheduler_v1_scheduler_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_scheduler_v1_scheduler_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_scheduler_v1_scheduler_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_scheduler_v1_scheduler_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_scheduler_v1_scheduler_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_scheduler_v1_scheduler_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_scheduler_v1_scheduler_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_scheduler_v1_scheduler_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_scheduler_v1_scheduler_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_scheduler_v1_scheduler_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_scheduler_v1_scheduler_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_scheduler_v1_scheduler_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_scheduler_v1_scheduler_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_scheduler_v1_scheduler_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_scheduler_v1_scheduler_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_scheduler_v1_scheduler_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_scheduler_v1_scheduler_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_scheduler_v1_scheduler_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_scheduler_v1_scheduler_proto #############

        set(googleapis_googleapis_google_cloud_scheduler_v1_scheduler_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_scheduler_v1_scheduler_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_scheduler_v1_scheduler_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_scheduler_v1_scheduler_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_scheduler_v1_scheduler_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_scheduler_v1_scheduler_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_scheduler_v1_scheduler_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_scheduler_v1_scheduler_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_scheduler_v1_scheduler_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_scheduler_v1_scheduler_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_scheduler_v1_scheduler_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_scheduler_v1_scheduler_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_scheduler_v1_scheduler_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_scheduler_v1_scheduler_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_scheduler_v1_scheduler_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_scheduler_v1_scheduler_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_scheduler_v1_scheduler_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_scheduler_v1_scheduler_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_scheduler_v1_scheduler_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_scheduler_v1_scheduler_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_scheduler_v1_scheduler_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_scheduler_v1_scheduler_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_scheduler_v1_scheduler_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_scheduler_v1_scheduler_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_scheduler_v1_scheduler_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_scheduler_v1_scheduler_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_scheduler_v1_scheduler_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_scheduler_v1_scheduler_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_scheduler_v1_scheduler_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_scheduler_v1_scheduler_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_scheduler_v1_scheduler_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_workflows_executions_v1_executions_cc_proto #############

        set(googleapis_googleapis_google_cloud_workflows_executions_v1_executions_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_workflows_executions_v1_executions_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_workflows_executions_v1_executions_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_workflows_executions_v1_executions_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_workflows_executions_v1_executions_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_workflows_executions_v1_executions_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_workflows_executions_v1_executions_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_workflows_executions_v1_executions_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_executions_v1_executions_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_executions_v1_executions_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_executions_v1_executions_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_workflows_executions_v1_executions_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_workflows_executions_v1_executions_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_workflows_executions_v1_executions_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_workflows_executions_v1_executions_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_workflows_executions_v1_executions_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_workflows_executions_v1_executions_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_workflows_executions_v1_executions_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_executions_v1_executions_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_executions_v1_executions_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_workflows_executions_v1_executions_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_workflows_executions_v1_executions_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_workflows_executions_v1_executions_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_workflows_executions_v1_executions_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_executions_v1_executions_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_workflows_executions_v1_executions_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_executions_v1_executions_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_workflows_executions_v1_executions_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_executions_v1_executions_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_workflows_executions_v1_executions_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_executions_v1_executions_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_workflows_executions_v1_executions_proto #############

        set(googleapis_googleapis_google_cloud_workflows_executions_v1_executions_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_workflows_executions_v1_executions_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_workflows_executions_v1_executions_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_workflows_executions_v1_executions_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_workflows_executions_v1_executions_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_workflows_executions_v1_executions_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_workflows_executions_v1_executions_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_workflows_executions_v1_executions_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_executions_v1_executions_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_executions_v1_executions_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_executions_v1_executions_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_workflows_executions_v1_executions_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_workflows_executions_v1_executions_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_workflows_executions_v1_executions_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_workflows_executions_v1_executions_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_workflows_executions_v1_executions_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_workflows_executions_v1_executions_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_workflows_executions_v1_executions_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_executions_v1_executions_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_executions_v1_executions_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_workflows_executions_v1_executions_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_workflows_executions_v1_executions_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_workflows_executions_v1_executions_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_workflows_executions_v1_executions_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_executions_v1_executions_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_workflows_executions_v1_executions_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_executions_v1_executions_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_workflows_executions_v1_executions_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_executions_v1_executions_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_workflows_executions_v1_executions_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_executions_v1_executions_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_workflows_v1_workflows_cc_proto #############

        set(googleapis_googleapis_google_cloud_workflows_v1_workflows_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_workflows_v1_workflows_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_workflows_v1_workflows_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_workflows_v1_workflows_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_workflows_v1_workflows_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_workflows_v1_workflows_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_workflows_v1_workflows_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_workflows_v1_workflows_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_v1_workflows_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_v1_workflows_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_v1_workflows_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_workflows_v1_workflows_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_workflows_v1_workflows_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_workflows_v1_workflows_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_workflows_v1_workflows_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_workflows_v1_workflows_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_workflows_v1_workflows_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_workflows_v1_workflows_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_v1_workflows_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_v1_workflows_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_workflows_v1_workflows_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_workflows_v1_workflows_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_workflows_v1_workflows_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_workflows_v1_workflows_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_v1_workflows_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_workflows_v1_workflows_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_v1_workflows_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_workflows_v1_workflows_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_v1_workflows_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_workflows_v1_workflows_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_v1_workflows_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_workflows_v1_workflows_proto #############

        set(googleapis_googleapis_google_cloud_workflows_v1_workflows_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_workflows_v1_workflows_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_workflows_v1_workflows_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_workflows_v1_workflows_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_workflows_v1_workflows_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_workflows_v1_workflows_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_workflows_v1_workflows_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_workflows_v1_workflows_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_v1_workflows_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_v1_workflows_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_v1_workflows_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_workflows_v1_workflows_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_workflows_v1_workflows_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_workflows_v1_workflows_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_workflows_v1_workflows_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_workflows_v1_workflows_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_workflows_v1_workflows_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_workflows_v1_workflows_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_v1_workflows_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_v1_workflows_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_workflows_v1_workflows_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_workflows_v1_workflows_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_workflows_v1_workflows_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_workflows_v1_workflows_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_v1_workflows_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_workflows_v1_workflows_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_v1_workflows_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_workflows_v1_workflows_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_v1_workflows_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_workflows_v1_workflows_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_v1_workflows_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_vmmigration_v1_vmmigration_cc_proto #############

        set(googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_vmmigration_v1_vmmigration_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_vmmigration_v1_vmmigration_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_vmmigration_v1_vmmigration_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_vmmigration_v1_vmmigration_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_vmmigration_v1_vmmigration_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_vmmigration_v1_vmmigration_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_vmmigration_v1_vmmigration_proto #############

        set(googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_vmmigration_v1_vmmigration_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_vmmigration_v1_vmmigration_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_vmmigration_v1_vmmigration_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_vmmigration_v1_vmmigration_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_vmmigration_v1_vmmigration_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_vmmigration_v1_vmmigration_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vmmigration_v1_vmmigration_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_datafusion_v1_datafusion_cc_proto #############

        set(googleapis_googleapis_google_cloud_datafusion_v1_datafusion_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_datafusion_v1_datafusion_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_datafusion_v1_datafusion_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_datafusion_v1_datafusion_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_datafusion_v1_datafusion_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_datafusion_v1_datafusion_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_datafusion_v1_datafusion_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_datafusion_v1_datafusion_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datafusion_v1_datafusion_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datafusion_v1_datafusion_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datafusion_v1_datafusion_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_datafusion_v1_datafusion_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_datafusion_v1_datafusion_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_datafusion_v1_datafusion_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_datafusion_v1_datafusion_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_datafusion_v1_datafusion_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_datafusion_v1_datafusion_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_datafusion_v1_datafusion_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datafusion_v1_datafusion_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datafusion_v1_datafusion_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_datafusion_v1_datafusion_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_datafusion_v1_datafusion_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_datafusion_v1_datafusion_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_datafusion_v1_datafusion_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datafusion_v1_datafusion_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_datafusion_v1_datafusion_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datafusion_v1_datafusion_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_datafusion_v1_datafusion_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datafusion_v1_datafusion_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_datafusion_v1_datafusion_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datafusion_v1_datafusion_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_datafusion_v1_datafusion_proto #############

        set(googleapis_googleapis_google_cloud_datafusion_v1_datafusion_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_datafusion_v1_datafusion_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_datafusion_v1_datafusion_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_datafusion_v1_datafusion_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_datafusion_v1_datafusion_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_datafusion_v1_datafusion_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_datafusion_v1_datafusion_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_datafusion_v1_datafusion_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datafusion_v1_datafusion_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datafusion_v1_datafusion_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datafusion_v1_datafusion_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_datafusion_v1_datafusion_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_datafusion_v1_datafusion_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_datafusion_v1_datafusion_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_datafusion_v1_datafusion_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_datafusion_v1_datafusion_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_datafusion_v1_datafusion_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_datafusion_v1_datafusion_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datafusion_v1_datafusion_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datafusion_v1_datafusion_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_datafusion_v1_datafusion_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_datafusion_v1_datafusion_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_datafusion_v1_datafusion_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_datafusion_v1_datafusion_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datafusion_v1_datafusion_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_datafusion_v1_datafusion_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datafusion_v1_datafusion_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_datafusion_v1_datafusion_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datafusion_v1_datafusion_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_datafusion_v1_datafusion_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datafusion_v1_datafusion_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_filestore_v1_filestore_cc_proto #############

        set(googleapis_googleapis_google_cloud_filestore_v1_filestore_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_filestore_v1_filestore_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_filestore_v1_filestore_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_filestore_v1_filestore_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_filestore_v1_filestore_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_filestore_v1_filestore_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_filestore_v1_filestore_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_filestore_v1_filestore_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_filestore_v1_filestore_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_filestore_v1_filestore_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_filestore_v1_filestore_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_filestore_v1_filestore_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_filestore_v1_filestore_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_filestore_v1_filestore_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_filestore_v1_filestore_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_filestore_v1_filestore_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_filestore_v1_filestore_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_filestore_v1_filestore_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_filestore_v1_filestore_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_filestore_v1_filestore_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_filestore_v1_filestore_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_filestore_v1_filestore_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_filestore_v1_filestore_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_filestore_v1_filestore_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_filestore_v1_filestore_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_filestore_v1_filestore_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_filestore_v1_filestore_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_filestore_v1_filestore_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_filestore_v1_filestore_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_filestore_v1_filestore_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_filestore_v1_filestore_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_filestore_v1_filestore_proto #############

        set(googleapis_googleapis_google_cloud_filestore_v1_filestore_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_filestore_v1_filestore_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_filestore_v1_filestore_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_filestore_v1_filestore_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_filestore_v1_filestore_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_filestore_v1_filestore_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_filestore_v1_filestore_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_filestore_v1_filestore_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_filestore_v1_filestore_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_filestore_v1_filestore_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_filestore_v1_filestore_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_filestore_v1_filestore_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_filestore_v1_filestore_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_filestore_v1_filestore_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_filestore_v1_filestore_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_filestore_v1_filestore_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_filestore_v1_filestore_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_filestore_v1_filestore_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_filestore_v1_filestore_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_filestore_v1_filestore_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_filestore_v1_filestore_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_filestore_v1_filestore_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_filestore_v1_filestore_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_filestore_v1_filestore_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_filestore_v1_filestore_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_filestore_v1_filestore_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_filestore_v1_filestore_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_filestore_v1_filestore_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_filestore_v1_filestore_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_filestore_v1_filestore_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_filestore_v1_filestore_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_contactcenterinsights_v1_contactcenterinsights_cc_proto #############

        set(googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_contactcenterinsights_v1_contactcenterinsights_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_contactcenterinsights_v1_contactcenterinsights_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_contactcenterinsights_v1_contactcenterinsights_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_contactcenterinsights_v1_contactcenterinsights_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_contactcenterinsights_v1_contactcenterinsights_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_contactcenterinsights_v1_contactcenterinsights_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_contactcenterinsights_v1_contactcenterinsights_proto #############

        set(googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_contactcenterinsights_v1_contactcenterinsights_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_contactcenterinsights_v1_contactcenterinsights_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_contactcenterinsights_v1_contactcenterinsights_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_contactcenterinsights_v1_contactcenterinsights_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_contactcenterinsights_v1_contactcenterinsights_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_contactcenterinsights_v1_contactcenterinsights_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_contactcenterinsights_v1_contactcenterinsights_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_recaptchaenterprise_v1_recaptchaenterprise_cc_proto #############

        set(googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_recaptchaenterprise_v1_recaptchaenterprise_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_recaptchaenterprise_v1_recaptchaenterprise_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_recaptchaenterprise_v1_recaptchaenterprise_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_recaptchaenterprise_v1_recaptchaenterprise_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_recaptchaenterprise_v1_recaptchaenterprise_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_recaptchaenterprise_v1_recaptchaenterprise_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_recaptchaenterprise_v1_recaptchaenterprise_proto #############

        set(googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_recaptchaenterprise_v1_recaptchaenterprise_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_recaptchaenterprise_v1_recaptchaenterprise_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_recaptchaenterprise_v1_recaptchaenterprise_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_recaptchaenterprise_v1_recaptchaenterprise_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_recaptchaenterprise_v1_recaptchaenterprise_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_recaptchaenterprise_v1_recaptchaenterprise_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_recaptchaenterprise_v1_recaptchaenterprise_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_optimization_v1_optimization_cc_proto #############

        set(googleapis_googleapis_google_cloud_optimization_v1_optimization_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_optimization_v1_optimization_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_optimization_v1_optimization_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_optimization_v1_optimization_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_optimization_v1_optimization_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_optimization_v1_optimization_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_optimization_v1_optimization_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_optimization_v1_optimization_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_optimization_v1_optimization_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_optimization_v1_optimization_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_optimization_v1_optimization_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_optimization_v1_optimization_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_optimization_v1_optimization_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_optimization_v1_optimization_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_optimization_v1_optimization_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_optimization_v1_optimization_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_optimization_v1_optimization_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_optimization_v1_optimization_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_optimization_v1_optimization_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_optimization_v1_optimization_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_optimization_v1_optimization_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_optimization_v1_optimization_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_optimization_v1_optimization_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_optimization_v1_optimization_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_optimization_v1_optimization_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_optimization_v1_optimization_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_optimization_v1_optimization_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_optimization_v1_optimization_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_optimization_v1_optimization_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_optimization_v1_optimization_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_optimization_v1_optimization_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_optimization_v1_optimization_proto #############

        set(googleapis_googleapis_google_cloud_optimization_v1_optimization_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_optimization_v1_optimization_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_optimization_v1_optimization_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_optimization_v1_optimization_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_optimization_v1_optimization_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_optimization_v1_optimization_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_optimization_v1_optimization_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_optimization_v1_optimization_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_optimization_v1_optimization_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_optimization_v1_optimization_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_optimization_v1_optimization_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_optimization_v1_optimization_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_optimization_v1_optimization_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_optimization_v1_optimization_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_optimization_v1_optimization_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_optimization_v1_optimization_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_optimization_v1_optimization_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_optimization_v1_optimization_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_optimization_v1_optimization_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_optimization_v1_optimization_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_optimization_v1_optimization_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_optimization_v1_optimization_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_optimization_v1_optimization_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_optimization_v1_optimization_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_optimization_v1_optimization_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_optimization_v1_optimization_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_optimization_v1_optimization_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_optimization_v1_optimization_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_optimization_v1_optimization_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_optimization_v1_optimization_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_optimization_v1_optimization_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_websecurityscanner_v1_websecurityscanner_cc_proto #############

        set(googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_websecurityscanner_v1_websecurityscanner_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_websecurityscanner_v1_websecurityscanner_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_websecurityscanner_v1_websecurityscanner_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_websecurityscanner_v1_websecurityscanner_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_websecurityscanner_v1_websecurityscanner_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_websecurityscanner_v1_websecurityscanner_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_websecurityscanner_v1_websecurityscanner_proto #############

        set(googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_websecurityscanner_v1_websecurityscanner_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_websecurityscanner_v1_websecurityscanner_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_websecurityscanner_v1_websecurityscanner_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_websecurityscanner_v1_websecurityscanner_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_websecurityscanner_v1_websecurityscanner_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_websecurityscanner_v1_websecurityscanner_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_websecurityscanner_v1_websecurityscanner_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_location_location_cc_proto #############

        set(googleapis_googleapis_google_cloud_location_location_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_location_location_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_location_location_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_location_location_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_location_location_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_location_location_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_location_location_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_location_location_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_location_location_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_location_location_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_location_location_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_location_location_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_location_location_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_location_location_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_location_location_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_location_location_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_location_location_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_location_location_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_location_location_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_location_location_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_location_location_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_location_location_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_location_location_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_location_location_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_location_location_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_location_location_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_location_location_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_location_location_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_location_location_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_location_location_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_location_location_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_location_location_proto #############

        set(googleapis_googleapis_google_cloud_location_location_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_location_location_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_location_location_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_location_location_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_location_location_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_location_location_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_location_location_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_location_location_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_location_location_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_location_location_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_location_location_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_location_location_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_location_location_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_location_location_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_location_location_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_location_location_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_location_location_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_location_location_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_location_location_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_location_location_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_location_location_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_location_location_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_location_location_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_location_location_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_location_location_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_location_location_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_location_location_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_location_location_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_location_location_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_location_location_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_location_location_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_deploy_v1_deploy_cc_proto #############

        set(googleapis_googleapis_google_cloud_deploy_v1_deploy_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_deploy_v1_deploy_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_deploy_v1_deploy_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_deploy_v1_deploy_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_deploy_v1_deploy_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_deploy_v1_deploy_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_deploy_v1_deploy_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_deploy_v1_deploy_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_deploy_v1_deploy_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_deploy_v1_deploy_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_deploy_v1_deploy_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_deploy_v1_deploy_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_deploy_v1_deploy_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_deploy_v1_deploy_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_deploy_v1_deploy_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_deploy_v1_deploy_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_deploy_v1_deploy_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_deploy_v1_deploy_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_deploy_v1_deploy_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_deploy_v1_deploy_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_deploy_v1_deploy_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_deploy_v1_deploy_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_deploy_v1_deploy_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_deploy_v1_deploy_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_deploy_v1_deploy_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_deploy_v1_deploy_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_deploy_v1_deploy_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_deploy_v1_deploy_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_deploy_v1_deploy_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_deploy_v1_deploy_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_deploy_v1_deploy_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_deploy_v1_deploy_proto #############

        set(googleapis_googleapis_google_cloud_deploy_v1_deploy_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_deploy_v1_deploy_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_deploy_v1_deploy_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_deploy_v1_deploy_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_deploy_v1_deploy_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_deploy_v1_deploy_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_deploy_v1_deploy_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_deploy_v1_deploy_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_deploy_v1_deploy_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_deploy_v1_deploy_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_deploy_v1_deploy_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_deploy_v1_deploy_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_deploy_v1_deploy_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_deploy_v1_deploy_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_deploy_v1_deploy_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_deploy_v1_deploy_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_deploy_v1_deploy_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_deploy_v1_deploy_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_deploy_v1_deploy_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_deploy_v1_deploy_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_deploy_v1_deploy_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_deploy_v1_deploy_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_deploy_v1_deploy_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_deploy_v1_deploy_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_deploy_v1_deploy_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_deploy_v1_deploy_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_deploy_v1_deploy_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_deploy_v1_deploy_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_deploy_v1_deploy_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_deploy_v1_deploy_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_deploy_v1_deploy_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_accessapproval_v1_accessapproval_cc_proto #############

        set(googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_accessapproval_v1_accessapproval_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_accessapproval_v1_accessapproval_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_accessapproval_v1_accessapproval_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_accessapproval_v1_accessapproval_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_accessapproval_v1_accessapproval_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_accessapproval_v1_accessapproval_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_accessapproval_v1_accessapproval_proto #############

        set(googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_accessapproval_v1_accessapproval_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_accessapproval_v1_accessapproval_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_accessapproval_v1_accessapproval_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_accessapproval_v1_accessapproval_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_accessapproval_v1_accessapproval_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_accessapproval_v1_accessapproval_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_accessapproval_v1_accessapproval_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_shell_v1_shell_cc_proto #############

        set(googleapis_googleapis_google_cloud_shell_v1_shell_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_shell_v1_shell_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_shell_v1_shell_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_shell_v1_shell_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_shell_v1_shell_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_shell_v1_shell_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_shell_v1_shell_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_shell_v1_shell_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_shell_v1_shell_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_shell_v1_shell_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_shell_v1_shell_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_shell_v1_shell_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_shell_v1_shell_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_shell_v1_shell_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_shell_v1_shell_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_shell_v1_shell_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_shell_v1_shell_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_shell_v1_shell_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_shell_v1_shell_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_shell_v1_shell_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_shell_v1_shell_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_shell_v1_shell_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_shell_v1_shell_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_shell_v1_shell_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_shell_v1_shell_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_shell_v1_shell_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_shell_v1_shell_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_shell_v1_shell_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_shell_v1_shell_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_shell_v1_shell_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_shell_v1_shell_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_shell_v1_shell_proto #############

        set(googleapis_googleapis_google_cloud_shell_v1_shell_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_shell_v1_shell_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_shell_v1_shell_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_shell_v1_shell_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_shell_v1_shell_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_shell_v1_shell_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_shell_v1_shell_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_shell_v1_shell_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_shell_v1_shell_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_shell_v1_shell_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_shell_v1_shell_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_shell_v1_shell_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_shell_v1_shell_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_shell_v1_shell_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_shell_v1_shell_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_shell_v1_shell_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_shell_v1_shell_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_shell_v1_shell_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_shell_v1_shell_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_shell_v1_shell_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_shell_v1_shell_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_shell_v1_shell_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_shell_v1_shell_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_shell_v1_shell_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_shell_v1_shell_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_shell_v1_shell_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_shell_v1_shell_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_shell_v1_shell_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_shell_v1_shell_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_shell_v1_shell_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_shell_v1_shell_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_redis_v1beta1_redis_cc_proto #############

        set(googleapis_googleapis_google_cloud_redis_v1beta1_redis_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_redis_v1beta1_redis_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_redis_v1beta1_redis_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_redis_v1beta1_redis_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_redis_v1beta1_redis_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_redis_v1beta1_redis_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_redis_v1beta1_redis_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_redis_v1beta1_redis_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_redis_v1beta1_redis_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_redis_v1beta1_redis_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_redis_v1beta1_redis_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_redis_v1beta1_redis_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_redis_v1beta1_redis_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_redis_v1beta1_redis_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_redis_v1beta1_redis_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_redis_v1beta1_redis_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_redis_v1beta1_redis_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_redis_v1beta1_redis_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_redis_v1beta1_redis_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_redis_v1beta1_redis_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_redis_v1beta1_redis_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_redis_v1beta1_redis_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_redis_v1beta1_redis_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_redis_v1beta1_redis_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_redis_v1beta1_redis_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_redis_v1beta1_redis_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_redis_v1beta1_redis_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_redis_v1beta1_redis_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_redis_v1beta1_redis_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_redis_v1beta1_redis_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_redis_v1beta1_redis_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_redis_v1beta1_redis_proto #############

        set(googleapis_googleapis_google_cloud_redis_v1beta1_redis_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_redis_v1beta1_redis_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_redis_v1beta1_redis_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_redis_v1beta1_redis_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_redis_v1beta1_redis_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_redis_v1beta1_redis_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_redis_v1beta1_redis_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_redis_v1beta1_redis_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_redis_v1beta1_redis_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_redis_v1beta1_redis_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_redis_v1beta1_redis_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_redis_v1beta1_redis_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_redis_v1beta1_redis_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_redis_v1beta1_redis_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_redis_v1beta1_redis_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_redis_v1beta1_redis_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_redis_v1beta1_redis_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_redis_v1beta1_redis_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_redis_v1beta1_redis_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_redis_v1beta1_redis_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_redis_v1beta1_redis_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_redis_v1beta1_redis_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_redis_v1beta1_redis_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_redis_v1beta1_redis_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_redis_v1beta1_redis_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_redis_v1beta1_redis_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_redis_v1beta1_redis_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_redis_v1beta1_redis_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_redis_v1beta1_redis_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_redis_v1beta1_redis_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_redis_v1beta1_redis_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_redis_v1_redis_cc_proto #############

        set(googleapis_googleapis_google_cloud_redis_v1_redis_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_redis_v1_redis_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_redis_v1_redis_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_redis_v1_redis_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_redis_v1_redis_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_redis_v1_redis_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_redis_v1_redis_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_redis_v1_redis_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_redis_v1_redis_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_redis_v1_redis_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_redis_v1_redis_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_redis_v1_redis_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_redis_v1_redis_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_redis_v1_redis_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_redis_v1_redis_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_redis_v1_redis_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_redis_v1_redis_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_redis_v1_redis_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_redis_v1_redis_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_redis_v1_redis_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_redis_v1_redis_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_redis_v1_redis_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_redis_v1_redis_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_redis_v1_redis_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_redis_v1_redis_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_redis_v1_redis_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_redis_v1_redis_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_redis_v1_redis_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_redis_v1_redis_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_redis_v1_redis_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_redis_v1_redis_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_redis_v1_redis_proto #############

        set(googleapis_googleapis_google_cloud_redis_v1_redis_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_redis_v1_redis_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_redis_v1_redis_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_redis_v1_redis_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_redis_v1_redis_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_redis_v1_redis_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_redis_v1_redis_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_redis_v1_redis_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_redis_v1_redis_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_redis_v1_redis_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_redis_v1_redis_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_redis_v1_redis_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_redis_v1_redis_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_redis_v1_redis_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_redis_v1_redis_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_redis_v1_redis_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_redis_v1_redis_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_redis_v1_redis_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_redis_v1_redis_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_redis_v1_redis_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_redis_v1_redis_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_redis_v1_redis_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_redis_v1_redis_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_redis_v1_redis_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_redis_v1_redis_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_redis_v1_redis_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_redis_v1_redis_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_redis_v1_redis_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_redis_v1_redis_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_redis_v1_redis_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_redis_v1_redis_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_translate_v3_translation_cc_proto #############

        set(googleapis_googleapis_google_cloud_translate_v3_translation_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_translate_v3_translation_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_translate_v3_translation_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_translate_v3_translation_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_translate_v3_translation_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_translate_v3_translation_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_translate_v3_translation_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_translate_v3_translation_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_translate_v3_translation_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_translate_v3_translation_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_translate_v3_translation_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_translate_v3_translation_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_translate_v3_translation_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_translate_v3_translation_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_translate_v3_translation_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_translate_v3_translation_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_translate_v3_translation_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_translate_v3_translation_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_translate_v3_translation_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_translate_v3_translation_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_translate_v3_translation_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_translate_v3_translation_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_translate_v3_translation_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_translate_v3_translation_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_translate_v3_translation_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_translate_v3_translation_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_translate_v3_translation_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_translate_v3_translation_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_translate_v3_translation_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_translate_v3_translation_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_translate_v3_translation_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_translate_v3_translation_proto #############

        set(googleapis_googleapis_google_cloud_translate_v3_translation_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_translate_v3_translation_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_translate_v3_translation_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_translate_v3_translation_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_translate_v3_translation_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_translate_v3_translation_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_translate_v3_translation_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_translate_v3_translation_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_translate_v3_translation_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_translate_v3_translation_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_translate_v3_translation_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_translate_v3_translation_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_translate_v3_translation_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_translate_v3_translation_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_translate_v3_translation_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_translate_v3_translation_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_translate_v3_translation_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_translate_v3_translation_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_translate_v3_translation_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_translate_v3_translation_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_translate_v3_translation_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_translate_v3_translation_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_translate_v3_translation_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_translate_v3_translation_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_translate_v3_translation_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_translate_v3_translation_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_translate_v3_translation_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_translate_v3_translation_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_translate_v3_translation_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_translate_v3_translation_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_translate_v3_translation_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_security_publicca_v1beta1_publicca_cc_proto #############

        set(googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_security_publicca_v1beta1_publicca_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_security_publicca_v1beta1_publicca_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_security_publicca_v1beta1_publicca_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_security_publicca_v1beta1_publicca_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_security_publicca_v1beta1_publicca_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_security_publicca_v1beta1_publicca_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_security_publicca_v1beta1_publicca_proto #############

        set(googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_security_publicca_v1beta1_publicca_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_security_publicca_v1beta1_publicca_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_security_publicca_v1beta1_publicca_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_security_publicca_v1beta1_publicca_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_security_publicca_v1beta1_publicca_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_security_publicca_v1beta1_publicca_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_security_publicca_v1beta1_publicca_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_security_privateca_v1_privateca_cc_proto #############

        set(googleapis_googleapis_google_cloud_security_privateca_v1_privateca_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_security_privateca_v1_privateca_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_security_privateca_v1_privateca_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_security_privateca_v1_privateca_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_security_privateca_v1_privateca_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_security_privateca_v1_privateca_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_security_privateca_v1_privateca_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_security_privateca_v1_privateca_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_security_privateca_v1_privateca_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_security_privateca_v1_privateca_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_security_privateca_v1_privateca_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_security_privateca_v1_privateca_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_security_privateca_v1_privateca_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_security_privateca_v1_privateca_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_security_privateca_v1_privateca_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_security_privateca_v1_privateca_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_security_privateca_v1_privateca_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_security_privateca_v1_privateca_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_security_privateca_v1_privateca_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_security_privateca_v1_privateca_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_security_privateca_v1_privateca_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_security_privateca_v1_privateca_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_security_privateca_v1_privateca_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_security_privateca_v1_privateca_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_security_privateca_v1_privateca_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_security_privateca_v1_privateca_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_security_privateca_v1_privateca_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_security_privateca_v1_privateca_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_security_privateca_v1_privateca_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_security_privateca_v1_privateca_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_security_privateca_v1_privateca_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_security_privateca_v1_privateca_proto #############

        set(googleapis_googleapis_google_cloud_security_privateca_v1_privateca_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_security_privateca_v1_privateca_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_security_privateca_v1_privateca_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_security_privateca_v1_privateca_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_security_privateca_v1_privateca_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_security_privateca_v1_privateca_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_security_privateca_v1_privateca_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_security_privateca_v1_privateca_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_security_privateca_v1_privateca_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_security_privateca_v1_privateca_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_security_privateca_v1_privateca_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_security_privateca_v1_privateca_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_security_privateca_v1_privateca_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_security_privateca_v1_privateca_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_security_privateca_v1_privateca_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_security_privateca_v1_privateca_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_security_privateca_v1_privateca_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_security_privateca_v1_privateca_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_security_privateca_v1_privateca_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_security_privateca_v1_privateca_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_security_privateca_v1_privateca_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_security_privateca_v1_privateca_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_security_privateca_v1_privateca_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_security_privateca_v1_privateca_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_security_privateca_v1_privateca_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_security_privateca_v1_privateca_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_security_privateca_v1_privateca_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_security_privateca_v1_privateca_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_security_privateca_v1_privateca_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_security_privateca_v1_privateca_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_security_privateca_v1_privateca_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_documentai_v1_documentai_cc_proto #############

        set(googleapis_googleapis_google_cloud_documentai_v1_documentai_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_documentai_v1_documentai_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_documentai_v1_documentai_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_documentai_v1_documentai_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_documentai_v1_documentai_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_documentai_v1_documentai_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_documentai_v1_documentai_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_documentai_v1_documentai_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_documentai_v1_documentai_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_documentai_v1_documentai_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_documentai_v1_documentai_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_documentai_v1_documentai_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_documentai_v1_documentai_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_documentai_v1_documentai_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_documentai_v1_documentai_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_documentai_v1_documentai_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_documentai_v1_documentai_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_documentai_v1_documentai_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_documentai_v1_documentai_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_documentai_v1_documentai_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_documentai_v1_documentai_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_documentai_v1_documentai_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_documentai_v1_documentai_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_documentai_v1_documentai_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_documentai_v1_documentai_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_documentai_v1_documentai_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_documentai_v1_documentai_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_documentai_v1_documentai_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_documentai_v1_documentai_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_documentai_v1_documentai_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_documentai_v1_documentai_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_documentai_v1_documentai_proto #############

        set(googleapis_googleapis_google_cloud_documentai_v1_documentai_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_documentai_v1_documentai_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_documentai_v1_documentai_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_documentai_v1_documentai_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_documentai_v1_documentai_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_documentai_v1_documentai_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_documentai_v1_documentai_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_documentai_v1_documentai_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_documentai_v1_documentai_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_documentai_v1_documentai_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_documentai_v1_documentai_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_documentai_v1_documentai_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_documentai_v1_documentai_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_documentai_v1_documentai_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_documentai_v1_documentai_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_documentai_v1_documentai_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_documentai_v1_documentai_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_documentai_v1_documentai_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_documentai_v1_documentai_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_documentai_v1_documentai_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_documentai_v1_documentai_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_documentai_v1_documentai_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_documentai_v1_documentai_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_documentai_v1_documentai_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_documentai_v1_documentai_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_documentai_v1_documentai_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_documentai_v1_documentai_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_documentai_v1_documentai_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_documentai_v1_documentai_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_documentai_v1_documentai_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_documentai_v1_documentai_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_documentai_v1beta3_documentai_cc_proto #############

        set(googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_documentai_v1beta3_documentai_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_documentai_v1beta3_documentai_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_documentai_v1beta3_documentai_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_documentai_v1beta3_documentai_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_documentai_v1beta3_documentai_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_documentai_v1beta3_documentai_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_documentai_v1beta3_documentai_proto #############

        set(googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_documentai_v1beta3_documentai_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_documentai_v1beta3_documentai_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_documentai_v1beta3_documentai_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_documentai_v1beta3_documentai_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_documentai_v1beta3_documentai_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_documentai_v1beta3_documentai_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_documentai_v1beta3_documentai_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_storageinsights_v1_storageinsights_cc_proto #############

        set(googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_storageinsights_v1_storageinsights_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_storageinsights_v1_storageinsights_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_storageinsights_v1_storageinsights_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_storageinsights_v1_storageinsights_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_storageinsights_v1_storageinsights_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_storageinsights_v1_storageinsights_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_storageinsights_v1_storageinsights_proto #############

        set(googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_storageinsights_v1_storageinsights_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_storageinsights_v1_storageinsights_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_storageinsights_v1_storageinsights_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_storageinsights_v1_storageinsights_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_storageinsights_v1_storageinsights_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_storageinsights_v1_storageinsights_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_storageinsights_v1_storageinsights_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_dialogflow_cx_v3_cx_cc_proto #############

        set(googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_dialogflow_cx_v3_cx_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_dialogflow_cx_v3_cx_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_dialogflow_cx_v3_cx_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dialogflow_cx_v3_cx_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dialogflow_cx_v3_cx_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dialogflow_cx_v3_cx_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_dialogflow_cx_v3_cx_proto #############

        set(googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_dialogflow_cx_v3_cx_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_dialogflow_cx_v3_cx_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_dialogflow_cx_v3_cx_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dialogflow_cx_v3_cx_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dialogflow_cx_v3_cx_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dialogflow_cx_v3_cx_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_cx_v3_cx_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_dialogflow_cx_v3beta1_cx_cc_proto #############

        set(googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_dialogflow_cx_v3beta1_cx_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_dialogflow_cx_v3beta1_cx_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_dialogflow_cx_v3beta1_cx_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dialogflow_cx_v3beta1_cx_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dialogflow_cx_v3beta1_cx_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dialogflow_cx_v3beta1_cx_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_dialogflow_cx_v3beta1_cx_proto #############

        set(googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_dialogflow_cx_v3beta1_cx_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_dialogflow_cx_v3beta1_cx_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_dialogflow_cx_v3beta1_cx_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dialogflow_cx_v3beta1_cx_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dialogflow_cx_v3beta1_cx_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dialogflow_cx_v3beta1_cx_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_cx_v3beta1_cx_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_dialogflow_v2_dialogflow_cc_proto #############

        set(googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_dialogflow_v2_dialogflow_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_dialogflow_v2_dialogflow_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_dialogflow_v2_dialogflow_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dialogflow_v2_dialogflow_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dialogflow_v2_dialogflow_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dialogflow_v2_dialogflow_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_dialogflow_v2_dialogflow_proto #############

        set(googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_dialogflow_v2_dialogflow_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_dialogflow_v2_dialogflow_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_dialogflow_v2_dialogflow_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dialogflow_v2_dialogflow_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dialogflow_v2_dialogflow_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dialogflow_v2_dialogflow_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_v2_dialogflow_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_dialogflow_v2beta1_dialogflow_cc_proto #############

        set(googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_dialogflow_v2beta1_dialogflow_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_dialogflow_v2beta1_dialogflow_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_dialogflow_v2beta1_dialogflow_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dialogflow_v2beta1_dialogflow_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dialogflow_v2beta1_dialogflow_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dialogflow_v2beta1_dialogflow_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_dialogflow_v2beta1_dialogflow_proto #############

        set(googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_dialogflow_v2beta1_dialogflow_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_dialogflow_v2beta1_dialogflow_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_dialogflow_v2beta1_dialogflow_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dialogflow_v2beta1_dialogflow_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dialogflow_v2beta1_dialogflow_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dialogflow_v2beta1_dialogflow_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dialogflow_v2beta1_dialogflow_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_identitytoolkit_v2_identitytoolkit_cc_proto #############

        set(googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_identitytoolkit_v2_identitytoolkit_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_identitytoolkit_v2_identitytoolkit_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_identitytoolkit_v2_identitytoolkit_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_identitytoolkit_v2_identitytoolkit_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_identitytoolkit_v2_identitytoolkit_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_identitytoolkit_v2_identitytoolkit_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_identitytoolkit_v2_identitytoolkit_proto #############

        set(googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_identitytoolkit_v2_identitytoolkit_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_identitytoolkit_v2_identitytoolkit_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_identitytoolkit_v2_identitytoolkit_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_identitytoolkit_v2_identitytoolkit_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_identitytoolkit_v2_identitytoolkit_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_identitytoolkit_v2_identitytoolkit_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_identitytoolkit_v2_identitytoolkit_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_networkmanagement_v1_networkmanagement_cc_proto #############

        set(googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_networkmanagement_v1_networkmanagement_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_networkmanagement_v1_networkmanagement_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_networkmanagement_v1_networkmanagement_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_networkmanagement_v1_networkmanagement_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_networkmanagement_v1_networkmanagement_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_networkmanagement_v1_networkmanagement_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_networkmanagement_v1_networkmanagement_proto #############

        set(googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_networkmanagement_v1_networkmanagement_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_networkmanagement_v1_networkmanagement_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_networkmanagement_v1_networkmanagement_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_networkmanagement_v1_networkmanagement_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_networkmanagement_v1_networkmanagement_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_networkmanagement_v1_networkmanagement_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkmanagement_v1_networkmanagement_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_gkeconnect_gateway_v1_gateway_cc_proto #############

        set(googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_gkeconnect_gateway_v1_gateway_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_gkeconnect_gateway_v1_gateway_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_gkeconnect_gateway_v1_gateway_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkeconnect_gateway_v1_gateway_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkeconnect_gateway_v1_gateway_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkeconnect_gateway_v1_gateway_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_gkeconnect_gateway_v1_gateway_proto #############

        set(googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_gkeconnect_gateway_v1_gateway_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_gkeconnect_gateway_v1_gateway_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_gkeconnect_gateway_v1_gateway_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkeconnect_gateway_v1_gateway_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkeconnect_gateway_v1_gateway_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkeconnect_gateway_v1_gateway_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkeconnect_gateway_v1_gateway_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_gkehub_v1beta1_gkehub_cc_proto #############

        set(googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_gkehub_v1beta1_gkehub_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_gkehub_v1beta1_gkehub_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_gkehub_v1beta1_gkehub_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkehub_v1beta1_gkehub_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkehub_v1beta1_gkehub_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkehub_v1beta1_gkehub_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_gkehub_v1beta1_gkehub_proto #############

        set(googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_gkehub_v1beta1_gkehub_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_gkehub_v1beta1_gkehub_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_gkehub_v1beta1_gkehub_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkehub_v1beta1_gkehub_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkehub_v1beta1_gkehub_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkehub_v1beta1_gkehub_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1beta1_gkehub_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_gkehub_v1alpha2_gkehub_cc_proto #############

        set(googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_gkehub_v1alpha2_gkehub_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_gkehub_v1alpha2_gkehub_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_gkehub_v1alpha2_gkehub_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkehub_v1alpha2_gkehub_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkehub_v1alpha2_gkehub_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkehub_v1alpha2_gkehub_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_gkehub_v1alpha2_gkehub_proto #############

        set(googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_gkehub_v1alpha2_gkehub_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_gkehub_v1alpha2_gkehub_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_gkehub_v1alpha2_gkehub_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkehub_v1alpha2_gkehub_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkehub_v1alpha2_gkehub_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkehub_v1alpha2_gkehub_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1alpha2_gkehub_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_cc_proto #############

        set(googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_proto #############

        set(googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_gkehub_v1_configmanagement_configmanagement_cc_proto #############

        set(googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_gkehub_v1_configmanagement_configmanagement_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_gkehub_v1_configmanagement_configmanagement_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_gkehub_v1_configmanagement_configmanagement_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkehub_v1_configmanagement_configmanagement_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkehub_v1_configmanagement_configmanagement_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkehub_v1_configmanagement_configmanagement_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_gkehub_v1_configmanagement_configmanagement_proto #############

        set(googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_gkehub_v1_configmanagement_configmanagement_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_gkehub_v1_configmanagement_configmanagement_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_gkehub_v1_configmanagement_configmanagement_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkehub_v1_configmanagement_configmanagement_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkehub_v1_configmanagement_configmanagement_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkehub_v1_configmanagement_configmanagement_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkehub_v1_configmanagement_configmanagement_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_oslogin_v1_oslogin_cc_proto #############

        set(googleapis_googleapis_google_cloud_oslogin_v1_oslogin_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_oslogin_v1_oslogin_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_oslogin_v1_oslogin_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_oslogin_v1_oslogin_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_oslogin_v1_oslogin_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_oslogin_v1_oslogin_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_oslogin_v1_oslogin_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_oslogin_v1_oslogin_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_oslogin_v1_oslogin_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_oslogin_v1_oslogin_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_oslogin_v1_oslogin_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_oslogin_v1_oslogin_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_oslogin_v1_oslogin_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_oslogin_v1_oslogin_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_oslogin_v1_oslogin_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_oslogin_v1_oslogin_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_oslogin_v1_oslogin_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_oslogin_v1_oslogin_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_oslogin_v1_oslogin_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_oslogin_v1_oslogin_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_oslogin_v1_oslogin_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_oslogin_v1_oslogin_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_oslogin_v1_oslogin_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_oslogin_v1_oslogin_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_oslogin_v1_oslogin_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_oslogin_v1_oslogin_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_oslogin_v1_oslogin_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_oslogin_v1_oslogin_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_oslogin_v1_oslogin_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_oslogin_v1_oslogin_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_oslogin_v1_oslogin_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_oslogin_v1_oslogin_proto #############

        set(googleapis_googleapis_google_cloud_oslogin_v1_oslogin_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_oslogin_v1_oslogin_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_oslogin_v1_oslogin_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_oslogin_v1_oslogin_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_oslogin_v1_oslogin_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_oslogin_v1_oslogin_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_oslogin_v1_oslogin_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_oslogin_v1_oslogin_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_oslogin_v1_oslogin_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_oslogin_v1_oslogin_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_oslogin_v1_oslogin_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_oslogin_v1_oslogin_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_oslogin_v1_oslogin_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_oslogin_v1_oslogin_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_oslogin_v1_oslogin_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_oslogin_v1_oslogin_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_oslogin_v1_oslogin_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_oslogin_v1_oslogin_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_oslogin_v1_oslogin_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_oslogin_v1_oslogin_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_oslogin_v1_oslogin_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_oslogin_v1_oslogin_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_oslogin_v1_oslogin_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_oslogin_v1_oslogin_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_oslogin_v1_oslogin_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_oslogin_v1_oslogin_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_oslogin_v1_oslogin_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_oslogin_v1_oslogin_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_oslogin_v1_oslogin_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_oslogin_v1_oslogin_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_oslogin_v1_oslogin_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_vpcaccess_v1_vpcaccess_cc_proto #############

        set(googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_vpcaccess_v1_vpcaccess_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_vpcaccess_v1_vpcaccess_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_vpcaccess_v1_vpcaccess_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_vpcaccess_v1_vpcaccess_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_vpcaccess_v1_vpcaccess_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_vpcaccess_v1_vpcaccess_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_vpcaccess_v1_vpcaccess_proto #############

        set(googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_vpcaccess_v1_vpcaccess_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_vpcaccess_v1_vpcaccess_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_vpcaccess_v1_vpcaccess_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_vpcaccess_v1_vpcaccess_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_vpcaccess_v1_vpcaccess_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_vpcaccess_v1_vpcaccess_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_vpcaccess_v1_vpcaccess_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_domains_v1_domains_cc_proto #############

        set(googleapis_googleapis_google_cloud_domains_v1_domains_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_domains_v1_domains_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_domains_v1_domains_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_domains_v1_domains_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_domains_v1_domains_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_domains_v1_domains_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_domains_v1_domains_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_domains_v1_domains_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_domains_v1_domains_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_domains_v1_domains_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_domains_v1_domains_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_domains_v1_domains_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_domains_v1_domains_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_domains_v1_domains_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_domains_v1_domains_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_domains_v1_domains_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_domains_v1_domains_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_domains_v1_domains_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_domains_v1_domains_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_domains_v1_domains_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_domains_v1_domains_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_domains_v1_domains_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_domains_v1_domains_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_domains_v1_domains_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_domains_v1_domains_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_domains_v1_domains_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_domains_v1_domains_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_domains_v1_domains_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_domains_v1_domains_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_domains_v1_domains_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_domains_v1_domains_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_domains_v1_domains_proto #############

        set(googleapis_googleapis_google_cloud_domains_v1_domains_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_domains_v1_domains_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_domains_v1_domains_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_domains_v1_domains_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_domains_v1_domains_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_domains_v1_domains_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_domains_v1_domains_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_domains_v1_domains_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_domains_v1_domains_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_domains_v1_domains_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_domains_v1_domains_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_domains_v1_domains_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_domains_v1_domains_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_domains_v1_domains_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_domains_v1_domains_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_domains_v1_domains_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_domains_v1_domains_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_domains_v1_domains_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_domains_v1_domains_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_domains_v1_domains_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_domains_v1_domains_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_domains_v1_domains_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_domains_v1_domains_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_domains_v1_domains_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_domains_v1_domains_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_domains_v1_domains_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_domains_v1_domains_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_domains_v1_domains_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_domains_v1_domains_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_domains_v1_domains_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_domains_v1_domains_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_discoveryengine_v1beta_discoveryengine_cc_proto #############

        set(googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_discoveryengine_v1beta_discoveryengine_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_discoveryengine_v1beta_discoveryengine_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_discoveryengine_v1beta_discoveryengine_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_discoveryengine_v1beta_discoveryengine_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_discoveryengine_v1beta_discoveryengine_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_discoveryengine_v1beta_discoveryengine_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_discoveryengine_v1beta_discoveryengine_proto #############

        set(googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_discoveryengine_v1beta_discoveryengine_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_discoveryengine_v1beta_discoveryengine_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_discoveryengine_v1beta_discoveryengine_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_discoveryengine_v1beta_discoveryengine_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_discoveryengine_v1beta_discoveryengine_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_discoveryengine_v1beta_discoveryengine_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_discoveryengine_v1beta_discoveryengine_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_aiplatform_v1_schema_predict_instance_instance_cc_proto #############

        set(googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_predict_instance_instance_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_predict_instance_instance_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_predict_instance_instance_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_predict_instance_instance_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_predict_instance_instance_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_predict_instance_instance_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_aiplatform_v1_schema_predict_instance_instance_proto #############

        set(googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_predict_instance_instance_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_predict_instance_instance_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_predict_instance_instance_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_predict_instance_instance_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_predict_instance_instance_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_predict_instance_instance_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_instance_instance_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_aiplatform_v1_schema_predict_params_params_cc_proto #############

        set(googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_predict_params_params_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_predict_params_params_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_predict_params_params_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_predict_params_params_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_predict_params_params_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_predict_params_params_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_aiplatform_v1_schema_predict_params_params_proto #############

        set(googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_predict_params_params_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_predict_params_params_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_predict_params_params_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_predict_params_params_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_predict_params_params_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_predict_params_params_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_params_params_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_aiplatform_v1_schema_predict_prediction_prediction_cc_proto #############

        set(googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_predict_prediction_prediction_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_predict_prediction_prediction_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_predict_prediction_prediction_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_predict_prediction_prediction_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_predict_prediction_prediction_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_predict_prediction_prediction_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_aiplatform_v1_schema_predict_prediction_prediction_proto #############

        set(googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_predict_prediction_prediction_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_predict_prediction_prediction_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_predict_prediction_prediction_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_predict_prediction_prediction_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_predict_prediction_prediction_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_predict_prediction_prediction_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_predict_prediction_prediction_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_cc_proto #############

        set(googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_proto #############

        set(googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_networkservices_v1beta1_networkservices_cc_proto #############

        set(googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_networkservices_v1beta1_networkservices_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_networkservices_v1beta1_networkservices_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_networkservices_v1beta1_networkservices_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_networkservices_v1beta1_networkservices_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_networkservices_v1beta1_networkservices_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_networkservices_v1beta1_networkservices_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_networkservices_v1beta1_networkservices_proto #############

        set(googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_networkservices_v1beta1_networkservices_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_networkservices_v1beta1_networkservices_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_networkservices_v1beta1_networkservices_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_networkservices_v1beta1_networkservices_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_networkservices_v1beta1_networkservices_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_networkservices_v1beta1_networkservices_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkservices_v1beta1_networkservices_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_networkservices_v1_networkservices_cc_proto #############

        set(googleapis_googleapis_google_cloud_networkservices_v1_networkservices_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_networkservices_v1_networkservices_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_networkservices_v1_networkservices_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_networkservices_v1_networkservices_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_networkservices_v1_networkservices_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_networkservices_v1_networkservices_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_networkservices_v1_networkservices_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_networkservices_v1_networkservices_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkservices_v1_networkservices_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkservices_v1_networkservices_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkservices_v1_networkservices_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_networkservices_v1_networkservices_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_networkservices_v1_networkservices_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_networkservices_v1_networkservices_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_networkservices_v1_networkservices_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_networkservices_v1_networkservices_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_networkservices_v1_networkservices_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_networkservices_v1_networkservices_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkservices_v1_networkservices_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkservices_v1_networkservices_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_networkservices_v1_networkservices_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_networkservices_v1_networkservices_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_networkservices_v1_networkservices_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_networkservices_v1_networkservices_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkservices_v1_networkservices_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_networkservices_v1_networkservices_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkservices_v1_networkservices_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_networkservices_v1_networkservices_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkservices_v1_networkservices_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_networkservices_v1_networkservices_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkservices_v1_networkservices_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_networkservices_v1_networkservices_proto #############

        set(googleapis_googleapis_google_cloud_networkservices_v1_networkservices_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_networkservices_v1_networkservices_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_networkservices_v1_networkservices_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_networkservices_v1_networkservices_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_networkservices_v1_networkservices_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_networkservices_v1_networkservices_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_networkservices_v1_networkservices_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_networkservices_v1_networkservices_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkservices_v1_networkservices_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkservices_v1_networkservices_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkservices_v1_networkservices_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_networkservices_v1_networkservices_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_networkservices_v1_networkservices_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_networkservices_v1_networkservices_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_networkservices_v1_networkservices_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_networkservices_v1_networkservices_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_networkservices_v1_networkservices_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_networkservices_v1_networkservices_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkservices_v1_networkservices_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkservices_v1_networkservices_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_networkservices_v1_networkservices_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_networkservices_v1_networkservices_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_networkservices_v1_networkservices_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_networkservices_v1_networkservices_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkservices_v1_networkservices_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_networkservices_v1_networkservices_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkservices_v1_networkservices_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_networkservices_v1_networkservices_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkservices_v1_networkservices_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_networkservices_v1_networkservices_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkservices_v1_networkservices_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_video_livestream_logging_v1_logging_cc_proto #############

        set(googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_video_livestream_logging_v1_logging_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_video_livestream_logging_v1_logging_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_video_livestream_logging_v1_logging_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_video_livestream_logging_v1_logging_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_video_livestream_logging_v1_logging_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_video_livestream_logging_v1_logging_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_video_livestream_logging_v1_logging_proto #############

        set(googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_video_livestream_logging_v1_logging_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_video_livestream_logging_v1_logging_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_video_livestream_logging_v1_logging_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_video_livestream_logging_v1_logging_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_video_livestream_logging_v1_logging_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_video_livestream_logging_v1_logging_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_livestream_logging_v1_logging_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_video_livestream_v1_livestream_cc_proto #############

        set(googleapis_googleapis_google_cloud_video_livestream_v1_livestream_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_video_livestream_v1_livestream_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_video_livestream_v1_livestream_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_video_livestream_v1_livestream_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_video_livestream_v1_livestream_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_video_livestream_v1_livestream_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_video_livestream_v1_livestream_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_video_livestream_v1_livestream_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_livestream_v1_livestream_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_livestream_v1_livestream_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_livestream_v1_livestream_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_video_livestream_v1_livestream_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_video_livestream_v1_livestream_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_video_livestream_v1_livestream_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_video_livestream_v1_livestream_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_video_livestream_v1_livestream_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_video_livestream_v1_livestream_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_video_livestream_v1_livestream_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_livestream_v1_livestream_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_livestream_v1_livestream_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_video_livestream_v1_livestream_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_video_livestream_v1_livestream_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_video_livestream_v1_livestream_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_video_livestream_v1_livestream_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_livestream_v1_livestream_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_video_livestream_v1_livestream_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_livestream_v1_livestream_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_video_livestream_v1_livestream_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_livestream_v1_livestream_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_video_livestream_v1_livestream_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_livestream_v1_livestream_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_video_livestream_v1_livestream_proto #############

        set(googleapis_googleapis_google_cloud_video_livestream_v1_livestream_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_video_livestream_v1_livestream_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_video_livestream_v1_livestream_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_video_livestream_v1_livestream_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_video_livestream_v1_livestream_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_video_livestream_v1_livestream_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_video_livestream_v1_livestream_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_video_livestream_v1_livestream_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_livestream_v1_livestream_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_livestream_v1_livestream_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_livestream_v1_livestream_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_video_livestream_v1_livestream_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_video_livestream_v1_livestream_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_video_livestream_v1_livestream_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_video_livestream_v1_livestream_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_video_livestream_v1_livestream_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_video_livestream_v1_livestream_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_video_livestream_v1_livestream_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_livestream_v1_livestream_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_livestream_v1_livestream_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_video_livestream_v1_livestream_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_video_livestream_v1_livestream_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_video_livestream_v1_livestream_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_video_livestream_v1_livestream_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_livestream_v1_livestream_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_video_livestream_v1_livestream_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_livestream_v1_livestream_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_video_livestream_v1_livestream_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_livestream_v1_livestream_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_video_livestream_v1_livestream_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_livestream_v1_livestream_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_video_stitcher_v1_stitcher_cc_proto #############

        set(googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_video_stitcher_v1_stitcher_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_video_stitcher_v1_stitcher_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_video_stitcher_v1_stitcher_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_video_stitcher_v1_stitcher_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_video_stitcher_v1_stitcher_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_video_stitcher_v1_stitcher_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_video_stitcher_v1_stitcher_proto #############

        set(googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_video_stitcher_v1_stitcher_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_video_stitcher_v1_stitcher_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_video_stitcher_v1_stitcher_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_video_stitcher_v1_stitcher_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_video_stitcher_v1_stitcher_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_video_stitcher_v1_stitcher_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_stitcher_v1_stitcher_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_video_transcoder_v1_transcoder_cc_proto #############

        set(googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_video_transcoder_v1_transcoder_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_video_transcoder_v1_transcoder_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_video_transcoder_v1_transcoder_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_video_transcoder_v1_transcoder_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_video_transcoder_v1_transcoder_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_video_transcoder_v1_transcoder_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_video_transcoder_v1_transcoder_proto #############

        set(googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_video_transcoder_v1_transcoder_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_video_transcoder_v1_transcoder_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_video_transcoder_v1_transcoder_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_video_transcoder_v1_transcoder_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_video_transcoder_v1_transcoder_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_video_transcoder_v1_transcoder_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_video_transcoder_v1_transcoder_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_resourcesettings_v1_resourcesettings_cc_proto #############

        set(googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_resourcesettings_v1_resourcesettings_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_resourcesettings_v1_resourcesettings_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_resourcesettings_v1_resourcesettings_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_resourcesettings_v1_resourcesettings_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_resourcesettings_v1_resourcesettings_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_resourcesettings_v1_resourcesettings_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_resourcesettings_v1_resourcesettings_proto #############

        set(googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_resourcesettings_v1_resourcesettings_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_resourcesettings_v1_resourcesettings_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_resourcesettings_v1_resourcesettings_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_resourcesettings_v1_resourcesettings_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_resourcesettings_v1_resourcesettings_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_resourcesettings_v1_resourcesettings_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_resourcesettings_v1_resourcesettings_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_gaming_v1_gaming_cc_proto #############

        set(googleapis_googleapis_google_cloud_gaming_v1_gaming_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_gaming_v1_gaming_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_gaming_v1_gaming_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_gaming_v1_gaming_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_gaming_v1_gaming_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_gaming_v1_gaming_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_gaming_v1_gaming_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_gaming_v1_gaming_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gaming_v1_gaming_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gaming_v1_gaming_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gaming_v1_gaming_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_gaming_v1_gaming_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_gaming_v1_gaming_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_gaming_v1_gaming_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_gaming_v1_gaming_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_gaming_v1_gaming_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_gaming_v1_gaming_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_gaming_v1_gaming_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gaming_v1_gaming_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gaming_v1_gaming_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_gaming_v1_gaming_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_gaming_v1_gaming_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_gaming_v1_gaming_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_gaming_v1_gaming_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gaming_v1_gaming_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gaming_v1_gaming_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gaming_v1_gaming_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gaming_v1_gaming_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gaming_v1_gaming_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gaming_v1_gaming_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gaming_v1_gaming_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_gaming_v1_gaming_proto #############

        set(googleapis_googleapis_google_cloud_gaming_v1_gaming_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_gaming_v1_gaming_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_gaming_v1_gaming_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_gaming_v1_gaming_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_gaming_v1_gaming_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_gaming_v1_gaming_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_gaming_v1_gaming_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_gaming_v1_gaming_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gaming_v1_gaming_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gaming_v1_gaming_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gaming_v1_gaming_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_gaming_v1_gaming_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_gaming_v1_gaming_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_gaming_v1_gaming_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_gaming_v1_gaming_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_gaming_v1_gaming_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_gaming_v1_gaming_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_gaming_v1_gaming_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gaming_v1_gaming_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gaming_v1_gaming_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_gaming_v1_gaming_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_gaming_v1_gaming_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_gaming_v1_gaming_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_gaming_v1_gaming_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gaming_v1_gaming_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gaming_v1_gaming_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gaming_v1_gaming_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gaming_v1_gaming_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gaming_v1_gaming_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gaming_v1_gaming_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gaming_v1_gaming_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_kms_v1_kms_cc_proto #############

        set(googleapis_googleapis_google_cloud_kms_v1_kms_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_kms_v1_kms_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_kms_v1_kms_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_kms_v1_kms_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_kms_v1_kms_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_kms_v1_kms_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_kms_v1_kms_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_kms_v1_kms_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_kms_v1_kms_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_kms_v1_kms_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_kms_v1_kms_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_kms_v1_kms_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_kms_v1_kms_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_kms_v1_kms_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_kms_v1_kms_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_kms_v1_kms_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_kms_v1_kms_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_kms_v1_kms_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_kms_v1_kms_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_kms_v1_kms_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_kms_v1_kms_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_kms_v1_kms_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_kms_v1_kms_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_kms_v1_kms_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_kms_v1_kms_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_kms_v1_kms_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_kms_v1_kms_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_kms_v1_kms_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_kms_v1_kms_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_kms_v1_kms_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_kms_v1_kms_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_kms_v1_kms_proto #############

        set(googleapis_googleapis_google_cloud_kms_v1_kms_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_kms_v1_kms_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_kms_v1_kms_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_kms_v1_kms_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_kms_v1_kms_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_kms_v1_kms_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_kms_v1_kms_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_kms_v1_kms_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_kms_v1_kms_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_kms_v1_kms_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_kms_v1_kms_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_kms_v1_kms_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_kms_v1_kms_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_kms_v1_kms_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_kms_v1_kms_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_kms_v1_kms_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_kms_v1_kms_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_kms_v1_kms_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_kms_v1_kms_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_kms_v1_kms_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_kms_v1_kms_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_kms_v1_kms_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_kms_v1_kms_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_kms_v1_kms_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_kms_v1_kms_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_kms_v1_kms_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_kms_v1_kms_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_kms_v1_kms_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_kms_v1_kms_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_kms_v1_kms_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_kms_v1_kms_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_beyondcorp_appconnections_v1_appconnections_cc_proto #############

        set(googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_beyondcorp_appconnections_v1_appconnections_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_beyondcorp_appconnections_v1_appconnections_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_beyondcorp_appconnections_v1_appconnections_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_beyondcorp_appconnections_v1_appconnections_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_beyondcorp_appconnections_v1_appconnections_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_beyondcorp_appconnections_v1_appconnections_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_beyondcorp_appconnections_v1_appconnections_proto #############

        set(googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_beyondcorp_appconnections_v1_appconnections_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_beyondcorp_appconnections_v1_appconnections_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_beyondcorp_appconnections_v1_appconnections_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_beyondcorp_appconnections_v1_appconnections_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_beyondcorp_appconnections_v1_appconnections_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_beyondcorp_appconnections_v1_appconnections_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appconnections_v1_appconnections_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_beyondcorp_clientgateways_v1_clientgateways_cc_proto #############

        set(googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_beyondcorp_clientgateways_v1_clientgateways_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_beyondcorp_clientgateways_v1_clientgateways_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_beyondcorp_clientgateways_v1_clientgateways_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_beyondcorp_clientgateways_v1_clientgateways_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_beyondcorp_clientgateways_v1_clientgateways_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_beyondcorp_clientgateways_v1_clientgateways_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_beyondcorp_clientgateways_v1_clientgateways_proto #############

        set(googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_beyondcorp_clientgateways_v1_clientgateways_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_beyondcorp_clientgateways_v1_clientgateways_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_beyondcorp_clientgateways_v1_clientgateways_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_beyondcorp_clientgateways_v1_clientgateways_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_beyondcorp_clientgateways_v1_clientgateways_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_beyondcorp_clientgateways_v1_clientgateways_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_clientgateways_v1_clientgateways_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_cc_proto #############

        set(googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_proto #############

        set(googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_beyondcorp_appconnectors_v1_appconnectors_cc_proto #############

        set(googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_beyondcorp_appconnectors_v1_appconnectors_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_beyondcorp_appconnectors_v1_appconnectors_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_beyondcorp_appconnectors_v1_appconnectors_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_beyondcorp_appconnectors_v1_appconnectors_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_beyondcorp_appconnectors_v1_appconnectors_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_beyondcorp_appconnectors_v1_appconnectors_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_beyondcorp_appconnectors_v1_appconnectors_proto #############

        set(googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_beyondcorp_appconnectors_v1_appconnectors_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_beyondcorp_appconnectors_v1_appconnectors_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_beyondcorp_appconnectors_v1_appconnectors_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_beyondcorp_appconnectors_v1_appconnectors_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_beyondcorp_appconnectors_v1_appconnectors_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_beyondcorp_appconnectors_v1_appconnectors_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appconnectors_v1_appconnectors_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_beyondcorp_appgateways_v1_appgateways_cc_proto #############

        set(googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_beyondcorp_appgateways_v1_appgateways_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_beyondcorp_appgateways_v1_appgateways_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_beyondcorp_appgateways_v1_appgateways_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_beyondcorp_appgateways_v1_appgateways_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_beyondcorp_appgateways_v1_appgateways_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_beyondcorp_appgateways_v1_appgateways_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_beyondcorp_appgateways_v1_appgateways_proto #############

        set(googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_beyondcorp_appgateways_v1_appgateways_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_beyondcorp_appgateways_v1_appgateways_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_beyondcorp_appgateways_v1_appgateways_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_beyondcorp_appgateways_v1_appgateways_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_beyondcorp_appgateways_v1_appgateways_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_beyondcorp_appgateways_v1_appgateways_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_beyondcorp_appgateways_v1_appgateways_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_apigeeregistry_v1_apigeeregistry_cc_proto #############

        set(googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_apigeeregistry_v1_apigeeregistry_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_apigeeregistry_v1_apigeeregistry_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_apigeeregistry_v1_apigeeregistry_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_apigeeregistry_v1_apigeeregistry_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_apigeeregistry_v1_apigeeregistry_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_apigeeregistry_v1_apigeeregistry_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_apigeeregistry_v1_apigeeregistry_proto #############

        set(googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_apigeeregistry_v1_apigeeregistry_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_apigeeregistry_v1_apigeeregistry_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_apigeeregistry_v1_apigeeregistry_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_apigeeregistry_v1_apigeeregistry_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_apigeeregistry_v1_apigeeregistry_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_apigeeregistry_v1_apigeeregistry_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_apigeeregistry_v1_apigeeregistry_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_connectors_v1_connectors_cc_proto #############

        set(googleapis_googleapis_google_cloud_connectors_v1_connectors_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_connectors_v1_connectors_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_connectors_v1_connectors_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_connectors_v1_connectors_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_connectors_v1_connectors_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_connectors_v1_connectors_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_connectors_v1_connectors_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_connectors_v1_connectors_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_connectors_v1_connectors_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_connectors_v1_connectors_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_connectors_v1_connectors_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_connectors_v1_connectors_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_connectors_v1_connectors_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_connectors_v1_connectors_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_connectors_v1_connectors_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_connectors_v1_connectors_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_connectors_v1_connectors_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_connectors_v1_connectors_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_connectors_v1_connectors_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_connectors_v1_connectors_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_connectors_v1_connectors_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_connectors_v1_connectors_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_connectors_v1_connectors_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_connectors_v1_connectors_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_connectors_v1_connectors_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_connectors_v1_connectors_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_connectors_v1_connectors_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_connectors_v1_connectors_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_connectors_v1_connectors_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_connectors_v1_connectors_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_connectors_v1_connectors_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_connectors_v1_connectors_proto #############

        set(googleapis_googleapis_google_cloud_connectors_v1_connectors_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_connectors_v1_connectors_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_connectors_v1_connectors_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_connectors_v1_connectors_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_connectors_v1_connectors_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_connectors_v1_connectors_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_connectors_v1_connectors_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_connectors_v1_connectors_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_connectors_v1_connectors_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_connectors_v1_connectors_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_connectors_v1_connectors_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_connectors_v1_connectors_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_connectors_v1_connectors_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_connectors_v1_connectors_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_connectors_v1_connectors_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_connectors_v1_connectors_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_connectors_v1_connectors_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_connectors_v1_connectors_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_connectors_v1_connectors_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_connectors_v1_connectors_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_connectors_v1_connectors_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_connectors_v1_connectors_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_connectors_v1_connectors_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_connectors_v1_connectors_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_connectors_v1_connectors_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_connectors_v1_connectors_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_connectors_v1_connectors_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_connectors_v1_connectors_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_connectors_v1_connectors_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_connectors_v1_connectors_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_connectors_v1_connectors_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_binaryauthorization_v1_binaryauthorization_cc_proto #############

        set(googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_binaryauthorization_v1_binaryauthorization_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_binaryauthorization_v1_binaryauthorization_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_binaryauthorization_v1_binaryauthorization_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_binaryauthorization_v1_binaryauthorization_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_binaryauthorization_v1_binaryauthorization_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_binaryauthorization_v1_binaryauthorization_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_binaryauthorization_v1_binaryauthorization_proto #############

        set(googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_binaryauthorization_v1_binaryauthorization_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_binaryauthorization_v1_binaryauthorization_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_binaryauthorization_v1_binaryauthorization_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_binaryauthorization_v1_binaryauthorization_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_binaryauthorization_v1_binaryauthorization_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_binaryauthorization_v1_binaryauthorization_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_binaryauthorization_v1_binaryauthorization_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_datastream_v1_datastream_cc_proto #############

        set(googleapis_googleapis_google_cloud_datastream_v1_datastream_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_datastream_v1_datastream_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_datastream_v1_datastream_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_datastream_v1_datastream_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_datastream_v1_datastream_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_datastream_v1_datastream_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_datastream_v1_datastream_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_datastream_v1_datastream_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datastream_v1_datastream_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datastream_v1_datastream_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datastream_v1_datastream_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_datastream_v1_datastream_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_datastream_v1_datastream_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_datastream_v1_datastream_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_datastream_v1_datastream_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_datastream_v1_datastream_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_datastream_v1_datastream_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_datastream_v1_datastream_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datastream_v1_datastream_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datastream_v1_datastream_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_datastream_v1_datastream_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_datastream_v1_datastream_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_datastream_v1_datastream_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_datastream_v1_datastream_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datastream_v1_datastream_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_datastream_v1_datastream_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datastream_v1_datastream_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_datastream_v1_datastream_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datastream_v1_datastream_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_datastream_v1_datastream_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datastream_v1_datastream_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_datastream_v1_datastream_proto #############

        set(googleapis_googleapis_google_cloud_datastream_v1_datastream_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_datastream_v1_datastream_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_datastream_v1_datastream_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_datastream_v1_datastream_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_datastream_v1_datastream_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_datastream_v1_datastream_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_datastream_v1_datastream_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_datastream_v1_datastream_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datastream_v1_datastream_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datastream_v1_datastream_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datastream_v1_datastream_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_datastream_v1_datastream_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_datastream_v1_datastream_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_datastream_v1_datastream_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_datastream_v1_datastream_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_datastream_v1_datastream_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_datastream_v1_datastream_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_datastream_v1_datastream_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datastream_v1_datastream_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datastream_v1_datastream_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_datastream_v1_datastream_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_datastream_v1_datastream_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_datastream_v1_datastream_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_datastream_v1_datastream_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datastream_v1_datastream_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_datastream_v1_datastream_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datastream_v1_datastream_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_datastream_v1_datastream_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datastream_v1_datastream_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_datastream_v1_datastream_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_datastream_v1_datastream_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_cc_proto #############

        set(googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_proto #############

        set(googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_webrisk_v1beta1_webrisk_cc_proto #############

        set(googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_webrisk_v1beta1_webrisk_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_webrisk_v1beta1_webrisk_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_webrisk_v1beta1_webrisk_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_webrisk_v1beta1_webrisk_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_webrisk_v1beta1_webrisk_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_webrisk_v1beta1_webrisk_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_webrisk_v1beta1_webrisk_proto #############

        set(googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_webrisk_v1beta1_webrisk_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_webrisk_v1beta1_webrisk_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_webrisk_v1beta1_webrisk_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_webrisk_v1beta1_webrisk_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_webrisk_v1beta1_webrisk_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_webrisk_v1beta1_webrisk_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_webrisk_v1beta1_webrisk_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_webrisk_v1_webrisk_cc_proto #############

        set(googleapis_googleapis_google_cloud_webrisk_v1_webrisk_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_webrisk_v1_webrisk_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_webrisk_v1_webrisk_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_webrisk_v1_webrisk_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_webrisk_v1_webrisk_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_webrisk_v1_webrisk_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_webrisk_v1_webrisk_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_webrisk_v1_webrisk_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_webrisk_v1_webrisk_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_webrisk_v1_webrisk_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_webrisk_v1_webrisk_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_webrisk_v1_webrisk_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_webrisk_v1_webrisk_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_webrisk_v1_webrisk_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_webrisk_v1_webrisk_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_webrisk_v1_webrisk_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_webrisk_v1_webrisk_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_webrisk_v1_webrisk_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_webrisk_v1_webrisk_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_webrisk_v1_webrisk_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_webrisk_v1_webrisk_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_webrisk_v1_webrisk_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_webrisk_v1_webrisk_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_webrisk_v1_webrisk_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_webrisk_v1_webrisk_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_webrisk_v1_webrisk_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_webrisk_v1_webrisk_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_webrisk_v1_webrisk_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_webrisk_v1_webrisk_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_webrisk_v1_webrisk_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_webrisk_v1_webrisk_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_webrisk_v1_webrisk_proto #############

        set(googleapis_googleapis_google_cloud_webrisk_v1_webrisk_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_webrisk_v1_webrisk_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_webrisk_v1_webrisk_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_webrisk_v1_webrisk_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_webrisk_v1_webrisk_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_webrisk_v1_webrisk_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_webrisk_v1_webrisk_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_webrisk_v1_webrisk_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_webrisk_v1_webrisk_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_webrisk_v1_webrisk_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_webrisk_v1_webrisk_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_webrisk_v1_webrisk_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_webrisk_v1_webrisk_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_webrisk_v1_webrisk_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_webrisk_v1_webrisk_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_webrisk_v1_webrisk_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_webrisk_v1_webrisk_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_webrisk_v1_webrisk_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_webrisk_v1_webrisk_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_webrisk_v1_webrisk_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_webrisk_v1_webrisk_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_webrisk_v1_webrisk_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_webrisk_v1_webrisk_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_webrisk_v1_webrisk_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_webrisk_v1_webrisk_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_webrisk_v1_webrisk_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_webrisk_v1_webrisk_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_webrisk_v1_webrisk_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_webrisk_v1_webrisk_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_webrisk_v1_webrisk_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_webrisk_v1_webrisk_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_orgpolicy_v2_orgpolicy_cc_proto #############

        set(googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_orgpolicy_v2_orgpolicy_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_orgpolicy_v2_orgpolicy_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_orgpolicy_v2_orgpolicy_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_orgpolicy_v2_orgpolicy_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_orgpolicy_v2_orgpolicy_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_orgpolicy_v2_orgpolicy_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_orgpolicy_v2_orgpolicy_proto #############

        set(googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_orgpolicy_v2_orgpolicy_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_orgpolicy_v2_orgpolicy_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_orgpolicy_v2_orgpolicy_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_orgpolicy_v2_orgpolicy_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_orgpolicy_v2_orgpolicy_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_orgpolicy_v2_orgpolicy_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orgpolicy_v2_orgpolicy_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_orgpolicy_v1_orgpolicy_cc_proto #############

        set(googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_orgpolicy_v1_orgpolicy_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_orgpolicy_v1_orgpolicy_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_orgpolicy_v1_orgpolicy_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_orgpolicy_v1_orgpolicy_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_orgpolicy_v1_orgpolicy_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_orgpolicy_v1_orgpolicy_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_orgpolicy_v1_orgpolicy_proto #############

        set(googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_orgpolicy_v1_orgpolicy_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_orgpolicy_v1_orgpolicy_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_orgpolicy_v1_orgpolicy_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_orgpolicy_v1_orgpolicy_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_orgpolicy_v1_orgpolicy_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_orgpolicy_v1_orgpolicy_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_orgpolicy_v1_orgpolicy_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_commerce_consumer_procurement_v1alpha1_procurement_cc_proto #############

        set(googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_commerce_consumer_procurement_v1alpha1_procurement_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_commerce_consumer_procurement_v1alpha1_procurement_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_commerce_consumer_procurement_v1alpha1_procurement_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_commerce_consumer_procurement_v1alpha1_procurement_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_commerce_consumer_procurement_v1alpha1_procurement_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_commerce_consumer_procurement_v1alpha1_procurement_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_commerce_consumer_procurement_v1alpha1_procurement_proto #############

        set(googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_commerce_consumer_procurement_v1alpha1_procurement_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_commerce_consumer_procurement_v1alpha1_procurement_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_commerce_consumer_procurement_v1alpha1_procurement_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_commerce_consumer_procurement_v1alpha1_procurement_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_commerce_consumer_procurement_v1alpha1_procurement_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_commerce_consumer_procurement_v1alpha1_procurement_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_commerce_consumer_procurement_v1alpha1_procurement_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_essentialcontacts_v1_essentialcontacts_cc_proto #############

        set(googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_essentialcontacts_v1_essentialcontacts_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_essentialcontacts_v1_essentialcontacts_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_essentialcontacts_v1_essentialcontacts_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_essentialcontacts_v1_essentialcontacts_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_essentialcontacts_v1_essentialcontacts_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_essentialcontacts_v1_essentialcontacts_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_essentialcontacts_v1_essentialcontacts_proto #############

        set(googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_essentialcontacts_v1_essentialcontacts_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_essentialcontacts_v1_essentialcontacts_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_essentialcontacts_v1_essentialcontacts_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_essentialcontacts_v1_essentialcontacts_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_essentialcontacts_v1_essentialcontacts_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_essentialcontacts_v1_essentialcontacts_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_essentialcontacts_v1_essentialcontacts_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_devtools_clouddebugger_v2_clouddebugger_cc_proto #############

        set(googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_devtools_clouddebugger_v2_clouddebugger_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_devtools_clouddebugger_v2_clouddebugger_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_devtools_clouddebugger_v2_clouddebugger_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_clouddebugger_v2_clouddebugger_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_clouddebugger_v2_clouddebugger_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_clouddebugger_v2_clouddebugger_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_devtools_clouddebugger_v2_clouddebugger_proto #############

        set(googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_proto_DEPS_TARGET
                                      googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_devtools_clouddebugger_v2_clouddebugger_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_devtools_clouddebugger_v2_clouddebugger_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_devtools_clouddebugger_v2_clouddebugger_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_clouddebugger_v2_clouddebugger_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_clouddebugger_v2_clouddebugger_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_clouddebugger_v2_clouddebugger_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_clouddebugger_v2_clouddebugger_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_devtools_build_v1_build_cc_proto #############

        set(googleapis_googleapis_google_devtools_build_v1_build_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_devtools_build_v1_build_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_devtools_build_v1_build_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_devtools_build_v1_build_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_devtools_build_v1_build_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_devtools_build_v1_build_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_devtools_build_v1_build_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_devtools_build_v1_build_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_build_v1_build_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_build_v1_build_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_build_v1_build_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_devtools_build_v1_build_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_devtools_build_v1_build_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_devtools_build_v1_build_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_devtools_build_v1_build_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_devtools_build_v1_build_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_devtools_build_v1_build_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_devtools_build_v1_build_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_build_v1_build_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_build_v1_build_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_devtools_build_v1_build_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_devtools_build_v1_build_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_devtools_build_v1_build_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_devtools_build_v1_build_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_build_v1_build_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_build_v1_build_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_build_v1_build_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_build_v1_build_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_build_v1_build_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_build_v1_build_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_build_v1_build_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_devtools_build_v1_build_proto #############

        set(googleapis_googleapis_google_devtools_build_v1_build_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_devtools_build_v1_build_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_devtools_build_v1_build_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_devtools_build_v1_build_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_devtools_build_v1_build_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_devtools_build_v1_build_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_devtools_build_v1_build_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_devtools_build_v1_build_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_build_v1_build_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_build_v1_build_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_build_v1_build_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_devtools_build_v1_build_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_devtools_build_v1_build_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_devtools_build_v1_build_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_devtools_build_v1_build_proto_DEPS_TARGET
                                      googleapis_googleapis_google_devtools_build_v1_build_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_devtools_build_v1_build_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_devtools_build_v1_build_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_build_v1_build_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_build_v1_build_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_devtools_build_v1_build_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_devtools_build_v1_build_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_devtools_build_v1_build_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_devtools_build_v1_build_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_build_v1_build_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_build_v1_build_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_build_v1_build_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_build_v1_build_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_build_v1_build_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_build_v1_build_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_build_v1_build_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_devtools_cloudprofiler_v2_cloudprofiler_cc_proto #############

        set(googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_devtools_cloudprofiler_v2_cloudprofiler_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_devtools_cloudprofiler_v2_cloudprofiler_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_devtools_cloudprofiler_v2_cloudprofiler_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_cloudprofiler_v2_cloudprofiler_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_cloudprofiler_v2_cloudprofiler_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_cloudprofiler_v2_cloudprofiler_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_devtools_cloudprofiler_v2_cloudprofiler_proto #############

        set(googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_proto_DEPS_TARGET
                                      googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_devtools_cloudprofiler_v2_cloudprofiler_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_devtools_cloudprofiler_v2_cloudprofiler_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_devtools_cloudprofiler_v2_cloudprofiler_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_cloudprofiler_v2_cloudprofiler_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_cloudprofiler_v2_cloudprofiler_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_cloudprofiler_v2_cloudprofiler_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudprofiler_v2_cloudprofiler_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_devtools_cloudtrace_v2_cloudtrace_cc_proto #############

        set(googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_devtools_cloudtrace_v2_cloudtrace_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_devtools_cloudtrace_v2_cloudtrace_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_devtools_cloudtrace_v2_cloudtrace_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_cloudtrace_v2_cloudtrace_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_cloudtrace_v2_cloudtrace_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_cloudtrace_v2_cloudtrace_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_devtools_cloudtrace_v2_cloudtrace_proto #############

        set(googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_proto_DEPS_TARGET
                                      googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_devtools_cloudtrace_v2_cloudtrace_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_devtools_cloudtrace_v2_cloudtrace_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_devtools_cloudtrace_v2_cloudtrace_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_cloudtrace_v2_cloudtrace_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_cloudtrace_v2_cloudtrace_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_cloudtrace_v2_cloudtrace_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudtrace_v2_cloudtrace_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_devtools_cloudtrace_v1_cloudtrace_cc_proto #############

        set(googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_devtools_cloudtrace_v1_cloudtrace_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_devtools_cloudtrace_v1_cloudtrace_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_devtools_cloudtrace_v1_cloudtrace_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_cloudtrace_v1_cloudtrace_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_cloudtrace_v1_cloudtrace_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_cloudtrace_v1_cloudtrace_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_devtools_cloudtrace_v1_cloudtrace_proto #############

        set(googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_proto_DEPS_TARGET
                                      googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_devtools_cloudtrace_v1_cloudtrace_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_devtools_cloudtrace_v1_cloudtrace_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_devtools_cloudtrace_v1_cloudtrace_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_cloudtrace_v1_cloudtrace_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_cloudtrace_v1_cloudtrace_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_cloudtrace_v1_cloudtrace_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudtrace_v1_cloudtrace_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_devtools_testing_v1_testing_cc_proto #############

        set(googleapis_googleapis_google_devtools_testing_v1_testing_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_devtools_testing_v1_testing_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_devtools_testing_v1_testing_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_devtools_testing_v1_testing_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_devtools_testing_v1_testing_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_devtools_testing_v1_testing_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_devtools_testing_v1_testing_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_devtools_testing_v1_testing_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_testing_v1_testing_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_testing_v1_testing_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_testing_v1_testing_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_devtools_testing_v1_testing_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_devtools_testing_v1_testing_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_devtools_testing_v1_testing_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_devtools_testing_v1_testing_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_devtools_testing_v1_testing_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_devtools_testing_v1_testing_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_devtools_testing_v1_testing_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_testing_v1_testing_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_testing_v1_testing_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_devtools_testing_v1_testing_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_devtools_testing_v1_testing_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_devtools_testing_v1_testing_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_devtools_testing_v1_testing_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_testing_v1_testing_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_testing_v1_testing_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_testing_v1_testing_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_testing_v1_testing_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_testing_v1_testing_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_testing_v1_testing_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_testing_v1_testing_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_devtools_testing_v1_testing_proto #############

        set(googleapis_googleapis_google_devtools_testing_v1_testing_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_devtools_testing_v1_testing_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_devtools_testing_v1_testing_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_devtools_testing_v1_testing_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_devtools_testing_v1_testing_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_devtools_testing_v1_testing_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_devtools_testing_v1_testing_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_devtools_testing_v1_testing_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_testing_v1_testing_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_testing_v1_testing_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_testing_v1_testing_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_devtools_testing_v1_testing_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_devtools_testing_v1_testing_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_devtools_testing_v1_testing_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_devtools_testing_v1_testing_proto_DEPS_TARGET
                                      googleapis_googleapis_google_devtools_testing_v1_testing_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_devtools_testing_v1_testing_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_devtools_testing_v1_testing_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_testing_v1_testing_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_testing_v1_testing_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_devtools_testing_v1_testing_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_devtools_testing_v1_testing_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_devtools_testing_v1_testing_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_devtools_testing_v1_testing_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_testing_v1_testing_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_testing_v1_testing_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_testing_v1_testing_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_testing_v1_testing_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_testing_v1_testing_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_testing_v1_testing_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_testing_v1_testing_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_devtools_cloudbuild_v1_cloudbuild_cc_proto #############

        set(googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_devtools_cloudbuild_v1_cloudbuild_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_devtools_cloudbuild_v1_cloudbuild_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_devtools_cloudbuild_v1_cloudbuild_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_cloudbuild_v1_cloudbuild_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_cloudbuild_v1_cloudbuild_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_cloudbuild_v1_cloudbuild_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_devtools_cloudbuild_v1_cloudbuild_proto #############

        set(googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_proto_DEPS_TARGET
                                      googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_devtools_cloudbuild_v1_cloudbuild_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_devtools_cloudbuild_v1_cloudbuild_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_devtools_cloudbuild_v1_cloudbuild_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_cloudbuild_v1_cloudbuild_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_cloudbuild_v1_cloudbuild_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_cloudbuild_v1_cloudbuild_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_cloudbuild_v1_cloudbuild_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_devtools_source_v1_source_cc_proto #############

        set(googleapis_googleapis_google_devtools_source_v1_source_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_devtools_source_v1_source_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_devtools_source_v1_source_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_devtools_source_v1_source_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_devtools_source_v1_source_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_devtools_source_v1_source_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_devtools_source_v1_source_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_devtools_source_v1_source_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_source_v1_source_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_source_v1_source_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_source_v1_source_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_devtools_source_v1_source_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_devtools_source_v1_source_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_devtools_source_v1_source_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_devtools_source_v1_source_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_devtools_source_v1_source_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_devtools_source_v1_source_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_devtools_source_v1_source_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_source_v1_source_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_source_v1_source_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_devtools_source_v1_source_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_devtools_source_v1_source_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_devtools_source_v1_source_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_devtools_source_v1_source_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_source_v1_source_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_source_v1_source_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_source_v1_source_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_source_v1_source_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_source_v1_source_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_source_v1_source_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_source_v1_source_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_devtools_source_v1_source_proto #############

        set(googleapis_googleapis_google_devtools_source_v1_source_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_devtools_source_v1_source_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_devtools_source_v1_source_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_devtools_source_v1_source_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_devtools_source_v1_source_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_devtools_source_v1_source_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_devtools_source_v1_source_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_devtools_source_v1_source_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_source_v1_source_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_source_v1_source_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_source_v1_source_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_devtools_source_v1_source_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_devtools_source_v1_source_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_devtools_source_v1_source_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_devtools_source_v1_source_proto_DEPS_TARGET
                                      googleapis_googleapis_google_devtools_source_v1_source_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_devtools_source_v1_source_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_devtools_source_v1_source_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_source_v1_source_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_source_v1_source_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_devtools_source_v1_source_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_devtools_source_v1_source_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_devtools_source_v1_source_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_devtools_source_v1_source_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_source_v1_source_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_source_v1_source_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_source_v1_source_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_source_v1_source_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_source_v1_source_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_source_v1_source_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_source_v1_source_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_devtools_resultstore_v2_resultstore_cc_proto #############

        set(googleapis_googleapis_google_devtools_resultstore_v2_resultstore_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_devtools_resultstore_v2_resultstore_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_devtools_resultstore_v2_resultstore_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_devtools_resultstore_v2_resultstore_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_devtools_resultstore_v2_resultstore_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_devtools_resultstore_v2_resultstore_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_devtools_resultstore_v2_resultstore_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_devtools_resultstore_v2_resultstore_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_resultstore_v2_resultstore_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_resultstore_v2_resultstore_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_resultstore_v2_resultstore_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_devtools_resultstore_v2_resultstore_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_devtools_resultstore_v2_resultstore_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_devtools_resultstore_v2_resultstore_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_devtools_resultstore_v2_resultstore_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_devtools_resultstore_v2_resultstore_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_devtools_resultstore_v2_resultstore_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_devtools_resultstore_v2_resultstore_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_resultstore_v2_resultstore_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_resultstore_v2_resultstore_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_devtools_resultstore_v2_resultstore_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_devtools_resultstore_v2_resultstore_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_devtools_resultstore_v2_resultstore_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_devtools_resultstore_v2_resultstore_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_resultstore_v2_resultstore_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_resultstore_v2_resultstore_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_resultstore_v2_resultstore_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_resultstore_v2_resultstore_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_resultstore_v2_resultstore_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_resultstore_v2_resultstore_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_resultstore_v2_resultstore_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_devtools_resultstore_v2_resultstore_proto #############

        set(googleapis_googleapis_google_devtools_resultstore_v2_resultstore_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_devtools_resultstore_v2_resultstore_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_devtools_resultstore_v2_resultstore_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_devtools_resultstore_v2_resultstore_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_devtools_resultstore_v2_resultstore_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_devtools_resultstore_v2_resultstore_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_devtools_resultstore_v2_resultstore_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_devtools_resultstore_v2_resultstore_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_resultstore_v2_resultstore_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_resultstore_v2_resultstore_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_resultstore_v2_resultstore_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_devtools_resultstore_v2_resultstore_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_devtools_resultstore_v2_resultstore_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_devtools_resultstore_v2_resultstore_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_devtools_resultstore_v2_resultstore_proto_DEPS_TARGET
                                      googleapis_googleapis_google_devtools_resultstore_v2_resultstore_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_devtools_resultstore_v2_resultstore_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_devtools_resultstore_v2_resultstore_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_resultstore_v2_resultstore_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_resultstore_v2_resultstore_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_devtools_resultstore_v2_resultstore_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_devtools_resultstore_v2_resultstore_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_devtools_resultstore_v2_resultstore_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_devtools_resultstore_v2_resultstore_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_resultstore_v2_resultstore_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_resultstore_v2_resultstore_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_resultstore_v2_resultstore_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_resultstore_v2_resultstore_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_resultstore_v2_resultstore_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_devtools_resultstore_v2_resultstore_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_devtools_resultstore_v2_resultstore_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_iam_credentials_v1_credentials_cc_proto #############

        set(googleapis_googleapis_google_iam_credentials_v1_credentials_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_iam_credentials_v1_credentials_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_iam_credentials_v1_credentials_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_iam_credentials_v1_credentials_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_iam_credentials_v1_credentials_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_iam_credentials_v1_credentials_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_iam_credentials_v1_credentials_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_iam_credentials_v1_credentials_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_credentials_v1_credentials_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_credentials_v1_credentials_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_credentials_v1_credentials_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_iam_credentials_v1_credentials_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_iam_credentials_v1_credentials_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_iam_credentials_v1_credentials_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_iam_credentials_v1_credentials_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_iam_credentials_v1_credentials_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_iam_credentials_v1_credentials_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_iam_credentials_v1_credentials_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_credentials_v1_credentials_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_credentials_v1_credentials_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_iam_credentials_v1_credentials_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_iam_credentials_v1_credentials_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_iam_credentials_v1_credentials_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_iam_credentials_v1_credentials_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_credentials_v1_credentials_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_credentials_v1_credentials_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_credentials_v1_credentials_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_credentials_v1_credentials_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_credentials_v1_credentials_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_credentials_v1_credentials_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_credentials_v1_credentials_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_iam_credentials_v1_credentials_proto #############

        set(googleapis_googleapis_google_iam_credentials_v1_credentials_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_iam_credentials_v1_credentials_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_iam_credentials_v1_credentials_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_iam_credentials_v1_credentials_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_iam_credentials_v1_credentials_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_iam_credentials_v1_credentials_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_iam_credentials_v1_credentials_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_iam_credentials_v1_credentials_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_credentials_v1_credentials_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_credentials_v1_credentials_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_credentials_v1_credentials_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_iam_credentials_v1_credentials_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_iam_credentials_v1_credentials_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_iam_credentials_v1_credentials_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_iam_credentials_v1_credentials_proto_DEPS_TARGET
                                      googleapis_googleapis_google_iam_credentials_v1_credentials_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_iam_credentials_v1_credentials_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_iam_credentials_v1_credentials_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_credentials_v1_credentials_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_credentials_v1_credentials_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_iam_credentials_v1_credentials_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_iam_credentials_v1_credentials_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_iam_credentials_v1_credentials_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_iam_credentials_v1_credentials_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_credentials_v1_credentials_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_credentials_v1_credentials_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_credentials_v1_credentials_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_credentials_v1_credentials_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_credentials_v1_credentials_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_credentials_v1_credentials_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_credentials_v1_credentials_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_iam_v2_iam_cc_proto #############

        set(googleapis_googleapis_google_iam_v2_iam_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_iam_v2_iam_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_iam_v2_iam_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_iam_v2_iam_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_iam_v2_iam_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_iam_v2_iam_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_iam_v2_iam_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_iam_v2_iam_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v2_iam_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v2_iam_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v2_iam_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_iam_v2_iam_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_iam_v2_iam_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_iam_v2_iam_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_iam_v2_iam_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_iam_v2_iam_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_iam_v2_iam_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_iam_v2_iam_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v2_iam_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v2_iam_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_iam_v2_iam_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_iam_v2_iam_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_iam_v2_iam_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_iam_v2_iam_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v2_iam_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_v2_iam_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v2_iam_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_v2_iam_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v2_iam_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_v2_iam_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v2_iam_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_iam_v2_iam_proto #############

        set(googleapis_googleapis_google_iam_v2_iam_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_iam_v2_iam_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_iam_v2_iam_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_iam_v2_iam_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_iam_v2_iam_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_iam_v2_iam_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_iam_v2_iam_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_iam_v2_iam_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v2_iam_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v2_iam_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v2_iam_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_iam_v2_iam_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_iam_v2_iam_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_iam_v2_iam_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_iam_v2_iam_proto_DEPS_TARGET
                                      googleapis_googleapis_google_iam_v2_iam_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_iam_v2_iam_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_iam_v2_iam_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v2_iam_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v2_iam_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_iam_v2_iam_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_iam_v2_iam_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_iam_v2_iam_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_iam_v2_iam_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v2_iam_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_v2_iam_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v2_iam_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_v2_iam_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v2_iam_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_v2_iam_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v2_iam_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_iam_v2beta_iam_cc_proto #############

        set(googleapis_googleapis_google_iam_v2beta_iam_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_iam_v2beta_iam_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_iam_v2beta_iam_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_iam_v2beta_iam_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_iam_v2beta_iam_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_iam_v2beta_iam_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_iam_v2beta_iam_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_iam_v2beta_iam_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v2beta_iam_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v2beta_iam_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v2beta_iam_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_iam_v2beta_iam_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_iam_v2beta_iam_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_iam_v2beta_iam_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_iam_v2beta_iam_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_iam_v2beta_iam_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_iam_v2beta_iam_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_iam_v2beta_iam_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v2beta_iam_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v2beta_iam_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_iam_v2beta_iam_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_iam_v2beta_iam_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_iam_v2beta_iam_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_iam_v2beta_iam_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v2beta_iam_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_v2beta_iam_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v2beta_iam_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_v2beta_iam_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v2beta_iam_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_v2beta_iam_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v2beta_iam_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_iam_v2beta_iam_proto #############

        set(googleapis_googleapis_google_iam_v2beta_iam_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_iam_v2beta_iam_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_iam_v2beta_iam_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_iam_v2beta_iam_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_iam_v2beta_iam_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_iam_v2beta_iam_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_iam_v2beta_iam_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_iam_v2beta_iam_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v2beta_iam_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v2beta_iam_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v2beta_iam_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_iam_v2beta_iam_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_iam_v2beta_iam_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_iam_v2beta_iam_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_iam_v2beta_iam_proto_DEPS_TARGET
                                      googleapis_googleapis_google_iam_v2beta_iam_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_iam_v2beta_iam_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_iam_v2beta_iam_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v2beta_iam_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v2beta_iam_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_iam_v2beta_iam_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_iam_v2beta_iam_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_iam_v2beta_iam_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_iam_v2beta_iam_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v2beta_iam_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_v2beta_iam_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v2beta_iam_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_v2beta_iam_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v2beta_iam_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_v2beta_iam_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v2beta_iam_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_iam_v1_logging_logging_cc_proto #############

        set(googleapis_googleapis_google_iam_v1_logging_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_iam_v1_logging_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_iam_v1_logging_logging_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_iam_v1_logging_logging_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_iam_v1_logging_logging_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_iam_v1_logging_logging_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_iam_v1_logging_logging_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_iam_v1_logging_logging_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_logging_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_logging_logging_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_logging_logging_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_iam_v1_logging_logging_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_iam_v1_logging_logging_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_iam_v1_logging_logging_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_iam_v1_logging_logging_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_iam_v1_logging_logging_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_iam_v1_logging_logging_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_iam_v1_logging_logging_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_logging_logging_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_logging_logging_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_iam_v1_logging_logging_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_iam_v1_logging_logging_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_iam_v1_logging_logging_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_iam_v1_logging_logging_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_logging_logging_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_v1_logging_logging_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_logging_logging_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_v1_logging_logging_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_logging_logging_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_v1_logging_logging_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_logging_logging_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_iam_v1_logging_audit_data_proto #############

        set(googleapis_googleapis_google_iam_v1_logging_audit_data_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_iam_v1_logging_audit_data_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_iam_v1_logging_audit_data_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_iam_v1_logging_audit_data_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_iam_v1_logging_audit_data_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_iam_v1_logging_audit_data_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_iam_v1_logging_audit_data_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_iam_v1_logging_audit_data_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_logging_audit_data_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_logging_audit_data_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_logging_audit_data_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_iam_v1_logging_audit_data_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_iam_v1_logging_audit_data_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_iam_v1_logging_audit_data_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_iam_v1_logging_audit_data_proto_DEPS_TARGET
                                      googleapis_googleapis_google_iam_v1_logging_audit_data_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_iam_v1_logging_audit_data_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_iam_v1_logging_audit_data_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_logging_audit_data_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_logging_audit_data_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_iam_v1_logging_audit_data_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_iam_v1_logging_audit_data_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_iam_v1_logging_audit_data_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_iam_v1_logging_audit_data_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_logging_audit_data_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_v1_logging_audit_data_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_logging_audit_data_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_v1_logging_audit_data_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_logging_audit_data_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_v1_logging_audit_data_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_logging_audit_data_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_iam_v1_policy_cc_proto #############

        set(googleapis_googleapis_google_iam_v1_policy_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_iam_v1_policy_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_iam_v1_policy_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_iam_v1_policy_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_iam_v1_policy_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_iam_v1_policy_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_iam_v1_policy_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_iam_v1_policy_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_policy_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_policy_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_policy_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_iam_v1_policy_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_iam_v1_policy_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_iam_v1_policy_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_iam_v1_policy_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_iam_v1_policy_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_iam_v1_policy_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_iam_v1_policy_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_policy_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_policy_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_iam_v1_policy_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_iam_v1_policy_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_iam_v1_policy_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_iam_v1_policy_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_policy_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_v1_policy_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_policy_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_v1_policy_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_policy_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_v1_policy_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_policy_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_iam_v1_options_cc_proto #############

        set(googleapis_googleapis_google_iam_v1_options_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_iam_v1_options_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_iam_v1_options_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_iam_v1_options_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_iam_v1_options_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_iam_v1_options_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_iam_v1_options_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_iam_v1_options_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_options_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_options_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_options_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_iam_v1_options_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_iam_v1_options_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_iam_v1_options_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_iam_v1_options_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_iam_v1_options_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_iam_v1_options_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_iam_v1_options_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_options_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_options_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_iam_v1_options_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_iam_v1_options_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_iam_v1_options_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_iam_v1_options_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_options_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_v1_options_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_options_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_v1_options_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_options_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_v1_options_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_options_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_iam_v1_options_proto #############

        set(googleapis_googleapis_google_iam_v1_options_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_iam_v1_options_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_iam_v1_options_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_iam_v1_options_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_iam_v1_options_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_iam_v1_options_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_iam_v1_options_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_iam_v1_options_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_options_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_options_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_options_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_iam_v1_options_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_iam_v1_options_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_iam_v1_options_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_iam_v1_options_proto_DEPS_TARGET
                                      googleapis_googleapis_google_iam_v1_options_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_iam_v1_options_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_iam_v1_options_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_options_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_options_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_iam_v1_options_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_iam_v1_options_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_iam_v1_options_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_iam_v1_options_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_options_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_v1_options_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_options_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_v1_options_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_options_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_v1_options_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_options_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_iam_v1_policy_proto #############

        set(googleapis_googleapis_google_iam_v1_policy_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_iam_v1_policy_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_iam_v1_policy_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_iam_v1_policy_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_iam_v1_policy_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_iam_v1_policy_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_iam_v1_policy_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_iam_v1_policy_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_policy_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_policy_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_policy_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_iam_v1_policy_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_iam_v1_policy_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_iam_v1_policy_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_iam_v1_policy_proto_DEPS_TARGET
                                      googleapis_googleapis_google_iam_v1_policy_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_iam_v1_policy_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_iam_v1_policy_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_policy_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_policy_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_iam_v1_policy_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_iam_v1_policy_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_iam_v1_policy_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_iam_v1_policy_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_policy_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_v1_policy_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_policy_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_v1_policy_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_policy_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_iam_v1_policy_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_iam_v1_policy_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_datastore_admin_v1_admin_cc_proto #############

        set(googleapis_googleapis_google_datastore_admin_v1_admin_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_datastore_admin_v1_admin_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_datastore_admin_v1_admin_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_datastore_admin_v1_admin_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_datastore_admin_v1_admin_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_datastore_admin_v1_admin_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_datastore_admin_v1_admin_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_datastore_admin_v1_admin_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_datastore_admin_v1_admin_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_datastore_admin_v1_admin_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_datastore_admin_v1_admin_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_datastore_admin_v1_admin_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_datastore_admin_v1_admin_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_datastore_admin_v1_admin_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_datastore_admin_v1_admin_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_datastore_admin_v1_admin_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_datastore_admin_v1_admin_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_datastore_admin_v1_admin_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_datastore_admin_v1_admin_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_datastore_admin_v1_admin_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_datastore_admin_v1_admin_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_datastore_admin_v1_admin_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_datastore_admin_v1_admin_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_datastore_admin_v1_admin_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_datastore_admin_v1_admin_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_datastore_admin_v1_admin_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_datastore_admin_v1_admin_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_datastore_admin_v1_admin_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_datastore_admin_v1_admin_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_datastore_admin_v1_admin_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_datastore_admin_v1_admin_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_datastore_admin_v1_admin_proto #############

        set(googleapis_googleapis_google_datastore_admin_v1_admin_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_datastore_admin_v1_admin_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_datastore_admin_v1_admin_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_datastore_admin_v1_admin_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_datastore_admin_v1_admin_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_datastore_admin_v1_admin_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_datastore_admin_v1_admin_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_datastore_admin_v1_admin_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_datastore_admin_v1_admin_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_datastore_admin_v1_admin_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_datastore_admin_v1_admin_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_datastore_admin_v1_admin_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_datastore_admin_v1_admin_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_datastore_admin_v1_admin_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_datastore_admin_v1_admin_proto_DEPS_TARGET
                                      googleapis_googleapis_google_datastore_admin_v1_admin_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_datastore_admin_v1_admin_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_datastore_admin_v1_admin_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_datastore_admin_v1_admin_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_datastore_admin_v1_admin_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_datastore_admin_v1_admin_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_datastore_admin_v1_admin_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_datastore_admin_v1_admin_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_datastore_admin_v1_admin_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_datastore_admin_v1_admin_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_datastore_admin_v1_admin_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_datastore_admin_v1_admin_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_datastore_admin_v1_admin_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_datastore_admin_v1_admin_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_datastore_admin_v1_admin_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_datastore_admin_v1_admin_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_datastore_v1_datastore_cc_proto #############

        set(googleapis_googleapis_google_datastore_v1_datastore_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_datastore_v1_datastore_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_datastore_v1_datastore_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_datastore_v1_datastore_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_datastore_v1_datastore_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_datastore_v1_datastore_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_datastore_v1_datastore_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_datastore_v1_datastore_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_datastore_v1_datastore_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_datastore_v1_datastore_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_datastore_v1_datastore_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_datastore_v1_datastore_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_datastore_v1_datastore_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_datastore_v1_datastore_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_datastore_v1_datastore_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_datastore_v1_datastore_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_datastore_v1_datastore_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_datastore_v1_datastore_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_datastore_v1_datastore_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_datastore_v1_datastore_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_datastore_v1_datastore_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_datastore_v1_datastore_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_datastore_v1_datastore_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_datastore_v1_datastore_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_datastore_v1_datastore_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_datastore_v1_datastore_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_datastore_v1_datastore_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_datastore_v1_datastore_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_datastore_v1_datastore_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_datastore_v1_datastore_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_datastore_v1_datastore_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_datastore_v1_datastore_proto #############

        set(googleapis_googleapis_google_datastore_v1_datastore_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_datastore_v1_datastore_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_datastore_v1_datastore_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_datastore_v1_datastore_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_datastore_v1_datastore_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_datastore_v1_datastore_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_datastore_v1_datastore_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_datastore_v1_datastore_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_datastore_v1_datastore_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_datastore_v1_datastore_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_datastore_v1_datastore_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_datastore_v1_datastore_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_datastore_v1_datastore_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_datastore_v1_datastore_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_datastore_v1_datastore_proto_DEPS_TARGET
                                      googleapis_googleapis_google_datastore_v1_datastore_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_datastore_v1_datastore_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_datastore_v1_datastore_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_datastore_v1_datastore_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_datastore_v1_datastore_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_datastore_v1_datastore_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_datastore_v1_datastore_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_datastore_v1_datastore_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_datastore_v1_datastore_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_datastore_v1_datastore_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_datastore_v1_datastore_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_datastore_v1_datastore_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_datastore_v1_datastore_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_datastore_v1_datastore_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_datastore_v1_datastore_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_datastore_v1_datastore_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_container_v1alpha1_container_cc_proto #############

        set(googleapis_googleapis_google_container_v1alpha1_container_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_container_v1alpha1_container_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_container_v1alpha1_container_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_container_v1alpha1_container_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_container_v1alpha1_container_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_container_v1alpha1_container_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_container_v1alpha1_container_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_container_v1alpha1_container_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1alpha1_container_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1alpha1_container_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1alpha1_container_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_container_v1alpha1_container_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_container_v1alpha1_container_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_container_v1alpha1_container_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_container_v1alpha1_container_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_container_v1alpha1_container_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_container_v1alpha1_container_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_container_v1alpha1_container_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1alpha1_container_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1alpha1_container_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_container_v1alpha1_container_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_container_v1alpha1_container_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_container_v1alpha1_container_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_container_v1alpha1_container_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1alpha1_container_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_container_v1alpha1_container_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1alpha1_container_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_container_v1alpha1_container_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1alpha1_container_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_container_v1alpha1_container_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1alpha1_container_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_container_v1alpha1_container_proto #############

        set(googleapis_googleapis_google_container_v1alpha1_container_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_container_v1alpha1_container_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_container_v1alpha1_container_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_container_v1alpha1_container_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_container_v1alpha1_container_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_container_v1alpha1_container_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_container_v1alpha1_container_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_container_v1alpha1_container_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1alpha1_container_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1alpha1_container_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1alpha1_container_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_container_v1alpha1_container_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_container_v1alpha1_container_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_container_v1alpha1_container_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_container_v1alpha1_container_proto_DEPS_TARGET
                                      googleapis_googleapis_google_container_v1alpha1_container_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_container_v1alpha1_container_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_container_v1alpha1_container_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1alpha1_container_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1alpha1_container_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_container_v1alpha1_container_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_container_v1alpha1_container_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_container_v1alpha1_container_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_container_v1alpha1_container_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1alpha1_container_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_container_v1alpha1_container_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1alpha1_container_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_container_v1alpha1_container_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1alpha1_container_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_container_v1alpha1_container_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1alpha1_container_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_container_v1beta1_container_cc_proto #############

        set(googleapis_googleapis_google_container_v1beta1_container_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_container_v1beta1_container_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_container_v1beta1_container_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_container_v1beta1_container_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_container_v1beta1_container_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_container_v1beta1_container_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_container_v1beta1_container_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_container_v1beta1_container_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1beta1_container_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1beta1_container_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1beta1_container_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_container_v1beta1_container_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_container_v1beta1_container_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_container_v1beta1_container_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_container_v1beta1_container_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_container_v1beta1_container_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_container_v1beta1_container_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_container_v1beta1_container_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1beta1_container_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1beta1_container_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_container_v1beta1_container_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_container_v1beta1_container_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_container_v1beta1_container_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_container_v1beta1_container_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1beta1_container_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_container_v1beta1_container_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1beta1_container_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_container_v1beta1_container_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1beta1_container_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_container_v1beta1_container_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1beta1_container_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_container_v1beta1_container_proto #############

        set(googleapis_googleapis_google_container_v1beta1_container_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_container_v1beta1_container_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_container_v1beta1_container_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_container_v1beta1_container_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_container_v1beta1_container_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_container_v1beta1_container_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_container_v1beta1_container_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_container_v1beta1_container_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1beta1_container_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1beta1_container_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1beta1_container_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_container_v1beta1_container_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_container_v1beta1_container_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_container_v1beta1_container_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_container_v1beta1_container_proto_DEPS_TARGET
                                      googleapis_googleapis_google_container_v1beta1_container_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_container_v1beta1_container_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_container_v1beta1_container_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1beta1_container_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1beta1_container_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_container_v1beta1_container_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_container_v1beta1_container_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_container_v1beta1_container_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_container_v1beta1_container_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1beta1_container_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_container_v1beta1_container_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1beta1_container_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_container_v1beta1_container_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1beta1_container_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_container_v1beta1_container_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1beta1_container_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_container_v1_container_cc_proto #############

        set(googleapis_googleapis_google_container_v1_container_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_container_v1_container_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_container_v1_container_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_container_v1_container_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_container_v1_container_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_container_v1_container_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_container_v1_container_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_container_v1_container_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1_container_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1_container_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1_container_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_container_v1_container_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_container_v1_container_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_container_v1_container_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_container_v1_container_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_container_v1_container_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_container_v1_container_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_container_v1_container_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1_container_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1_container_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_container_v1_container_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_container_v1_container_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_container_v1_container_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_container_v1_container_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1_container_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_container_v1_container_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1_container_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_container_v1_container_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1_container_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_container_v1_container_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1_container_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_container_v1_container_proto #############

        set(googleapis_googleapis_google_container_v1_container_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_container_v1_container_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_container_v1_container_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_container_v1_container_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_container_v1_container_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_container_v1_container_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_container_v1_container_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_container_v1_container_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1_container_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1_container_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1_container_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_container_v1_container_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_container_v1_container_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_container_v1_container_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_container_v1_container_proto_DEPS_TARGET
                                      googleapis_googleapis_google_container_v1_container_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_container_v1_container_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_container_v1_container_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1_container_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1_container_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_container_v1_container_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_container_v1_container_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_container_v1_container_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_container_v1_container_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1_container_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_container_v1_container_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1_container_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_container_v1_container_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1_container_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_container_v1_container_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_container_v1_container_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_partner_aistreams_v1alpha1_aistreams_cc_proto #############

        set(googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_partner_aistreams_v1alpha1_aistreams_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_partner_aistreams_v1alpha1_aistreams_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_partner_aistreams_v1alpha1_aistreams_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_partner_aistreams_v1alpha1_aistreams_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_partner_aistreams_v1alpha1_aistreams_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_partner_aistreams_v1alpha1_aistreams_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_partner_aistreams_v1alpha1_aistreams_proto #############

        set(googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_proto_DEPS_TARGET
                                      googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_partner_aistreams_v1alpha1_aistreams_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_partner_aistreams_v1alpha1_aistreams_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_partner_aistreams_v1alpha1_aistreams_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_partner_aistreams_v1alpha1_aistreams_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_partner_aistreams_v1alpha1_aistreams_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_partner_aistreams_v1alpha1_aistreams_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_partner_aistreams_v1alpha1_aistreams_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_longrunning_longrunning_cc_proto #############

        set(googleapis_googleapis_google_longrunning_longrunning_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_longrunning_longrunning_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_longrunning_longrunning_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_longrunning_longrunning_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_longrunning_longrunning_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_longrunning_longrunning_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_longrunning_longrunning_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_longrunning_longrunning_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_longrunning_longrunning_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_longrunning_longrunning_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_longrunning_longrunning_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_longrunning_longrunning_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_longrunning_longrunning_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_longrunning_longrunning_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_longrunning_longrunning_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_longrunning_longrunning_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_longrunning_longrunning_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_longrunning_longrunning_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_longrunning_longrunning_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_longrunning_longrunning_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_longrunning_longrunning_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_longrunning_longrunning_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_longrunning_longrunning_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_longrunning_longrunning_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_longrunning_longrunning_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_longrunning_longrunning_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_longrunning_longrunning_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_longrunning_longrunning_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_longrunning_longrunning_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_longrunning_longrunning_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_longrunning_longrunning_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_longrunning_operations_proto #############

        set(googleapis_googleapis_google_longrunning_operations_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_longrunning_operations_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_longrunning_operations_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_longrunning_operations_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_longrunning_operations_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_longrunning_operations_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_longrunning_operations_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_longrunning_operations_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_longrunning_operations_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_longrunning_operations_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_longrunning_operations_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_longrunning_operations_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_longrunning_operations_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_longrunning_operations_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_longrunning_operations_proto_DEPS_TARGET
                                      googleapis_googleapis_google_longrunning_operations_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_longrunning_operations_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_longrunning_operations_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_longrunning_operations_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_longrunning_operations_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_longrunning_operations_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_longrunning_operations_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_longrunning_operations_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_longrunning_operations_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_longrunning_operations_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_longrunning_operations_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_longrunning_operations_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_longrunning_operations_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_longrunning_operations_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_longrunning_operations_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_longrunning_operations_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_chromeos_uidetection_v1_uidetection_cc_proto #############

        set(googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_chromeos_uidetection_v1_uidetection_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_chromeos_uidetection_v1_uidetection_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_chromeos_uidetection_v1_uidetection_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_chromeos_uidetection_v1_uidetection_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_chromeos_uidetection_v1_uidetection_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_chromeos_uidetection_v1_uidetection_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_chromeos_uidetection_v1_uidetection_proto #############

        set(googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_proto_DEPS_TARGET
                                      googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_chromeos_uidetection_v1_uidetection_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_chromeos_uidetection_v1_uidetection_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_chromeos_uidetection_v1_uidetection_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_chromeos_uidetection_v1_uidetection_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_chromeos_uidetection_v1_uidetection_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_chromeos_uidetection_v1_uidetection_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_chromeos_uidetection_v1_uidetection_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_appengine_logging_v1_logging_cc_proto #############

        set(googleapis_googleapis_google_appengine_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_appengine_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_appengine_logging_v1_logging_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_appengine_logging_v1_logging_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_appengine_logging_v1_logging_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_appengine_logging_v1_logging_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_appengine_logging_v1_logging_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_appengine_logging_v1_logging_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_logging_v1_logging_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_logging_v1_logging_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_appengine_logging_v1_logging_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_appengine_logging_v1_logging_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_appengine_logging_v1_logging_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_appengine_logging_v1_logging_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_appengine_logging_v1_logging_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_appengine_logging_v1_logging_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_appengine_logging_v1_logging_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_logging_v1_logging_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_logging_v1_logging_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_appengine_logging_v1_logging_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_appengine_logging_v1_logging_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_appengine_logging_v1_logging_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_appengine_logging_v1_logging_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_logging_v1_logging_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_appengine_logging_v1_logging_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_logging_v1_logging_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_appengine_logging_v1_logging_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_logging_v1_logging_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_appengine_logging_v1_logging_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_logging_v1_logging_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_appengine_logging_v1_logging_proto #############

        set(googleapis_googleapis_google_appengine_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_appengine_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_appengine_logging_v1_logging_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_appengine_logging_v1_logging_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_appengine_logging_v1_logging_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_appengine_logging_v1_logging_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_appengine_logging_v1_logging_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_appengine_logging_v1_logging_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_logging_v1_logging_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_logging_v1_logging_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_appengine_logging_v1_logging_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_appengine_logging_v1_logging_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_appengine_logging_v1_logging_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_appengine_logging_v1_logging_proto_DEPS_TARGET
                                      googleapis_googleapis_google_appengine_logging_v1_logging_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_appengine_logging_v1_logging_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_appengine_logging_v1_logging_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_logging_v1_logging_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_logging_v1_logging_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_appengine_logging_v1_logging_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_appengine_logging_v1_logging_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_appengine_logging_v1_logging_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_appengine_logging_v1_logging_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_logging_v1_logging_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_appengine_logging_v1_logging_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_logging_v1_logging_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_appengine_logging_v1_logging_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_logging_v1_logging_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_appengine_logging_v1_logging_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_logging_v1_logging_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_appengine_legacy_legacy_cc_proto #############

        set(googleapis_googleapis_google_appengine_legacy_legacy_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_appengine_legacy_legacy_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_appengine_legacy_legacy_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_appengine_legacy_legacy_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_appengine_legacy_legacy_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_appengine_legacy_legacy_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_appengine_legacy_legacy_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_appengine_legacy_legacy_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_legacy_legacy_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_legacy_legacy_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_legacy_legacy_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_appengine_legacy_legacy_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_appengine_legacy_legacy_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_appengine_legacy_legacy_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_appengine_legacy_legacy_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_appengine_legacy_legacy_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_appengine_legacy_legacy_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_appengine_legacy_legacy_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_legacy_legacy_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_legacy_legacy_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_appengine_legacy_legacy_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_appengine_legacy_legacy_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_appengine_legacy_legacy_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_appengine_legacy_legacy_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_legacy_legacy_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_appengine_legacy_legacy_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_legacy_legacy_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_appengine_legacy_legacy_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_legacy_legacy_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_appengine_legacy_legacy_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_legacy_legacy_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_appengine_legacy_legacy_proto #############

        set(googleapis_googleapis_google_appengine_legacy_legacy_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_appengine_legacy_legacy_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_appengine_legacy_legacy_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_appengine_legacy_legacy_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_appengine_legacy_legacy_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_appengine_legacy_legacy_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_appengine_legacy_legacy_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_appengine_legacy_legacy_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_legacy_legacy_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_legacy_legacy_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_legacy_legacy_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_appengine_legacy_legacy_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_appengine_legacy_legacy_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_appengine_legacy_legacy_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_appengine_legacy_legacy_proto_DEPS_TARGET
                                      googleapis_googleapis_google_appengine_legacy_legacy_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_appengine_legacy_legacy_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_appengine_legacy_legacy_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_legacy_legacy_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_legacy_legacy_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_appengine_legacy_legacy_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_appengine_legacy_legacy_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_appengine_legacy_legacy_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_appengine_legacy_legacy_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_legacy_legacy_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_appengine_legacy_legacy_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_legacy_legacy_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_appengine_legacy_legacy_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_legacy_legacy_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_appengine_legacy_legacy_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_appengine_legacy_legacy_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_example_library_v1_library_cc_proto #############

        set(googleapis_googleapis_google_example_library_v1_library_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_example_library_v1_library_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_example_library_v1_library_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_example_library_v1_library_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_example_library_v1_library_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_example_library_v1_library_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_example_library_v1_library_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_example_library_v1_library_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_example_library_v1_library_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_example_library_v1_library_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_example_library_v1_library_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_example_library_v1_library_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_example_library_v1_library_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_example_library_v1_library_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_example_library_v1_library_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_example_library_v1_library_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_example_library_v1_library_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_example_library_v1_library_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_example_library_v1_library_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_example_library_v1_library_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_example_library_v1_library_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_example_library_v1_library_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_example_library_v1_library_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_example_library_v1_library_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_example_library_v1_library_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_example_library_v1_library_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_example_library_v1_library_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_example_library_v1_library_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_example_library_v1_library_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_example_library_v1_library_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_example_library_v1_library_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_example_library_v1_library_proto #############

        set(googleapis_googleapis_google_example_library_v1_library_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_example_library_v1_library_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_example_library_v1_library_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_example_library_v1_library_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_example_library_v1_library_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_example_library_v1_library_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_example_library_v1_library_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_example_library_v1_library_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_example_library_v1_library_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_example_library_v1_library_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_example_library_v1_library_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_example_library_v1_library_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_example_library_v1_library_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_example_library_v1_library_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_example_library_v1_library_proto_DEPS_TARGET
                                      googleapis_googleapis_google_example_library_v1_library_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_example_library_v1_library_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_example_library_v1_library_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_example_library_v1_library_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_example_library_v1_library_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_example_library_v1_library_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_example_library_v1_library_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_example_library_v1_library_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_example_library_v1_library_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_example_library_v1_library_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_example_library_v1_library_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_example_library_v1_library_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_example_library_v1_library_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_example_library_v1_library_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_example_library_v1_library_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_example_library_v1_library_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_firestore_bundle_firestore_bundle_cc_proto #############

        set(googleapis_googleapis_google_firestore_bundle_firestore_bundle_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_firestore_bundle_firestore_bundle_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_firestore_bundle_firestore_bundle_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_firestore_bundle_firestore_bundle_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_firestore_bundle_firestore_bundle_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_firestore_bundle_firestore_bundle_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_firestore_bundle_firestore_bundle_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_firestore_bundle_firestore_bundle_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_bundle_firestore_bundle_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_bundle_firestore_bundle_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_bundle_firestore_bundle_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_firestore_bundle_firestore_bundle_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_firestore_bundle_firestore_bundle_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_firestore_bundle_firestore_bundle_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_firestore_bundle_firestore_bundle_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_firestore_bundle_firestore_bundle_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_firestore_bundle_firestore_bundle_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_firestore_bundle_firestore_bundle_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_bundle_firestore_bundle_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_bundle_firestore_bundle_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_firestore_bundle_firestore_bundle_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_firestore_bundle_firestore_bundle_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_firestore_bundle_firestore_bundle_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_firestore_bundle_firestore_bundle_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_bundle_firestore_bundle_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_firestore_bundle_firestore_bundle_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_bundle_firestore_bundle_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_firestore_bundle_firestore_bundle_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_bundle_firestore_bundle_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_firestore_bundle_firestore_bundle_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_bundle_firestore_bundle_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_firestore_bundle_firestore_bundle_proto #############

        set(googleapis_googleapis_google_firestore_bundle_firestore_bundle_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_firestore_bundle_firestore_bundle_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_firestore_bundle_firestore_bundle_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_firestore_bundle_firestore_bundle_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_firestore_bundle_firestore_bundle_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_firestore_bundle_firestore_bundle_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_firestore_bundle_firestore_bundle_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_firestore_bundle_firestore_bundle_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_bundle_firestore_bundle_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_bundle_firestore_bundle_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_bundle_firestore_bundle_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_firestore_bundle_firestore_bundle_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_firestore_bundle_firestore_bundle_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_firestore_bundle_firestore_bundle_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_firestore_bundle_firestore_bundle_proto_DEPS_TARGET
                                      googleapis_googleapis_google_firestore_bundle_firestore_bundle_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_firestore_bundle_firestore_bundle_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_firestore_bundle_firestore_bundle_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_bundle_firestore_bundle_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_bundle_firestore_bundle_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_firestore_bundle_firestore_bundle_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_firestore_bundle_firestore_bundle_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_firestore_bundle_firestore_bundle_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_firestore_bundle_firestore_bundle_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_bundle_firestore_bundle_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_firestore_bundle_firestore_bundle_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_bundle_firestore_bundle_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_firestore_bundle_firestore_bundle_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_bundle_firestore_bundle_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_firestore_bundle_firestore_bundle_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_bundle_firestore_bundle_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_firestore_v1_firestore_cc_proto #############

        set(googleapis_googleapis_google_firestore_v1_firestore_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_firestore_v1_firestore_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_firestore_v1_firestore_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_firestore_v1_firestore_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_firestore_v1_firestore_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_firestore_v1_firestore_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_firestore_v1_firestore_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_firestore_v1_firestore_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_v1_firestore_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_v1_firestore_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_v1_firestore_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_firestore_v1_firestore_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_firestore_v1_firestore_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_firestore_v1_firestore_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_firestore_v1_firestore_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_firestore_v1_firestore_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_firestore_v1_firestore_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_firestore_v1_firestore_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_v1_firestore_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_v1_firestore_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_firestore_v1_firestore_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_firestore_v1_firestore_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_firestore_v1_firestore_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_firestore_v1_firestore_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_v1_firestore_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_firestore_v1_firestore_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_v1_firestore_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_firestore_v1_firestore_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_v1_firestore_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_firestore_v1_firestore_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_v1_firestore_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_firestore_v1_firestore_proto #############

        set(googleapis_googleapis_google_firestore_v1_firestore_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_firestore_v1_firestore_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_firestore_v1_firestore_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_firestore_v1_firestore_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_firestore_v1_firestore_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_firestore_v1_firestore_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_firestore_v1_firestore_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_firestore_v1_firestore_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_v1_firestore_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_v1_firestore_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_v1_firestore_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_firestore_v1_firestore_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_firestore_v1_firestore_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_firestore_v1_firestore_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_firestore_v1_firestore_proto_DEPS_TARGET
                                      googleapis_googleapis_google_firestore_v1_firestore_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_firestore_v1_firestore_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_firestore_v1_firestore_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_v1_firestore_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_v1_firestore_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_firestore_v1_firestore_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_firestore_v1_firestore_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_firestore_v1_firestore_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_firestore_v1_firestore_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_v1_firestore_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_firestore_v1_firestore_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_v1_firestore_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_firestore_v1_firestore_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_v1_firestore_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_firestore_v1_firestore_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_firestore_v1_firestore_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_identity_accesscontextmanager_type_type_cc_proto #############

        set(googleapis_googleapis_google_identity_accesscontextmanager_type_type_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_identity_accesscontextmanager_type_type_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_identity_accesscontextmanager_type_type_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_identity_accesscontextmanager_type_type_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_identity_accesscontextmanager_type_type_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_identity_accesscontextmanager_type_type_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_identity_accesscontextmanager_type_type_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_identity_accesscontextmanager_type_type_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_identity_accesscontextmanager_type_type_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_identity_accesscontextmanager_type_type_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_identity_accesscontextmanager_type_type_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_identity_accesscontextmanager_type_type_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_identity_accesscontextmanager_type_type_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_identity_accesscontextmanager_type_type_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_identity_accesscontextmanager_type_type_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_identity_accesscontextmanager_type_type_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_identity_accesscontextmanager_type_type_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_identity_accesscontextmanager_type_type_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_identity_accesscontextmanager_type_type_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_identity_accesscontextmanager_type_type_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_identity_accesscontextmanager_type_type_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_identity_accesscontextmanager_type_type_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_identity_accesscontextmanager_type_type_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_identity_accesscontextmanager_type_type_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_identity_accesscontextmanager_type_type_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_identity_accesscontextmanager_type_type_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_identity_accesscontextmanager_type_type_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_identity_accesscontextmanager_type_type_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_identity_accesscontextmanager_type_type_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_identity_accesscontextmanager_type_type_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_identity_accesscontextmanager_type_type_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_identity_accesscontextmanager_type_type_proto #############

        set(googleapis_googleapis_google_identity_accesscontextmanager_type_type_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_identity_accesscontextmanager_type_type_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_identity_accesscontextmanager_type_type_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_identity_accesscontextmanager_type_type_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_identity_accesscontextmanager_type_type_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_identity_accesscontextmanager_type_type_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_identity_accesscontextmanager_type_type_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_identity_accesscontextmanager_type_type_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_identity_accesscontextmanager_type_type_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_identity_accesscontextmanager_type_type_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_identity_accesscontextmanager_type_type_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_identity_accesscontextmanager_type_type_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_identity_accesscontextmanager_type_type_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_identity_accesscontextmanager_type_type_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_identity_accesscontextmanager_type_type_proto_DEPS_TARGET
                                      googleapis_googleapis_google_identity_accesscontextmanager_type_type_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_identity_accesscontextmanager_type_type_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_identity_accesscontextmanager_type_type_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_identity_accesscontextmanager_type_type_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_identity_accesscontextmanager_type_type_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_identity_accesscontextmanager_type_type_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_identity_accesscontextmanager_type_type_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_identity_accesscontextmanager_type_type_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_identity_accesscontextmanager_type_type_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_identity_accesscontextmanager_type_type_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_identity_accesscontextmanager_type_type_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_identity_accesscontextmanager_type_type_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_identity_accesscontextmanager_type_type_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_identity_accesscontextmanager_type_type_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_identity_accesscontextmanager_type_type_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_identity_accesscontextmanager_type_type_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_privacy_dlp_v2_dlp_cc_proto #############

        set(googleapis_googleapis_google_privacy_dlp_v2_dlp_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_privacy_dlp_v2_dlp_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_privacy_dlp_v2_dlp_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_privacy_dlp_v2_dlp_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_privacy_dlp_v2_dlp_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_privacy_dlp_v2_dlp_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_privacy_dlp_v2_dlp_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_privacy_dlp_v2_dlp_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_privacy_dlp_v2_dlp_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_privacy_dlp_v2_dlp_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_privacy_dlp_v2_dlp_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_privacy_dlp_v2_dlp_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_privacy_dlp_v2_dlp_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_privacy_dlp_v2_dlp_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_privacy_dlp_v2_dlp_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_privacy_dlp_v2_dlp_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_privacy_dlp_v2_dlp_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_privacy_dlp_v2_dlp_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_privacy_dlp_v2_dlp_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_privacy_dlp_v2_dlp_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_privacy_dlp_v2_dlp_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_privacy_dlp_v2_dlp_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_privacy_dlp_v2_dlp_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_privacy_dlp_v2_dlp_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_privacy_dlp_v2_dlp_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_privacy_dlp_v2_dlp_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_privacy_dlp_v2_dlp_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_privacy_dlp_v2_dlp_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_privacy_dlp_v2_dlp_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_privacy_dlp_v2_dlp_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_privacy_dlp_v2_dlp_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_privacy_dlp_v2_dlp_proto #############

        set(googleapis_googleapis_google_privacy_dlp_v2_dlp_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_privacy_dlp_v2_dlp_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_privacy_dlp_v2_dlp_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_privacy_dlp_v2_dlp_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_privacy_dlp_v2_dlp_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_privacy_dlp_v2_dlp_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_privacy_dlp_v2_dlp_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_privacy_dlp_v2_dlp_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_privacy_dlp_v2_dlp_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_privacy_dlp_v2_dlp_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_privacy_dlp_v2_dlp_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_privacy_dlp_v2_dlp_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_privacy_dlp_v2_dlp_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_privacy_dlp_v2_dlp_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_privacy_dlp_v2_dlp_proto_DEPS_TARGET
                                      googleapis_googleapis_google_privacy_dlp_v2_dlp_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_privacy_dlp_v2_dlp_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_privacy_dlp_v2_dlp_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_privacy_dlp_v2_dlp_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_privacy_dlp_v2_dlp_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_privacy_dlp_v2_dlp_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_privacy_dlp_v2_dlp_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_privacy_dlp_v2_dlp_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_privacy_dlp_v2_dlp_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_privacy_dlp_v2_dlp_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_privacy_dlp_v2_dlp_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_privacy_dlp_v2_dlp_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_privacy_dlp_v2_dlp_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_privacy_dlp_v2_dlp_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_privacy_dlp_v2_dlp_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_privacy_dlp_v2_dlp_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_bigtable_v2_bigtable_cc_proto #############

        set(googleapis_googleapis_google_bigtable_v2_bigtable_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_bigtable_v2_bigtable_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_bigtable_v2_bigtable_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_bigtable_v2_bigtable_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_bigtable_v2_bigtable_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_bigtable_v2_bigtable_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_bigtable_v2_bigtable_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_bigtable_v2_bigtable_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_bigtable_v2_bigtable_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_bigtable_v2_bigtable_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_bigtable_v2_bigtable_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_bigtable_v2_bigtable_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_bigtable_v2_bigtable_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_bigtable_v2_bigtable_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_bigtable_v2_bigtable_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_bigtable_v2_bigtable_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_bigtable_v2_bigtable_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_bigtable_v2_bigtable_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_bigtable_v2_bigtable_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_bigtable_v2_bigtable_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_bigtable_v2_bigtable_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_bigtable_v2_bigtable_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_bigtable_v2_bigtable_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_bigtable_v2_bigtable_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_bigtable_v2_bigtable_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_bigtable_v2_bigtable_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_bigtable_v2_bigtable_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_bigtable_v2_bigtable_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_bigtable_v2_bigtable_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_bigtable_v2_bigtable_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_bigtable_v2_bigtable_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_bigtable_v2_bigtable_proto #############

        set(googleapis_googleapis_google_bigtable_v2_bigtable_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_bigtable_v2_bigtable_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_bigtable_v2_bigtable_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_bigtable_v2_bigtable_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_bigtable_v2_bigtable_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_bigtable_v2_bigtable_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_bigtable_v2_bigtable_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_bigtable_v2_bigtable_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_bigtable_v2_bigtable_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_bigtable_v2_bigtable_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_bigtable_v2_bigtable_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_bigtable_v2_bigtable_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_bigtable_v2_bigtable_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_bigtable_v2_bigtable_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_bigtable_v2_bigtable_proto_DEPS_TARGET
                                      googleapis_googleapis_google_bigtable_v2_bigtable_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_bigtable_v2_bigtable_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_bigtable_v2_bigtable_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_bigtable_v2_bigtable_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_bigtable_v2_bigtable_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_bigtable_v2_bigtable_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_bigtable_v2_bigtable_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_bigtable_v2_bigtable_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_bigtable_v2_bigtable_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_bigtable_v2_bigtable_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_bigtable_v2_bigtable_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_bigtable_v2_bigtable_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_bigtable_v2_bigtable_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_bigtable_v2_bigtable_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_bigtable_v2_bigtable_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_bigtable_v2_bigtable_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_maps_routes_v1_routes_cc_proto #############

        set(googleapis_googleapis_google_maps_routes_v1_routes_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_maps_routes_v1_routes_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_maps_routes_v1_routes_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_maps_routes_v1_routes_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_maps_routes_v1_routes_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_maps_routes_v1_routes_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_maps_routes_v1_routes_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_maps_routes_v1_routes_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_routes_v1_routes_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_routes_v1_routes_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_routes_v1_routes_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_maps_routes_v1_routes_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_maps_routes_v1_routes_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_maps_routes_v1_routes_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_maps_routes_v1_routes_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_maps_routes_v1_routes_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_maps_routes_v1_routes_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_maps_routes_v1_routes_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_routes_v1_routes_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_routes_v1_routes_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_maps_routes_v1_routes_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_maps_routes_v1_routes_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_maps_routes_v1_routes_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_maps_routes_v1_routes_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_routes_v1_routes_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_maps_routes_v1_routes_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_routes_v1_routes_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_maps_routes_v1_routes_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_routes_v1_routes_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_maps_routes_v1_routes_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_routes_v1_routes_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_maps_routes_v1_routes_proto #############

        set(googleapis_googleapis_google_maps_routes_v1_routes_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_maps_routes_v1_routes_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_maps_routes_v1_routes_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_maps_routes_v1_routes_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_maps_routes_v1_routes_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_maps_routes_v1_routes_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_maps_routes_v1_routes_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_maps_routes_v1_routes_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_routes_v1_routes_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_routes_v1_routes_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_routes_v1_routes_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_maps_routes_v1_routes_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_maps_routes_v1_routes_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_maps_routes_v1_routes_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_maps_routes_v1_routes_proto_DEPS_TARGET
                                      googleapis_googleapis_google_maps_routes_v1_routes_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_maps_routes_v1_routes_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_maps_routes_v1_routes_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_routes_v1_routes_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_routes_v1_routes_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_maps_routes_v1_routes_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_maps_routes_v1_routes_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_maps_routes_v1_routes_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_maps_routes_v1_routes_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_routes_v1_routes_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_maps_routes_v1_routes_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_routes_v1_routes_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_maps_routes_v1_routes_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_routes_v1_routes_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_maps_routes_v1_routes_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_routes_v1_routes_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_maps_routing_v2_routing_cc_proto #############

        set(googleapis_googleapis_google_maps_routing_v2_routing_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_maps_routing_v2_routing_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_maps_routing_v2_routing_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_maps_routing_v2_routing_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_maps_routing_v2_routing_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_maps_routing_v2_routing_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_maps_routing_v2_routing_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_maps_routing_v2_routing_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_routing_v2_routing_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_routing_v2_routing_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_routing_v2_routing_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_maps_routing_v2_routing_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_maps_routing_v2_routing_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_maps_routing_v2_routing_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_maps_routing_v2_routing_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_maps_routing_v2_routing_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_maps_routing_v2_routing_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_maps_routing_v2_routing_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_routing_v2_routing_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_routing_v2_routing_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_maps_routing_v2_routing_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_maps_routing_v2_routing_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_maps_routing_v2_routing_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_maps_routing_v2_routing_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_routing_v2_routing_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_maps_routing_v2_routing_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_routing_v2_routing_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_maps_routing_v2_routing_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_routing_v2_routing_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_maps_routing_v2_routing_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_routing_v2_routing_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_maps_routing_v2_routing_proto #############

        set(googleapis_googleapis_google_maps_routing_v2_routing_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_maps_routing_v2_routing_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_maps_routing_v2_routing_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_maps_routing_v2_routing_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_maps_routing_v2_routing_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_maps_routing_v2_routing_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_maps_routing_v2_routing_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_maps_routing_v2_routing_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_routing_v2_routing_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_routing_v2_routing_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_routing_v2_routing_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_maps_routing_v2_routing_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_maps_routing_v2_routing_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_maps_routing_v2_routing_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_maps_routing_v2_routing_proto_DEPS_TARGET
                                      googleapis_googleapis_google_maps_routing_v2_routing_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_maps_routing_v2_routing_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_maps_routing_v2_routing_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_routing_v2_routing_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_routing_v2_routing_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_maps_routing_v2_routing_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_maps_routing_v2_routing_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_maps_routing_v2_routing_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_maps_routing_v2_routing_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_routing_v2_routing_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_maps_routing_v2_routing_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_routing_v2_routing_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_maps_routing_v2_routing_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_routing_v2_routing_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_maps_routing_v2_routing_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_routing_v2_routing_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_maps_roads_v1op_roads_cc_proto #############

        set(googleapis_googleapis_google_maps_roads_v1op_roads_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_maps_roads_v1op_roads_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_maps_roads_v1op_roads_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_maps_roads_v1op_roads_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_maps_roads_v1op_roads_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_maps_roads_v1op_roads_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_maps_roads_v1op_roads_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_maps_roads_v1op_roads_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_roads_v1op_roads_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_roads_v1op_roads_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_roads_v1op_roads_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_maps_roads_v1op_roads_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_maps_roads_v1op_roads_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_maps_roads_v1op_roads_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_maps_roads_v1op_roads_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_maps_roads_v1op_roads_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_maps_roads_v1op_roads_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_maps_roads_v1op_roads_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_roads_v1op_roads_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_roads_v1op_roads_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_maps_roads_v1op_roads_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_maps_roads_v1op_roads_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_maps_roads_v1op_roads_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_maps_roads_v1op_roads_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_roads_v1op_roads_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_maps_roads_v1op_roads_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_roads_v1op_roads_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_maps_roads_v1op_roads_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_roads_v1op_roads_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_maps_roads_v1op_roads_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_roads_v1op_roads_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_maps_roads_v1op_roads_proto #############

        set(googleapis_googleapis_google_maps_roads_v1op_roads_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_maps_roads_v1op_roads_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_maps_roads_v1op_roads_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_maps_roads_v1op_roads_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_maps_roads_v1op_roads_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_maps_roads_v1op_roads_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_maps_roads_v1op_roads_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_maps_roads_v1op_roads_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_roads_v1op_roads_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_roads_v1op_roads_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_roads_v1op_roads_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_maps_roads_v1op_roads_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_maps_roads_v1op_roads_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_maps_roads_v1op_roads_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_maps_roads_v1op_roads_proto_DEPS_TARGET
                                      googleapis_googleapis_google_maps_roads_v1op_roads_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_maps_roads_v1op_roads_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_maps_roads_v1op_roads_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_roads_v1op_roads_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_roads_v1op_roads_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_maps_roads_v1op_roads_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_maps_roads_v1op_roads_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_maps_roads_v1op_roads_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_maps_roads_v1op_roads_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_roads_v1op_roads_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_maps_roads_v1op_roads_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_roads_v1op_roads_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_maps_roads_v1op_roads_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_roads_v1op_roads_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_maps_roads_v1op_roads_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_roads_v1op_roads_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_maps_regionlookup_v1alpha_regionlookup_cc_proto #############

        set(googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_maps_regionlookup_v1alpha_regionlookup_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_maps_regionlookup_v1alpha_regionlookup_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_maps_regionlookup_v1alpha_regionlookup_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_maps_regionlookup_v1alpha_regionlookup_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_maps_regionlookup_v1alpha_regionlookup_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_maps_regionlookup_v1alpha_regionlookup_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_maps_regionlookup_v1alpha_regionlookup_proto #############

        set(googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_proto_DEPS_TARGET
                                      googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_maps_regionlookup_v1alpha_regionlookup_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_maps_regionlookup_v1alpha_regionlookup_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_maps_regionlookup_v1alpha_regionlookup_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_maps_regionlookup_v1alpha_regionlookup_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_maps_regionlookup_v1alpha_regionlookup_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_maps_regionlookup_v1alpha_regionlookup_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_regionlookup_v1alpha_regionlookup_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_maps_addressvalidation_v1_addressvalidation_cc_proto #############

        set(googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_maps_addressvalidation_v1_addressvalidation_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_maps_addressvalidation_v1_addressvalidation_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_maps_addressvalidation_v1_addressvalidation_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_maps_addressvalidation_v1_addressvalidation_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_maps_addressvalidation_v1_addressvalidation_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_maps_addressvalidation_v1_addressvalidation_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_maps_addressvalidation_v1_addressvalidation_proto #############

        set(googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_proto_DEPS_TARGET
                                      googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_maps_addressvalidation_v1_addressvalidation_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_maps_addressvalidation_v1_addressvalidation_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_maps_addressvalidation_v1_addressvalidation_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_maps_addressvalidation_v1_addressvalidation_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_maps_addressvalidation_v1_addressvalidation_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_maps_addressvalidation_v1_addressvalidation_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_addressvalidation_v1_addressvalidation_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_cc_proto #############

        set(googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_proto #############

        set(googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_proto_DEPS_TARGET
                                      googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_dataflow_v1beta3_dataflow_cc_proto #############

        set(googleapis_googleapis_google_dataflow_v1beta3_dataflow_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_dataflow_v1beta3_dataflow_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_dataflow_v1beta3_dataflow_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_dataflow_v1beta3_dataflow_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_dataflow_v1beta3_dataflow_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_dataflow_v1beta3_dataflow_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_dataflow_v1beta3_dataflow_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_dataflow_v1beta3_dataflow_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_dataflow_v1beta3_dataflow_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_dataflow_v1beta3_dataflow_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_dataflow_v1beta3_dataflow_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_dataflow_v1beta3_dataflow_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_dataflow_v1beta3_dataflow_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_dataflow_v1beta3_dataflow_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_dataflow_v1beta3_dataflow_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_dataflow_v1beta3_dataflow_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_dataflow_v1beta3_dataflow_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_dataflow_v1beta3_dataflow_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_dataflow_v1beta3_dataflow_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_dataflow_v1beta3_dataflow_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_dataflow_v1beta3_dataflow_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_dataflow_v1beta3_dataflow_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_dataflow_v1beta3_dataflow_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_dataflow_v1beta3_dataflow_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_dataflow_v1beta3_dataflow_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_dataflow_v1beta3_dataflow_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_dataflow_v1beta3_dataflow_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_dataflow_v1beta3_dataflow_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_dataflow_v1beta3_dataflow_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_dataflow_v1beta3_dataflow_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_dataflow_v1beta3_dataflow_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_dataflow_v1beta3_dataflow_proto #############

        set(googleapis_googleapis_google_dataflow_v1beta3_dataflow_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_dataflow_v1beta3_dataflow_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_dataflow_v1beta3_dataflow_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_dataflow_v1beta3_dataflow_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_dataflow_v1beta3_dataflow_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_dataflow_v1beta3_dataflow_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_dataflow_v1beta3_dataflow_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_dataflow_v1beta3_dataflow_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_dataflow_v1beta3_dataflow_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_dataflow_v1beta3_dataflow_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_dataflow_v1beta3_dataflow_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_dataflow_v1beta3_dataflow_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_dataflow_v1beta3_dataflow_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_dataflow_v1beta3_dataflow_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_dataflow_v1beta3_dataflow_proto_DEPS_TARGET
                                      googleapis_googleapis_google_dataflow_v1beta3_dataflow_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_dataflow_v1beta3_dataflow_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_dataflow_v1beta3_dataflow_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_dataflow_v1beta3_dataflow_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_dataflow_v1beta3_dataflow_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_dataflow_v1beta3_dataflow_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_dataflow_v1beta3_dataflow_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_dataflow_v1beta3_dataflow_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_dataflow_v1beta3_dataflow_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_dataflow_v1beta3_dataflow_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_dataflow_v1beta3_dataflow_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_dataflow_v1beta3_dataflow_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_dataflow_v1beta3_dataflow_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_dataflow_v1beta3_dataflow_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_dataflow_v1beta3_dataflow_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_dataflow_v1beta3_dataflow_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::grafeas_v1_grafeas_cc_proto #############

        set(googleapis_googleapis_grafeas_v1_grafeas_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_grafeas_v1_grafeas_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_grafeas_v1_grafeas_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_grafeas_v1_grafeas_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_grafeas_v1_grafeas_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_grafeas_v1_grafeas_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_grafeas_v1_grafeas_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_grafeas_v1_grafeas_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_grafeas_v1_grafeas_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_grafeas_v1_grafeas_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_grafeas_v1_grafeas_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_grafeas_v1_grafeas_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_grafeas_v1_grafeas_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_grafeas_v1_grafeas_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_grafeas_v1_grafeas_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_grafeas_v1_grafeas_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_grafeas_v1_grafeas_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::grafeas_v1_grafeas_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_grafeas_v1_grafeas_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_grafeas_v1_grafeas_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_grafeas_v1_grafeas_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::grafeas_v1_grafeas_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_grafeas_v1_grafeas_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::grafeas_v1_grafeas_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_grafeas_v1_grafeas_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::grafeas_v1_grafeas_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_grafeas_v1_grafeas_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::grafeas_v1_grafeas_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_grafeas_v1_grafeas_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::grafeas_v1_grafeas_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_grafeas_v1_grafeas_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::grafeas_v1_grafeas_proto #############

        set(googleapis_googleapis_grafeas_v1_grafeas_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_grafeas_v1_grafeas_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_grafeas_v1_grafeas_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_grafeas_v1_grafeas_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_grafeas_v1_grafeas_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_grafeas_v1_grafeas_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_grafeas_v1_grafeas_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_grafeas_v1_grafeas_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_grafeas_v1_grafeas_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_grafeas_v1_grafeas_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_grafeas_v1_grafeas_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_grafeas_v1_grafeas_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_grafeas_v1_grafeas_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_grafeas_v1_grafeas_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_grafeas_v1_grafeas_proto_DEPS_TARGET
                                      googleapis_googleapis_grafeas_v1_grafeas_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_grafeas_v1_grafeas_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::grafeas_v1_grafeas_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_grafeas_v1_grafeas_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_grafeas_v1_grafeas_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_grafeas_v1_grafeas_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::grafeas_v1_grafeas_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_grafeas_v1_grafeas_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::grafeas_v1_grafeas_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_grafeas_v1_grafeas_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::grafeas_v1_grafeas_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_grafeas_v1_grafeas_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::grafeas_v1_grafeas_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_grafeas_v1_grafeas_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::grafeas_v1_grafeas_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_grafeas_v1_grafeas_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_analytics_data_v1beta_data_cc_proto #############

        set(googleapis_googleapis_google_analytics_data_v1beta_data_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_analytics_data_v1beta_data_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_analytics_data_v1beta_data_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_analytics_data_v1beta_data_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_analytics_data_v1beta_data_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_analytics_data_v1beta_data_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_analytics_data_v1beta_data_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_analytics_data_v1beta_data_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_data_v1beta_data_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_data_v1beta_data_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_data_v1beta_data_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_analytics_data_v1beta_data_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_analytics_data_v1beta_data_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_analytics_data_v1beta_data_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_analytics_data_v1beta_data_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_analytics_data_v1beta_data_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_analytics_data_v1beta_data_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_analytics_data_v1beta_data_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_data_v1beta_data_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_data_v1beta_data_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_analytics_data_v1beta_data_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_analytics_data_v1beta_data_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_analytics_data_v1beta_data_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_analytics_data_v1beta_data_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_data_v1beta_data_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_analytics_data_v1beta_data_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_data_v1beta_data_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_analytics_data_v1beta_data_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_data_v1beta_data_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_analytics_data_v1beta_data_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_data_v1beta_data_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_analytics_data_v1beta_data_proto #############

        set(googleapis_googleapis_google_analytics_data_v1beta_data_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_analytics_data_v1beta_data_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_analytics_data_v1beta_data_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_analytics_data_v1beta_data_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_analytics_data_v1beta_data_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_analytics_data_v1beta_data_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_analytics_data_v1beta_data_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_analytics_data_v1beta_data_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_data_v1beta_data_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_data_v1beta_data_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_data_v1beta_data_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_analytics_data_v1beta_data_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_analytics_data_v1beta_data_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_analytics_data_v1beta_data_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_analytics_data_v1beta_data_proto_DEPS_TARGET
                                      googleapis_googleapis_google_analytics_data_v1beta_data_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_analytics_data_v1beta_data_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_analytics_data_v1beta_data_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_data_v1beta_data_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_data_v1beta_data_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_analytics_data_v1beta_data_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_analytics_data_v1beta_data_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_analytics_data_v1beta_data_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_analytics_data_v1beta_data_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_data_v1beta_data_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_analytics_data_v1beta_data_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_data_v1beta_data_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_analytics_data_v1beta_data_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_data_v1beta_data_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_analytics_data_v1beta_data_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_data_v1beta_data_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_analytics_data_v1alpha_data_cc_proto #############

        set(googleapis_googleapis_google_analytics_data_v1alpha_data_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_analytics_data_v1alpha_data_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_analytics_data_v1alpha_data_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_analytics_data_v1alpha_data_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_analytics_data_v1alpha_data_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_analytics_data_v1alpha_data_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_analytics_data_v1alpha_data_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_analytics_data_v1alpha_data_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_data_v1alpha_data_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_data_v1alpha_data_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_data_v1alpha_data_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_analytics_data_v1alpha_data_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_analytics_data_v1alpha_data_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_analytics_data_v1alpha_data_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_analytics_data_v1alpha_data_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_analytics_data_v1alpha_data_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_analytics_data_v1alpha_data_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_analytics_data_v1alpha_data_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_data_v1alpha_data_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_data_v1alpha_data_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_analytics_data_v1alpha_data_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_analytics_data_v1alpha_data_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_analytics_data_v1alpha_data_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_analytics_data_v1alpha_data_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_data_v1alpha_data_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_analytics_data_v1alpha_data_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_data_v1alpha_data_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_analytics_data_v1alpha_data_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_data_v1alpha_data_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_analytics_data_v1alpha_data_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_data_v1alpha_data_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_analytics_data_v1alpha_data_proto #############

        set(googleapis_googleapis_google_analytics_data_v1alpha_data_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_analytics_data_v1alpha_data_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_analytics_data_v1alpha_data_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_analytics_data_v1alpha_data_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_analytics_data_v1alpha_data_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_analytics_data_v1alpha_data_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_analytics_data_v1alpha_data_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_analytics_data_v1alpha_data_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_data_v1alpha_data_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_data_v1alpha_data_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_data_v1alpha_data_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_analytics_data_v1alpha_data_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_analytics_data_v1alpha_data_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_analytics_data_v1alpha_data_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_analytics_data_v1alpha_data_proto_DEPS_TARGET
                                      googleapis_googleapis_google_analytics_data_v1alpha_data_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_analytics_data_v1alpha_data_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_analytics_data_v1alpha_data_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_data_v1alpha_data_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_data_v1alpha_data_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_analytics_data_v1alpha_data_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_analytics_data_v1alpha_data_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_analytics_data_v1alpha_data_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_analytics_data_v1alpha_data_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_data_v1alpha_data_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_analytics_data_v1alpha_data_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_data_v1alpha_data_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_analytics_data_v1alpha_data_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_data_v1alpha_data_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_analytics_data_v1alpha_data_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_data_v1alpha_data_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_analytics_admin_v1beta_admin_cc_proto #############

        set(googleapis_googleapis_google_analytics_admin_v1beta_admin_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_analytics_admin_v1beta_admin_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_analytics_admin_v1beta_admin_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_analytics_admin_v1beta_admin_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_analytics_admin_v1beta_admin_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_analytics_admin_v1beta_admin_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_analytics_admin_v1beta_admin_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_analytics_admin_v1beta_admin_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_admin_v1beta_admin_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_admin_v1beta_admin_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_admin_v1beta_admin_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_analytics_admin_v1beta_admin_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_analytics_admin_v1beta_admin_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_analytics_admin_v1beta_admin_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_analytics_admin_v1beta_admin_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_analytics_admin_v1beta_admin_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_analytics_admin_v1beta_admin_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_analytics_admin_v1beta_admin_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_admin_v1beta_admin_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_admin_v1beta_admin_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_analytics_admin_v1beta_admin_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_analytics_admin_v1beta_admin_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_analytics_admin_v1beta_admin_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_analytics_admin_v1beta_admin_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_admin_v1beta_admin_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_analytics_admin_v1beta_admin_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_admin_v1beta_admin_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_analytics_admin_v1beta_admin_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_admin_v1beta_admin_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_analytics_admin_v1beta_admin_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_admin_v1beta_admin_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_analytics_admin_v1beta_admin_proto #############

        set(googleapis_googleapis_google_analytics_admin_v1beta_admin_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_analytics_admin_v1beta_admin_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_analytics_admin_v1beta_admin_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_analytics_admin_v1beta_admin_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_analytics_admin_v1beta_admin_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_analytics_admin_v1beta_admin_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_analytics_admin_v1beta_admin_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_analytics_admin_v1beta_admin_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_admin_v1beta_admin_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_admin_v1beta_admin_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_admin_v1beta_admin_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_analytics_admin_v1beta_admin_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_analytics_admin_v1beta_admin_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_analytics_admin_v1beta_admin_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_analytics_admin_v1beta_admin_proto_DEPS_TARGET
                                      googleapis_googleapis_google_analytics_admin_v1beta_admin_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_analytics_admin_v1beta_admin_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_analytics_admin_v1beta_admin_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_admin_v1beta_admin_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_admin_v1beta_admin_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_analytics_admin_v1beta_admin_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_analytics_admin_v1beta_admin_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_analytics_admin_v1beta_admin_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_analytics_admin_v1beta_admin_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_admin_v1beta_admin_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_analytics_admin_v1beta_admin_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_admin_v1beta_admin_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_analytics_admin_v1beta_admin_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_admin_v1beta_admin_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_analytics_admin_v1beta_admin_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_admin_v1beta_admin_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_analytics_admin_v1alpha_admin_cc_proto #############

        set(googleapis_googleapis_google_analytics_admin_v1alpha_admin_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_analytics_admin_v1alpha_admin_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_analytics_admin_v1alpha_admin_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_analytics_admin_v1alpha_admin_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_analytics_admin_v1alpha_admin_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_analytics_admin_v1alpha_admin_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_analytics_admin_v1alpha_admin_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_analytics_admin_v1alpha_admin_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_admin_v1alpha_admin_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_admin_v1alpha_admin_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_admin_v1alpha_admin_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_analytics_admin_v1alpha_admin_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_analytics_admin_v1alpha_admin_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_analytics_admin_v1alpha_admin_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_analytics_admin_v1alpha_admin_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_analytics_admin_v1alpha_admin_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_analytics_admin_v1alpha_admin_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_analytics_admin_v1alpha_admin_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_admin_v1alpha_admin_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_admin_v1alpha_admin_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_analytics_admin_v1alpha_admin_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_analytics_admin_v1alpha_admin_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_analytics_admin_v1alpha_admin_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_analytics_admin_v1alpha_admin_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_admin_v1alpha_admin_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_analytics_admin_v1alpha_admin_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_admin_v1alpha_admin_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_analytics_admin_v1alpha_admin_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_admin_v1alpha_admin_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_analytics_admin_v1alpha_admin_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_admin_v1alpha_admin_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_analytics_admin_v1alpha_admin_proto #############

        set(googleapis_googleapis_google_analytics_admin_v1alpha_admin_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_analytics_admin_v1alpha_admin_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_analytics_admin_v1alpha_admin_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_analytics_admin_v1alpha_admin_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_analytics_admin_v1alpha_admin_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_analytics_admin_v1alpha_admin_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_analytics_admin_v1alpha_admin_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_analytics_admin_v1alpha_admin_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_admin_v1alpha_admin_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_admin_v1alpha_admin_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_admin_v1alpha_admin_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_analytics_admin_v1alpha_admin_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_analytics_admin_v1alpha_admin_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_analytics_admin_v1alpha_admin_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_analytics_admin_v1alpha_admin_proto_DEPS_TARGET
                                      googleapis_googleapis_google_analytics_admin_v1alpha_admin_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_analytics_admin_v1alpha_admin_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_analytics_admin_v1alpha_admin_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_admin_v1alpha_admin_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_admin_v1alpha_admin_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_analytics_admin_v1alpha_admin_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_analytics_admin_v1alpha_admin_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_analytics_admin_v1alpha_admin_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_analytics_admin_v1alpha_admin_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_admin_v1alpha_admin_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_analytics_admin_v1alpha_admin_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_admin_v1alpha_admin_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_analytics_admin_v1alpha_admin_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_admin_v1alpha_admin_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_analytics_admin_v1alpha_admin_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_analytics_admin_v1alpha_admin_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_logging_type_type_cc_proto #############

        set(googleapis_googleapis_google_logging_type_type_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_logging_type_type_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_logging_type_type_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_logging_type_type_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_logging_type_type_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_logging_type_type_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_logging_type_type_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_logging_type_type_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_logging_type_type_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_logging_type_type_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_logging_type_type_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_logging_type_type_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_logging_type_type_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_logging_type_type_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_logging_type_type_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_logging_type_type_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_logging_type_type_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_logging_type_type_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_logging_type_type_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_logging_type_type_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_logging_type_type_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_logging_type_type_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_logging_type_type_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_logging_type_type_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_logging_type_type_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_logging_type_type_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_logging_type_type_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_logging_type_type_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_logging_type_type_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_logging_type_type_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_logging_type_type_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_logging_type_type_proto #############

        set(googleapis_googleapis_google_logging_type_type_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_logging_type_type_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_logging_type_type_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_logging_type_type_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_logging_type_type_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_logging_type_type_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_logging_type_type_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_logging_type_type_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_logging_type_type_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_logging_type_type_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_logging_type_type_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_logging_type_type_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_logging_type_type_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_logging_type_type_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_logging_type_type_proto_DEPS_TARGET
                                      googleapis_googleapis_google_logging_type_type_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_logging_type_type_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_logging_type_type_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_logging_type_type_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_logging_type_type_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_logging_type_type_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_logging_type_type_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_logging_type_type_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_logging_type_type_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_logging_type_type_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_logging_type_type_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_logging_type_type_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_logging_type_type_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_logging_type_type_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_logging_type_type_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_logging_type_type_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_monitoring_dashboard_v1_dashboard_cc_proto #############

        set(googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_monitoring_dashboard_v1_dashboard_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_monitoring_dashboard_v1_dashboard_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_monitoring_dashboard_v1_dashboard_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_monitoring_dashboard_v1_dashboard_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_monitoring_dashboard_v1_dashboard_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_monitoring_dashboard_v1_dashboard_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_monitoring_dashboard_v1_dashboard_proto #############

        set(googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_proto_DEPS_TARGET
                                      googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_monitoring_dashboard_v1_dashboard_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_monitoring_dashboard_v1_dashboard_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_monitoring_dashboard_v1_dashboard_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_monitoring_dashboard_v1_dashboard_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_monitoring_dashboard_v1_dashboard_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_monitoring_dashboard_v1_dashboard_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_monitoring_dashboard_v1_dashboard_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_spanner_v1_spanner_cc_proto #############

        set(googleapis_googleapis_google_spanner_v1_spanner_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_spanner_v1_spanner_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_spanner_v1_spanner_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_spanner_v1_spanner_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_spanner_v1_spanner_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_spanner_v1_spanner_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_spanner_v1_spanner_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_spanner_v1_spanner_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_v1_spanner_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_v1_spanner_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_v1_spanner_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_spanner_v1_spanner_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_spanner_v1_spanner_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_spanner_v1_spanner_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_spanner_v1_spanner_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_spanner_v1_spanner_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_spanner_v1_spanner_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_spanner_v1_spanner_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_v1_spanner_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_v1_spanner_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_spanner_v1_spanner_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_spanner_v1_spanner_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_spanner_v1_spanner_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_spanner_v1_spanner_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_v1_spanner_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_spanner_v1_spanner_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_v1_spanner_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_spanner_v1_spanner_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_v1_spanner_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_spanner_v1_spanner_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_v1_spanner_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_spanner_v1_spanner_proto #############

        set(googleapis_googleapis_google_spanner_v1_spanner_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_spanner_v1_spanner_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_spanner_v1_spanner_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_spanner_v1_spanner_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_spanner_v1_spanner_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_spanner_v1_spanner_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_spanner_v1_spanner_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_spanner_v1_spanner_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_v1_spanner_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_v1_spanner_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_v1_spanner_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_spanner_v1_spanner_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_spanner_v1_spanner_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_spanner_v1_spanner_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_spanner_v1_spanner_proto_DEPS_TARGET
                                      googleapis_googleapis_google_spanner_v1_spanner_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_spanner_v1_spanner_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_spanner_v1_spanner_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_v1_spanner_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_v1_spanner_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_spanner_v1_spanner_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_spanner_v1_spanner_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_spanner_v1_spanner_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_spanner_v1_spanner_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_v1_spanner_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_spanner_v1_spanner_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_v1_spanner_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_spanner_v1_spanner_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_v1_spanner_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_spanner_v1_spanner_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_spanner_v1_spanner_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_pubsub_v1_pubsub_cc_proto #############

        set(googleapis_googleapis_google_pubsub_v1_pubsub_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_pubsub_v1_pubsub_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_pubsub_v1_pubsub_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_pubsub_v1_pubsub_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_pubsub_v1_pubsub_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_pubsub_v1_pubsub_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_pubsub_v1_pubsub_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_pubsub_v1_pubsub_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_pubsub_v1_pubsub_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_pubsub_v1_pubsub_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_pubsub_v1_pubsub_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_pubsub_v1_pubsub_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_pubsub_v1_pubsub_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_pubsub_v1_pubsub_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_pubsub_v1_pubsub_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_pubsub_v1_pubsub_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_pubsub_v1_pubsub_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_pubsub_v1_pubsub_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_pubsub_v1_pubsub_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_pubsub_v1_pubsub_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_pubsub_v1_pubsub_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_pubsub_v1_pubsub_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_pubsub_v1_pubsub_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_pubsub_v1_pubsub_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_pubsub_v1_pubsub_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_pubsub_v1_pubsub_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_pubsub_v1_pubsub_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_pubsub_v1_pubsub_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_pubsub_v1_pubsub_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_pubsub_v1_pubsub_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_pubsub_v1_pubsub_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_pubsub_v1_pubsub_proto #############

        set(googleapis_googleapis_google_pubsub_v1_pubsub_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_pubsub_v1_pubsub_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_pubsub_v1_pubsub_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_pubsub_v1_pubsub_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_pubsub_v1_pubsub_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_pubsub_v1_pubsub_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_pubsub_v1_pubsub_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_pubsub_v1_pubsub_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_pubsub_v1_pubsub_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_pubsub_v1_pubsub_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_pubsub_v1_pubsub_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_pubsub_v1_pubsub_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_pubsub_v1_pubsub_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_pubsub_v1_pubsub_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_pubsub_v1_pubsub_proto_DEPS_TARGET
                                      googleapis_googleapis_google_pubsub_v1_pubsub_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_pubsub_v1_pubsub_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_pubsub_v1_pubsub_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_pubsub_v1_pubsub_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_pubsub_v1_pubsub_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_pubsub_v1_pubsub_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_pubsub_v1_pubsub_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_pubsub_v1_pubsub_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_pubsub_v1_pubsub_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_pubsub_v1_pubsub_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_pubsub_v1_pubsub_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_pubsub_v1_pubsub_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_pubsub_v1_pubsub_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_pubsub_v1_pubsub_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_pubsub_v1_pubsub_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_pubsub_v1_pubsub_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_servicecontrol_v2_servicecontrol_cc_proto #############

        set(googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_servicecontrol_v2_servicecontrol_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_servicecontrol_v2_servicecontrol_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_servicecontrol_v2_servicecontrol_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_servicecontrol_v2_servicecontrol_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_servicecontrol_v2_servicecontrol_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_servicecontrol_v2_servicecontrol_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_servicecontrol_v2_servicecontrol_proto #############

        set(googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_servicecontrol_v2_servicecontrol_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_servicecontrol_v2_servicecontrol_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_servicecontrol_v2_servicecontrol_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_servicecontrol_v2_servicecontrol_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_servicecontrol_v2_servicecontrol_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_servicecontrol_v2_servicecontrol_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_servicecontrol_v2_servicecontrol_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_expr_conformance_v1alpha1_conformance_cc_proto #############

        set(googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_expr_conformance_v1alpha1_conformance_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_expr_conformance_v1alpha1_conformance_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_expr_conformance_v1alpha1_conformance_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_conformance_v1alpha1_conformance_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_conformance_v1alpha1_conformance_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_conformance_v1alpha1_conformance_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_expr_conformance_v1alpha1_conformance_proto #############

        set(googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_expr_conformance_v1alpha1_conformance_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_expr_conformance_v1alpha1_conformance_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_expr_conformance_v1alpha1_conformance_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_conformance_v1alpha1_conformance_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_conformance_v1alpha1_conformance_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_conformance_v1alpha1_conformance_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_conformance_v1alpha1_conformance_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_expr_v1alpha1_explain_cc_proto #############

        set(googleapis_googleapis_google_api_expr_v1alpha1_explain_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_expr_v1alpha1_explain_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_expr_v1alpha1_explain_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_expr_v1alpha1_explain_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_expr_v1alpha1_explain_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_expr_v1alpha1_explain_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_expr_v1alpha1_explain_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_expr_v1alpha1_explain_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_explain_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_explain_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_explain_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_expr_v1alpha1_explain_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_expr_v1alpha1_explain_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_expr_v1alpha1_explain_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_expr_v1alpha1_explain_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_expr_v1alpha1_explain_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_expr_v1alpha1_explain_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_expr_v1alpha1_explain_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_explain_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_explain_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_expr_v1alpha1_explain_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_expr_v1alpha1_explain_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_expr_v1alpha1_explain_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_expr_v1alpha1_explain_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_explain_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1alpha1_explain_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_explain_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1alpha1_explain_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_explain_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1alpha1_explain_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_explain_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_expr_v1alpha1_eval_cc_proto #############

        set(googleapis_googleapis_google_api_expr_v1alpha1_eval_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_expr_v1alpha1_eval_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_expr_v1alpha1_eval_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_expr_v1alpha1_eval_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_expr_v1alpha1_eval_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_expr_v1alpha1_eval_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_expr_v1alpha1_eval_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_expr_v1alpha1_eval_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_eval_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_eval_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_eval_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_expr_v1alpha1_eval_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_expr_v1alpha1_eval_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_expr_v1alpha1_eval_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_expr_v1alpha1_eval_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_expr_v1alpha1_eval_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_expr_v1alpha1_eval_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_expr_v1alpha1_eval_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_eval_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_eval_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_expr_v1alpha1_eval_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_expr_v1alpha1_eval_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_expr_v1alpha1_eval_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_expr_v1alpha1_eval_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_eval_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1alpha1_eval_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_eval_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1alpha1_eval_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_eval_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1alpha1_eval_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_eval_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_expr_v1alpha1_checked_cc_proto #############

        set(googleapis_googleapis_google_api_expr_v1alpha1_checked_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_expr_v1alpha1_checked_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_expr_v1alpha1_checked_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_expr_v1alpha1_checked_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_expr_v1alpha1_checked_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_expr_v1alpha1_checked_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_expr_v1alpha1_checked_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_expr_v1alpha1_checked_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_checked_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_checked_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_checked_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_expr_v1alpha1_checked_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_expr_v1alpha1_checked_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_expr_v1alpha1_checked_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_expr_v1alpha1_checked_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_expr_v1alpha1_checked_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_expr_v1alpha1_checked_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_expr_v1alpha1_checked_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_checked_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_checked_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_expr_v1alpha1_checked_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_expr_v1alpha1_checked_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_expr_v1alpha1_checked_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_expr_v1alpha1_checked_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_checked_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1alpha1_checked_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_checked_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1alpha1_checked_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_checked_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1alpha1_checked_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_checked_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_expr_v1alpha1_explain_proto #############

        set(googleapis_googleapis_google_api_expr_v1alpha1_explain_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_expr_v1alpha1_explain_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_expr_v1alpha1_explain_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_expr_v1alpha1_explain_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_expr_v1alpha1_explain_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_expr_v1alpha1_explain_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_expr_v1alpha1_explain_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_expr_v1alpha1_explain_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_explain_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_explain_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_explain_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_expr_v1alpha1_explain_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_expr_v1alpha1_explain_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_expr_v1alpha1_explain_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_expr_v1alpha1_explain_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_expr_v1alpha1_explain_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_expr_v1alpha1_explain_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_expr_v1alpha1_explain_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_explain_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_explain_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_expr_v1alpha1_explain_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_expr_v1alpha1_explain_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_expr_v1alpha1_explain_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_expr_v1alpha1_explain_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_explain_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1alpha1_explain_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_explain_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1alpha1_explain_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_explain_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1alpha1_explain_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_explain_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_expr_v1alpha1_eval_proto #############

        set(googleapis_googleapis_google_api_expr_v1alpha1_eval_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_expr_v1alpha1_eval_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_expr_v1alpha1_eval_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_expr_v1alpha1_eval_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_expr_v1alpha1_eval_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_expr_v1alpha1_eval_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_expr_v1alpha1_eval_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_expr_v1alpha1_eval_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_eval_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_eval_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_eval_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_expr_v1alpha1_eval_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_expr_v1alpha1_eval_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_expr_v1alpha1_eval_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_expr_v1alpha1_eval_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_expr_v1alpha1_eval_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_expr_v1alpha1_eval_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_expr_v1alpha1_eval_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_eval_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_eval_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_expr_v1alpha1_eval_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_expr_v1alpha1_eval_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_expr_v1alpha1_eval_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_expr_v1alpha1_eval_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_eval_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1alpha1_eval_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_eval_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1alpha1_eval_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_eval_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1alpha1_eval_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_eval_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_expr_v1alpha1_checked_proto #############

        set(googleapis_googleapis_google_api_expr_v1alpha1_checked_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_expr_v1alpha1_checked_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_expr_v1alpha1_checked_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_expr_v1alpha1_checked_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_expr_v1alpha1_checked_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_expr_v1alpha1_checked_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_expr_v1alpha1_checked_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_expr_v1alpha1_checked_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_checked_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_checked_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_checked_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_expr_v1alpha1_checked_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_expr_v1alpha1_checked_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_expr_v1alpha1_checked_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_expr_v1alpha1_checked_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_expr_v1alpha1_checked_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_expr_v1alpha1_checked_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_expr_v1alpha1_checked_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_checked_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_checked_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_expr_v1alpha1_checked_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_expr_v1alpha1_checked_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_expr_v1alpha1_checked_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_expr_v1alpha1_checked_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_checked_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1alpha1_checked_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_checked_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1alpha1_checked_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_checked_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1alpha1_checked_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_checked_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_expr_v1beta1_expr_cc_proto #############

        set(googleapis_googleapis_google_api_expr_v1beta1_expr_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_expr_v1beta1_expr_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_expr_v1beta1_expr_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_expr_v1beta1_expr_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_expr_v1beta1_expr_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_expr_v1beta1_expr_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_expr_v1beta1_expr_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_expr_v1beta1_expr_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_expr_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_expr_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_expr_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_expr_v1beta1_expr_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_expr_v1beta1_expr_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_expr_v1beta1_expr_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_expr_v1beta1_expr_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_expr_v1beta1_expr_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_expr_v1beta1_expr_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_expr_v1beta1_expr_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_expr_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_expr_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_expr_v1beta1_expr_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_expr_v1beta1_expr_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_expr_v1beta1_expr_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_expr_v1beta1_expr_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_expr_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1beta1_expr_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_expr_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1beta1_expr_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_expr_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1beta1_expr_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_expr_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_expr_v1beta1_eval_cc_proto #############

        set(googleapis_googleapis_google_api_expr_v1beta1_eval_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_expr_v1beta1_eval_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_expr_v1beta1_eval_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_expr_v1beta1_eval_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_expr_v1beta1_eval_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_expr_v1beta1_eval_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_expr_v1beta1_eval_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_expr_v1beta1_eval_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_eval_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_eval_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_eval_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_expr_v1beta1_eval_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_expr_v1beta1_eval_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_expr_v1beta1_eval_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_expr_v1beta1_eval_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_expr_v1beta1_eval_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_expr_v1beta1_eval_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_expr_v1beta1_eval_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_eval_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_eval_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_expr_v1beta1_eval_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_expr_v1beta1_eval_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_expr_v1beta1_eval_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_expr_v1beta1_eval_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_eval_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1beta1_eval_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_eval_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1beta1_eval_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_eval_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1beta1_eval_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_eval_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_expr_v1beta1_expr_proto #############

        set(googleapis_googleapis_google_api_expr_v1beta1_expr_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_expr_v1beta1_expr_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_expr_v1beta1_expr_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_expr_v1beta1_expr_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_expr_v1beta1_expr_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_expr_v1beta1_expr_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_expr_v1beta1_expr_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_expr_v1beta1_expr_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_expr_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_expr_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_expr_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_expr_v1beta1_expr_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_expr_v1beta1_expr_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_expr_v1beta1_expr_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_expr_v1beta1_expr_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_expr_v1beta1_expr_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_expr_v1beta1_expr_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_expr_v1beta1_expr_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_expr_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_expr_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_expr_v1beta1_expr_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_expr_v1beta1_expr_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_expr_v1beta1_expr_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_expr_v1beta1_expr_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_expr_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1beta1_expr_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_expr_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1beta1_expr_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_expr_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1beta1_expr_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_expr_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_expr_v1beta1_eval_proto #############

        set(googleapis_googleapis_google_api_expr_v1beta1_eval_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_expr_v1beta1_eval_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_expr_v1beta1_eval_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_expr_v1beta1_eval_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_expr_v1beta1_eval_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_expr_v1beta1_eval_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_expr_v1beta1_eval_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_expr_v1beta1_eval_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_eval_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_eval_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_eval_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_expr_v1beta1_eval_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_expr_v1beta1_eval_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_expr_v1beta1_eval_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_expr_v1beta1_eval_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_expr_v1beta1_eval_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_expr_v1beta1_eval_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_expr_v1beta1_eval_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_eval_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_eval_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_expr_v1beta1_eval_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_expr_v1beta1_eval_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_expr_v1beta1_eval_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_expr_v1beta1_eval_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_eval_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1beta1_eval_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_eval_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1beta1_eval_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_eval_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1beta1_eval_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_eval_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_usage_cc_proto #############

        set(googleapis_googleapis_google_api_usage_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_usage_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_usage_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_usage_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_usage_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_usage_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_usage_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_usage_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_usage_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_usage_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_usage_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_usage_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_usage_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_usage_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_usage_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_usage_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_usage_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_usage_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_usage_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_usage_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_usage_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_usage_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_usage_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_usage_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_usage_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_usage_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_usage_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_usage_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_usage_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_usage_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_usage_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_quota_cc_proto #############

        set(googleapis_googleapis_google_api_quota_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_quota_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_quota_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_quota_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_quota_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_quota_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_quota_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_quota_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_quota_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_quota_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_quota_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_quota_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_quota_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_quota_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_quota_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_quota_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_quota_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_quota_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_quota_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_quota_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_quota_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_quota_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_quota_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_quota_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_quota_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_quota_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_quota_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_quota_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_quota_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_quota_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_quota_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_monitoring_cc_proto #############

        set(googleapis_googleapis_google_api_monitoring_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_monitoring_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_monitoring_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_monitoring_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_monitoring_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_monitoring_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_monitoring_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_monitoring_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_monitoring_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_monitoring_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_monitoring_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_monitoring_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_monitoring_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_monitoring_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_monitoring_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_monitoring_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_monitoring_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_monitoring_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_monitoring_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_monitoring_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_monitoring_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_monitoring_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_monitoring_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_monitoring_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_monitoring_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_monitoring_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_monitoring_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_monitoring_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_monitoring_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_monitoring_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_monitoring_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_logging_cc_proto #############

        set(googleapis_googleapis_google_api_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_logging_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_logging_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_logging_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_logging_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_logging_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_logging_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_logging_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_logging_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_logging_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_logging_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_logging_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_logging_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_logging_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_logging_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_logging_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_logging_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_logging_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_logging_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_logging_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_logging_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_logging_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_logging_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_logging_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_logging_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_logging_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_logging_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_logging_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_logging_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_endpoint_cc_proto #############

        set(googleapis_googleapis_google_api_endpoint_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_endpoint_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_endpoint_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_endpoint_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_endpoint_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_endpoint_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_endpoint_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_endpoint_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_endpoint_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_endpoint_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_endpoint_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_endpoint_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_endpoint_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_endpoint_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_endpoint_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_endpoint_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_endpoint_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_endpoint_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_endpoint_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_endpoint_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_endpoint_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_endpoint_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_endpoint_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_endpoint_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_endpoint_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_endpoint_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_endpoint_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_endpoint_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_endpoint_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_endpoint_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_endpoint_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_distribution_cc_proto #############

        set(googleapis_googleapis_google_api_distribution_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_distribution_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_distribution_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_distribution_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_distribution_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_distribution_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_distribution_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_distribution_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_distribution_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_distribution_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_distribution_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_distribution_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_distribution_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_distribution_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_distribution_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_distribution_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_distribution_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_distribution_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_distribution_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_distribution_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_distribution_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_distribution_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_distribution_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_distribution_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_distribution_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_distribution_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_distribution_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_distribution_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_distribution_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_distribution_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_distribution_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_billing_cc_proto #############

        set(googleapis_googleapis_google_api_billing_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_billing_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_billing_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_billing_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_billing_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_billing_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_billing_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_billing_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_billing_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_billing_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_billing_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_billing_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_billing_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_billing_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_billing_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_billing_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_billing_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_billing_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_billing_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_billing_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_billing_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_billing_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_billing_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_billing_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_billing_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_billing_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_billing_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_billing_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_billing_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_billing_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_billing_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_auth_cc_proto #############

        set(googleapis_googleapis_google_api_auth_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_auth_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_auth_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_auth_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_auth_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_auth_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_auth_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_auth_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_auth_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_auth_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_auth_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_auth_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_auth_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_auth_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_auth_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_auth_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_auth_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_auth_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_auth_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_auth_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_auth_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_auth_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_auth_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_auth_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_auth_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_auth_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_auth_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_auth_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_auth_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_auth_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_auth_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_annotations_cc_proto #############

        set(googleapis_googleapis_google_api_annotations_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_annotations_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_annotations_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_annotations_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_annotations_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_annotations_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_annotations_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_annotations_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_annotations_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_annotations_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_annotations_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_annotations_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_annotations_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_annotations_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_annotations_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_annotations_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_annotations_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_annotations_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_annotations_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_annotations_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_annotations_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_annotations_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_annotations_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_annotations_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_annotations_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_annotations_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_annotations_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_annotations_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_annotations_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_annotations_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_annotations_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_usage_proto #############

        set(googleapis_googleapis_google_api_usage_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_usage_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_usage_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_usage_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_usage_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_usage_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_usage_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_usage_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_usage_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_usage_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_usage_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_usage_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_usage_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_usage_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_usage_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_usage_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_usage_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_usage_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_usage_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_usage_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_usage_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_usage_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_usage_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_usage_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_usage_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_usage_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_usage_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_usage_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_usage_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_usage_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_usage_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_quota_proto #############

        set(googleapis_googleapis_google_api_quota_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_quota_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_quota_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_quota_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_quota_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_quota_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_quota_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_quota_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_quota_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_quota_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_quota_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_quota_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_quota_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_quota_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_quota_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_quota_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_quota_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_quota_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_quota_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_quota_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_quota_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_quota_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_quota_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_quota_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_quota_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_quota_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_quota_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_quota_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_quota_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_quota_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_quota_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_monitoring_proto #############

        set(googleapis_googleapis_google_api_monitoring_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_monitoring_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_monitoring_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_monitoring_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_monitoring_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_monitoring_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_monitoring_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_monitoring_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_monitoring_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_monitoring_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_monitoring_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_monitoring_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_monitoring_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_monitoring_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_monitoring_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_monitoring_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_monitoring_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_monitoring_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_monitoring_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_monitoring_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_monitoring_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_monitoring_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_monitoring_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_monitoring_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_monitoring_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_monitoring_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_monitoring_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_monitoring_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_monitoring_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_monitoring_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_monitoring_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_logging_proto #############

        set(googleapis_googleapis_google_api_logging_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_logging_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_logging_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_logging_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_logging_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_logging_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_logging_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_logging_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_logging_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_logging_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_logging_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_logging_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_logging_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_logging_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_logging_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_logging_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_logging_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_logging_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_logging_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_logging_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_logging_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_logging_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_logging_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_logging_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_logging_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_logging_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_logging_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_logging_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_logging_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_logging_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_logging_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_endpoint_proto #############

        set(googleapis_googleapis_google_api_endpoint_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_endpoint_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_endpoint_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_endpoint_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_endpoint_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_endpoint_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_endpoint_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_endpoint_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_endpoint_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_endpoint_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_endpoint_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_endpoint_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_endpoint_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_endpoint_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_endpoint_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_endpoint_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_endpoint_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_endpoint_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_endpoint_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_endpoint_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_endpoint_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_endpoint_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_endpoint_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_endpoint_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_endpoint_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_endpoint_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_endpoint_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_endpoint_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_endpoint_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_endpoint_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_endpoint_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_distribution_proto #############

        set(googleapis_googleapis_google_api_distribution_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_distribution_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_distribution_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_distribution_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_distribution_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_distribution_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_distribution_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_distribution_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_distribution_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_distribution_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_distribution_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_distribution_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_distribution_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_distribution_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_distribution_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_distribution_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_distribution_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_distribution_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_distribution_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_distribution_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_distribution_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_distribution_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_distribution_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_distribution_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_distribution_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_distribution_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_distribution_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_distribution_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_distribution_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_distribution_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_distribution_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_billing_proto #############

        set(googleapis_googleapis_google_api_billing_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_billing_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_billing_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_billing_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_billing_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_billing_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_billing_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_billing_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_billing_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_billing_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_billing_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_billing_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_billing_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_billing_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_billing_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_billing_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_billing_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_billing_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_billing_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_billing_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_billing_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_billing_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_billing_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_billing_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_billing_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_billing_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_billing_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_billing_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_billing_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_billing_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_billing_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_auth_proto #############

        set(googleapis_googleapis_google_api_auth_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_auth_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_auth_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_auth_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_auth_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_auth_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_auth_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_auth_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_auth_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_auth_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_auth_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_auth_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_auth_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_auth_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_auth_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_auth_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_auth_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_auth_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_auth_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_auth_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_auth_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_auth_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_auth_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_auth_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_auth_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_auth_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_auth_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_auth_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_auth_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_auth_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_auth_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_annotations_proto #############

        set(googleapis_googleapis_google_api_annotations_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_annotations_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_annotations_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_annotations_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_annotations_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_annotations_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_annotations_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_annotations_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_annotations_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_annotations_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_annotations_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_annotations_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_annotations_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_annotations_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_annotations_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_annotations_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_annotations_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_annotations_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_annotations_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_annotations_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_annotations_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_annotations_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_annotations_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_annotations_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_annotations_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_annotations_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_annotations_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_annotations_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_annotations_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_annotations_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_annotations_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_cloudsetup_logging_v1_logging_cc_proto #############

        set(googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_cloudsetup_logging_v1_logging_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_cloudsetup_logging_v1_logging_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_cloudsetup_logging_v1_logging_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_cloudsetup_logging_v1_logging_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_cloudsetup_logging_v1_logging_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_cloudsetup_logging_v1_logging_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_cloudsetup_logging_v1_logging_proto #############

        set(googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_cloudsetup_logging_v1_logging_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_cloudsetup_logging_v1_logging_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_cloudsetup_logging_v1_logging_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_cloudsetup_logging_v1_logging_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_cloudsetup_logging_v1_logging_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_cloudsetup_logging_v1_logging_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_cloudsetup_logging_v1_logging_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_notebooks_logging_v1_logging_cc_proto #############

        set(googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_notebooks_logging_v1_logging_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_notebooks_logging_v1_logging_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_notebooks_logging_v1_logging_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_notebooks_logging_v1_logging_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_notebooks_logging_v1_logging_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_notebooks_logging_v1_logging_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_notebooks_logging_v1_logging_proto #############

        set(googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_notebooks_logging_v1_logging_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_notebooks_logging_v1_logging_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_notebooks_logging_v1_logging_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_notebooks_logging_v1_logging_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_notebooks_logging_v1_logging_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_notebooks_logging_v1_logging_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_notebooks_logging_v1_logging_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_gsuiteaddons_logging_v1_logging_cc_proto #############

        set(googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_gsuiteaddons_logging_v1_logging_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_gsuiteaddons_logging_v1_logging_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_gsuiteaddons_logging_v1_logging_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gsuiteaddons_logging_v1_logging_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gsuiteaddons_logging_v1_logging_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gsuiteaddons_logging_v1_logging_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_gsuiteaddons_logging_v1_logging_proto #############

        set(googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_gsuiteaddons_logging_v1_logging_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_gsuiteaddons_logging_v1_logging_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_gsuiteaddons_logging_v1_logging_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gsuiteaddons_logging_v1_logging_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gsuiteaddons_logging_v1_logging_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gsuiteaddons_logging_v1_logging_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gsuiteaddons_logging_v1_logging_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_clouddms_logging_v1_logging_cc_proto #############

        set(googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_clouddms_logging_v1_logging_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_clouddms_logging_v1_logging_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_clouddms_logging_v1_logging_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_clouddms_logging_v1_logging_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_clouddms_logging_v1_logging_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_clouddms_logging_v1_logging_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_clouddms_logging_v1_logging_proto #############

        set(googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_clouddms_logging_v1_logging_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_clouddms_logging_v1_logging_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_clouddms_logging_v1_logging_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_clouddms_logging_v1_logging_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_clouddms_logging_v1_logging_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_clouddms_logging_v1_logging_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_clouddms_logging_v1_logging_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_common_common_cc_proto #############

        set(googleapis_googleapis_google_cloud_common_common_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_common_common_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_common_common_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_common_common_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_common_common_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_common_common_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_common_common_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_common_common_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_common_common_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_common_common_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_common_common_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_common_common_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_common_common_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_common_common_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_common_common_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_common_common_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_common_common_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_common_common_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_common_common_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_common_common_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_common_common_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_common_common_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_common_common_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_common_common_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_common_common_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_common_common_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_common_common_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_common_common_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_common_common_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_common_common_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_common_common_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_common_common_proto #############

        set(googleapis_googleapis_google_cloud_common_common_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_common_common_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_common_common_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_common_common_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_common_common_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_common_common_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_common_common_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_common_common_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_common_common_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_common_common_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_common_common_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_common_common_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_common_common_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_common_common_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_common_common_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_common_common_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_common_common_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_common_common_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_common_common_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_common_common_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_common_common_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_common_common_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_common_common_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_common_common_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_common_common_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_common_common_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_common_common_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_common_common_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_common_common_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_common_common_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_common_common_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_gkebackup_logging_v1_logging_cc_proto #############

        set(googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_gkebackup_logging_v1_logging_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_gkebackup_logging_v1_logging_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_gkebackup_logging_v1_logging_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkebackup_logging_v1_logging_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkebackup_logging_v1_logging_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkebackup_logging_v1_logging_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_gkebackup_logging_v1_logging_proto #############

        set(googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_gkebackup_logging_v1_logging_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_gkebackup_logging_v1_logging_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_gkebackup_logging_v1_logging_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkebackup_logging_v1_logging_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkebackup_logging_v1_logging_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_gkebackup_logging_v1_logging_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_gkebackup_logging_v1_logging_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_healthcare_logging_logging_cc_proto #############

        set(googleapis_googleapis_google_cloud_healthcare_logging_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_healthcare_logging_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_healthcare_logging_logging_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_healthcare_logging_logging_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_healthcare_logging_logging_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_healthcare_logging_logging_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_healthcare_logging_logging_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_healthcare_logging_logging_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_healthcare_logging_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_healthcare_logging_logging_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_healthcare_logging_logging_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_healthcare_logging_logging_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_healthcare_logging_logging_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_healthcare_logging_logging_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_healthcare_logging_logging_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_healthcare_logging_logging_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_healthcare_logging_logging_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_healthcare_logging_logging_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_healthcare_logging_logging_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_healthcare_logging_logging_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_healthcare_logging_logging_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_healthcare_logging_logging_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_healthcare_logging_logging_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_healthcare_logging_logging_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_healthcare_logging_logging_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_healthcare_logging_logging_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_healthcare_logging_logging_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_healthcare_logging_logging_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_healthcare_logging_logging_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_healthcare_logging_logging_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_healthcare_logging_logging_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_healthcare_logging_logging_proto #############

        set(googleapis_googleapis_google_cloud_healthcare_logging_logging_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_healthcare_logging_logging_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_healthcare_logging_logging_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_healthcare_logging_logging_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_healthcare_logging_logging_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_healthcare_logging_logging_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_healthcare_logging_logging_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_healthcare_logging_logging_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_healthcare_logging_logging_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_healthcare_logging_logging_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_healthcare_logging_logging_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_healthcare_logging_logging_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_healthcare_logging_logging_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_healthcare_logging_logging_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_healthcare_logging_logging_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_healthcare_logging_logging_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_healthcare_logging_logging_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_healthcare_logging_logging_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_healthcare_logging_logging_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_healthcare_logging_logging_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_healthcare_logging_logging_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_healthcare_logging_logging_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_healthcare_logging_logging_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_healthcare_logging_logging_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_healthcare_logging_logging_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_healthcare_logging_logging_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_healthcare_logging_logging_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_healthcare_logging_logging_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_healthcare_logging_logging_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_healthcare_logging_logging_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_healthcare_logging_logging_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_identitytoolkit_logging_logging_cc_proto #############

        set(googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_identitytoolkit_logging_logging_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_identitytoolkit_logging_logging_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_identitytoolkit_logging_logging_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_identitytoolkit_logging_logging_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_identitytoolkit_logging_logging_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_identitytoolkit_logging_logging_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_identitytoolkit_logging_logging_proto #############

        set(googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_identitytoolkit_logging_logging_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_identitytoolkit_logging_logging_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_identitytoolkit_logging_logging_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_identitytoolkit_logging_logging_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_identitytoolkit_logging_logging_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_identitytoolkit_logging_logging_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_identitytoolkit_logging_logging_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_oslogin_common_common_cc_proto #############

        set(googleapis_googleapis_google_cloud_oslogin_common_common_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_oslogin_common_common_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_oslogin_common_common_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_oslogin_common_common_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_oslogin_common_common_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_oslogin_common_common_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_oslogin_common_common_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_oslogin_common_common_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_oslogin_common_common_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_oslogin_common_common_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_oslogin_common_common_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_oslogin_common_common_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_oslogin_common_common_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_oslogin_common_common_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_oslogin_common_common_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_oslogin_common_common_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_oslogin_common_common_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_oslogin_common_common_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_oslogin_common_common_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_oslogin_common_common_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_oslogin_common_common_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_oslogin_common_common_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_oslogin_common_common_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_oslogin_common_common_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_oslogin_common_common_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_oslogin_common_common_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_oslogin_common_common_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_oslogin_common_common_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_oslogin_common_common_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_oslogin_common_common_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_oslogin_common_common_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_oslogin_common_common_proto #############

        set(googleapis_googleapis_google_cloud_oslogin_common_common_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_oslogin_common_common_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_oslogin_common_common_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_oslogin_common_common_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_oslogin_common_common_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_oslogin_common_common_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_oslogin_common_common_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_oslogin_common_common_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_oslogin_common_common_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_oslogin_common_common_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_oslogin_common_common_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_oslogin_common_common_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_oslogin_common_common_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_oslogin_common_common_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_oslogin_common_common_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_oslogin_common_common_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_oslogin_common_common_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_oslogin_common_common_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_oslogin_common_common_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_oslogin_common_common_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_oslogin_common_common_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_oslogin_common_common_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_oslogin_common_common_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_oslogin_common_common_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_oslogin_common_common_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_oslogin_common_common_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_oslogin_common_common_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_oslogin_common_common_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_oslogin_common_common_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_oslogin_common_common_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_oslogin_common_common_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_aiplatform_logging_logging_cc_proto #############

        set(googleapis_googleapis_google_cloud_aiplatform_logging_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_aiplatform_logging_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_aiplatform_logging_logging_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_aiplatform_logging_logging_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_aiplatform_logging_logging_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_aiplatform_logging_logging_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_aiplatform_logging_logging_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_aiplatform_logging_logging_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_logging_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_logging_logging_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_logging_logging_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_aiplatform_logging_logging_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_aiplatform_logging_logging_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_aiplatform_logging_logging_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_aiplatform_logging_logging_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_aiplatform_logging_logging_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_aiplatform_logging_logging_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_aiplatform_logging_logging_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_logging_logging_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_logging_logging_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_aiplatform_logging_logging_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_aiplatform_logging_logging_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_aiplatform_logging_logging_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_aiplatform_logging_logging_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_logging_logging_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_aiplatform_logging_logging_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_logging_logging_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_aiplatform_logging_logging_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_logging_logging_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_aiplatform_logging_logging_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_logging_logging_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_aiplatform_logging_logging_proto #############

        set(googleapis_googleapis_google_cloud_aiplatform_logging_logging_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_aiplatform_logging_logging_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_aiplatform_logging_logging_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_aiplatform_logging_logging_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_aiplatform_logging_logging_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_aiplatform_logging_logging_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_aiplatform_logging_logging_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_aiplatform_logging_logging_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_logging_logging_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_logging_logging_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_logging_logging_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_aiplatform_logging_logging_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_aiplatform_logging_logging_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_aiplatform_logging_logging_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_aiplatform_logging_logging_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_aiplatform_logging_logging_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_aiplatform_logging_logging_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_aiplatform_logging_logging_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_logging_logging_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_logging_logging_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_aiplatform_logging_logging_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_aiplatform_logging_logging_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_aiplatform_logging_logging_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_aiplatform_logging_logging_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_logging_logging_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_aiplatform_logging_logging_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_logging_logging_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_aiplatform_logging_logging_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_logging_logging_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_aiplatform_logging_logging_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_aiplatform_logging_logging_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_geo_type_viewport_cc_proto #############

        set(googleapis_googleapis_google_geo_type_viewport_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_geo_type_viewport_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_geo_type_viewport_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_geo_type_viewport_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_geo_type_viewport_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_geo_type_viewport_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_geo_type_viewport_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_geo_type_viewport_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_geo_type_viewport_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_geo_type_viewport_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_geo_type_viewport_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_geo_type_viewport_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_geo_type_viewport_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_geo_type_viewport_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_geo_type_viewport_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_geo_type_viewport_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_geo_type_viewport_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_geo_type_viewport_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_geo_type_viewport_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_geo_type_viewport_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_geo_type_viewport_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_geo_type_viewport_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_geo_type_viewport_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_geo_type_viewport_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_geo_type_viewport_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_geo_type_viewport_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_geo_type_viewport_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_geo_type_viewport_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_geo_type_viewport_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_geo_type_viewport_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_geo_type_viewport_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_geo_type_viewport_proto #############

        set(googleapis_googleapis_google_geo_type_viewport_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_geo_type_viewport_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_geo_type_viewport_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_geo_type_viewport_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_geo_type_viewport_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_geo_type_viewport_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_geo_type_viewport_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_geo_type_viewport_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_geo_type_viewport_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_geo_type_viewport_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_geo_type_viewport_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_geo_type_viewport_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_geo_type_viewport_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_geo_type_viewport_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_geo_type_viewport_proto_DEPS_TARGET
                                      googleapis_googleapis_google_geo_type_viewport_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_geo_type_viewport_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_geo_type_viewport_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_geo_type_viewport_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_geo_type_viewport_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_geo_type_viewport_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_geo_type_viewport_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_geo_type_viewport_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_geo_type_viewport_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_geo_type_viewport_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_geo_type_viewport_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_geo_type_viewport_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_geo_type_viewport_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_geo_type_viewport_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_geo_type_viewport_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_geo_type_viewport_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_storagetransfer_logging_logging_cc_proto #############

        set(googleapis_googleapis_google_storagetransfer_logging_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_storagetransfer_logging_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_storagetransfer_logging_logging_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_storagetransfer_logging_logging_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_storagetransfer_logging_logging_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_storagetransfer_logging_logging_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_storagetransfer_logging_logging_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_storagetransfer_logging_logging_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storagetransfer_logging_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storagetransfer_logging_logging_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storagetransfer_logging_logging_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_storagetransfer_logging_logging_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_storagetransfer_logging_logging_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_storagetransfer_logging_logging_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_storagetransfer_logging_logging_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_storagetransfer_logging_logging_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_storagetransfer_logging_logging_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_storagetransfer_logging_logging_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storagetransfer_logging_logging_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storagetransfer_logging_logging_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_storagetransfer_logging_logging_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_storagetransfer_logging_logging_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_storagetransfer_logging_logging_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_storagetransfer_logging_logging_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storagetransfer_logging_logging_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_storagetransfer_logging_logging_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storagetransfer_logging_logging_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_storagetransfer_logging_logging_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storagetransfer_logging_logging_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_storagetransfer_logging_logging_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storagetransfer_logging_logging_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_storagetransfer_logging_logging_proto #############

        set(googleapis_googleapis_google_storagetransfer_logging_logging_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_storagetransfer_logging_logging_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_storagetransfer_logging_logging_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_storagetransfer_logging_logging_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_storagetransfer_logging_logging_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_storagetransfer_logging_logging_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_storagetransfer_logging_logging_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_storagetransfer_logging_logging_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storagetransfer_logging_logging_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storagetransfer_logging_logging_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storagetransfer_logging_logging_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_storagetransfer_logging_logging_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_storagetransfer_logging_logging_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_storagetransfer_logging_logging_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_storagetransfer_logging_logging_proto_DEPS_TARGET
                                      googleapis_googleapis_google_storagetransfer_logging_logging_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_storagetransfer_logging_logging_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_storagetransfer_logging_logging_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storagetransfer_logging_logging_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storagetransfer_logging_logging_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_storagetransfer_logging_logging_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_storagetransfer_logging_logging_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_storagetransfer_logging_logging_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_storagetransfer_logging_logging_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storagetransfer_logging_logging_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_storagetransfer_logging_logging_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storagetransfer_logging_logging_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_storagetransfer_logging_logging_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storagetransfer_logging_logging_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_storagetransfer_logging_logging_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_storagetransfer_logging_logging_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_chat_logging_v1_logging_cc_proto #############

        set(googleapis_googleapis_google_chat_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_chat_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_chat_logging_v1_logging_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_chat_logging_v1_logging_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_chat_logging_v1_logging_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_chat_logging_v1_logging_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_chat_logging_v1_logging_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_chat_logging_v1_logging_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_chat_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_chat_logging_v1_logging_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_chat_logging_v1_logging_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_chat_logging_v1_logging_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_chat_logging_v1_logging_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_chat_logging_v1_logging_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_chat_logging_v1_logging_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_chat_logging_v1_logging_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_chat_logging_v1_logging_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_chat_logging_v1_logging_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_chat_logging_v1_logging_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_chat_logging_v1_logging_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_chat_logging_v1_logging_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_chat_logging_v1_logging_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_chat_logging_v1_logging_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_chat_logging_v1_logging_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_chat_logging_v1_logging_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_chat_logging_v1_logging_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_chat_logging_v1_logging_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_chat_logging_v1_logging_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_chat_logging_v1_logging_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_chat_logging_v1_logging_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_chat_logging_v1_logging_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_chat_logging_v1_logging_proto #############

        set(googleapis_googleapis_google_chat_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_chat_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_chat_logging_v1_logging_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_chat_logging_v1_logging_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_chat_logging_v1_logging_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_chat_logging_v1_logging_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_chat_logging_v1_logging_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_chat_logging_v1_logging_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_chat_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_chat_logging_v1_logging_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_chat_logging_v1_logging_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_chat_logging_v1_logging_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_chat_logging_v1_logging_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_chat_logging_v1_logging_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_chat_logging_v1_logging_proto_DEPS_TARGET
                                      googleapis_googleapis_google_chat_logging_v1_logging_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_chat_logging_v1_logging_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_chat_logging_v1_logging_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_chat_logging_v1_logging_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_chat_logging_v1_logging_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_chat_logging_v1_logging_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_chat_logging_v1_logging_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_chat_logging_v1_logging_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_chat_logging_v1_logging_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_chat_logging_v1_logging_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_chat_logging_v1_logging_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_chat_logging_v1_logging_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_chat_logging_v1_logging_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_chat_logging_v1_logging_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_chat_logging_v1_logging_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_chat_logging_v1_logging_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_apps_script_type_gmail_gmail_proto #############

        set(googleapis_googleapis_google_apps_script_type_gmail_gmail_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_apps_script_type_gmail_gmail_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_apps_script_type_gmail_gmail_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_apps_script_type_gmail_gmail_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_apps_script_type_gmail_gmail_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_apps_script_type_gmail_gmail_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_apps_script_type_gmail_gmail_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_apps_script_type_gmail_gmail_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_gmail_gmail_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_gmail_gmail_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_gmail_gmail_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_apps_script_type_gmail_gmail_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_apps_script_type_gmail_gmail_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_apps_script_type_gmail_gmail_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_apps_script_type_gmail_gmail_proto_DEPS_TARGET
                                      googleapis_googleapis_google_apps_script_type_gmail_gmail_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_apps_script_type_gmail_gmail_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_apps_script_type_gmail_gmail_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_gmail_gmail_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_gmail_gmail_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_apps_script_type_gmail_gmail_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_apps_script_type_gmail_gmail_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_apps_script_type_gmail_gmail_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_apps_script_type_gmail_gmail_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_gmail_gmail_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_apps_script_type_gmail_gmail_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_gmail_gmail_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_apps_script_type_gmail_gmail_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_gmail_gmail_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_apps_script_type_gmail_gmail_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_gmail_gmail_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_apps_script_type_drive_drive_proto #############

        set(googleapis_googleapis_google_apps_script_type_drive_drive_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_apps_script_type_drive_drive_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_apps_script_type_drive_drive_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_apps_script_type_drive_drive_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_apps_script_type_drive_drive_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_apps_script_type_drive_drive_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_apps_script_type_drive_drive_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_apps_script_type_drive_drive_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_drive_drive_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_drive_drive_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_drive_drive_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_apps_script_type_drive_drive_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_apps_script_type_drive_drive_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_apps_script_type_drive_drive_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_apps_script_type_drive_drive_proto_DEPS_TARGET
                                      googleapis_googleapis_google_apps_script_type_drive_drive_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_apps_script_type_drive_drive_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_apps_script_type_drive_drive_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_drive_drive_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_drive_drive_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_apps_script_type_drive_drive_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_apps_script_type_drive_drive_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_apps_script_type_drive_drive_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_apps_script_type_drive_drive_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_drive_drive_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_apps_script_type_drive_drive_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_drive_drive_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_apps_script_type_drive_drive_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_drive_drive_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_apps_script_type_drive_drive_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_drive_drive_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_apps_script_type_slides_slides_proto #############

        set(googleapis_googleapis_google_apps_script_type_slides_slides_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_apps_script_type_slides_slides_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_apps_script_type_slides_slides_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_apps_script_type_slides_slides_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_apps_script_type_slides_slides_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_apps_script_type_slides_slides_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_apps_script_type_slides_slides_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_apps_script_type_slides_slides_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_slides_slides_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_slides_slides_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_slides_slides_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_apps_script_type_slides_slides_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_apps_script_type_slides_slides_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_apps_script_type_slides_slides_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_apps_script_type_slides_slides_proto_DEPS_TARGET
                                      googleapis_googleapis_google_apps_script_type_slides_slides_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_apps_script_type_slides_slides_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_apps_script_type_slides_slides_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_slides_slides_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_slides_slides_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_apps_script_type_slides_slides_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_apps_script_type_slides_slides_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_apps_script_type_slides_slides_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_apps_script_type_slides_slides_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_slides_slides_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_apps_script_type_slides_slides_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_slides_slides_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_apps_script_type_slides_slides_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_slides_slides_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_apps_script_type_slides_slides_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_slides_slides_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_apps_script_type_docs_docs_proto #############

        set(googleapis_googleapis_google_apps_script_type_docs_docs_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_apps_script_type_docs_docs_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_apps_script_type_docs_docs_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_apps_script_type_docs_docs_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_apps_script_type_docs_docs_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_apps_script_type_docs_docs_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_apps_script_type_docs_docs_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_apps_script_type_docs_docs_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_docs_docs_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_docs_docs_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_docs_docs_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_apps_script_type_docs_docs_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_apps_script_type_docs_docs_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_apps_script_type_docs_docs_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_apps_script_type_docs_docs_proto_DEPS_TARGET
                                      googleapis_googleapis_google_apps_script_type_docs_docs_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_apps_script_type_docs_docs_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_apps_script_type_docs_docs_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_docs_docs_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_docs_docs_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_apps_script_type_docs_docs_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_apps_script_type_docs_docs_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_apps_script_type_docs_docs_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_apps_script_type_docs_docs_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_docs_docs_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_apps_script_type_docs_docs_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_docs_docs_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_apps_script_type_docs_docs_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_docs_docs_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_apps_script_type_docs_docs_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_docs_docs_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_apps_script_type_sheets_sheets_proto #############

        set(googleapis_googleapis_google_apps_script_type_sheets_sheets_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_apps_script_type_sheets_sheets_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_apps_script_type_sheets_sheets_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_apps_script_type_sheets_sheets_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_apps_script_type_sheets_sheets_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_apps_script_type_sheets_sheets_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_apps_script_type_sheets_sheets_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_apps_script_type_sheets_sheets_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_sheets_sheets_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_sheets_sheets_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_sheets_sheets_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_apps_script_type_sheets_sheets_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_apps_script_type_sheets_sheets_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_apps_script_type_sheets_sheets_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_apps_script_type_sheets_sheets_proto_DEPS_TARGET
                                      googleapis_googleapis_google_apps_script_type_sheets_sheets_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_apps_script_type_sheets_sheets_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_apps_script_type_sheets_sheets_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_sheets_sheets_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_sheets_sheets_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_apps_script_type_sheets_sheets_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_apps_script_type_sheets_sheets_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_apps_script_type_sheets_sheets_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_apps_script_type_sheets_sheets_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_sheets_sheets_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_apps_script_type_sheets_sheets_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_sheets_sheets_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_apps_script_type_sheets_sheets_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_sheets_sheets_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_apps_script_type_sheets_sheets_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_sheets_sheets_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_apps_script_type_calendar_calendar_proto #############

        set(googleapis_googleapis_google_apps_script_type_calendar_calendar_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_apps_script_type_calendar_calendar_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_apps_script_type_calendar_calendar_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_apps_script_type_calendar_calendar_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_apps_script_type_calendar_calendar_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_apps_script_type_calendar_calendar_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_apps_script_type_calendar_calendar_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_apps_script_type_calendar_calendar_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_calendar_calendar_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_calendar_calendar_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_calendar_calendar_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_apps_script_type_calendar_calendar_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_apps_script_type_calendar_calendar_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_apps_script_type_calendar_calendar_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_apps_script_type_calendar_calendar_proto_DEPS_TARGET
                                      googleapis_googleapis_google_apps_script_type_calendar_calendar_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_apps_script_type_calendar_calendar_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_apps_script_type_calendar_calendar_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_calendar_calendar_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_calendar_calendar_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_apps_script_type_calendar_calendar_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_apps_script_type_calendar_calendar_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_apps_script_type_calendar_calendar_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_apps_script_type_calendar_calendar_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_calendar_calendar_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_apps_script_type_calendar_calendar_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_calendar_calendar_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_apps_script_type_calendar_calendar_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_calendar_calendar_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_apps_script_type_calendar_calendar_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_calendar_calendar_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_apps_script_type_type_proto #############

        set(googleapis_googleapis_google_apps_script_type_type_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_apps_script_type_type_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_apps_script_type_type_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_apps_script_type_type_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_apps_script_type_type_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_apps_script_type_type_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_apps_script_type_type_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_apps_script_type_type_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_type_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_type_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_type_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_apps_script_type_type_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_apps_script_type_type_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_apps_script_type_type_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_apps_script_type_type_proto_DEPS_TARGET
                                      googleapis_googleapis_google_apps_script_type_type_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_apps_script_type_type_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_apps_script_type_type_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_type_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_type_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_apps_script_type_type_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_apps_script_type_type_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_apps_script_type_type_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_apps_script_type_type_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_type_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_apps_script_type_type_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_type_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_apps_script_type_type_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_type_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_apps_script_type_type_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_apps_script_type_type_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_rpc_context_attribute_context_cc_proto #############

        set(googleapis_googleapis_google_rpc_context_attribute_context_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_rpc_context_attribute_context_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_rpc_context_attribute_context_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_rpc_context_attribute_context_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_rpc_context_attribute_context_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_rpc_context_attribute_context_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_rpc_context_attribute_context_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_rpc_context_attribute_context_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_context_attribute_context_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_context_attribute_context_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_context_attribute_context_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_rpc_context_attribute_context_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_rpc_context_attribute_context_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_rpc_context_attribute_context_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_rpc_context_attribute_context_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_rpc_context_attribute_context_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_rpc_context_attribute_context_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_rpc_context_attribute_context_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_context_attribute_context_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_context_attribute_context_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_rpc_context_attribute_context_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_rpc_context_attribute_context_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_rpc_context_attribute_context_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_rpc_context_attribute_context_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_context_attribute_context_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_rpc_context_attribute_context_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_context_attribute_context_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_rpc_context_attribute_context_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_context_attribute_context_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_rpc_context_attribute_context_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_context_attribute_context_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_rpc_context_attribute_context_proto #############

        set(googleapis_googleapis_google_rpc_context_attribute_context_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_rpc_context_attribute_context_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_rpc_context_attribute_context_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_rpc_context_attribute_context_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_rpc_context_attribute_context_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_rpc_context_attribute_context_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_rpc_context_attribute_context_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_rpc_context_attribute_context_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_context_attribute_context_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_context_attribute_context_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_context_attribute_context_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_rpc_context_attribute_context_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_rpc_context_attribute_context_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_rpc_context_attribute_context_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_rpc_context_attribute_context_proto_DEPS_TARGET
                                      googleapis_googleapis_google_rpc_context_attribute_context_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_rpc_context_attribute_context_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_rpc_context_attribute_context_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_context_attribute_context_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_context_attribute_context_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_rpc_context_attribute_context_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_rpc_context_attribute_context_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_rpc_context_attribute_context_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_rpc_context_attribute_context_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_context_attribute_context_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_rpc_context_attribute_context_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_context_attribute_context_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_rpc_context_attribute_context_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_context_attribute_context_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_rpc_context_attribute_context_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_context_attribute_context_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_rpc_status_cc_proto #############

        set(googleapis_googleapis_google_rpc_status_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_rpc_status_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_rpc_status_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_rpc_status_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_rpc_status_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_rpc_status_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_rpc_status_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_rpc_status_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_status_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_status_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_status_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_rpc_status_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_rpc_status_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_rpc_status_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_rpc_status_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_rpc_status_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_rpc_status_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_rpc_status_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_status_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_status_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_rpc_status_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_rpc_status_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_rpc_status_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_rpc_status_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_status_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_rpc_status_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_status_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_rpc_status_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_status_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_rpc_status_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_status_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_rpc_error_details_cc_proto #############

        set(googleapis_googleapis_google_rpc_error_details_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_rpc_error_details_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_rpc_error_details_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_rpc_error_details_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_rpc_error_details_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_rpc_error_details_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_rpc_error_details_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_rpc_error_details_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_error_details_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_error_details_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_error_details_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_rpc_error_details_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_rpc_error_details_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_rpc_error_details_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_rpc_error_details_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_rpc_error_details_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_rpc_error_details_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_rpc_error_details_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_error_details_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_error_details_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_rpc_error_details_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_rpc_error_details_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_rpc_error_details_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_rpc_error_details_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_error_details_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_rpc_error_details_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_error_details_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_rpc_error_details_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_error_details_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_rpc_error_details_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_error_details_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_rpc_code_cc_proto #############

        set(googleapis_googleapis_google_rpc_code_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_rpc_code_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_rpc_code_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_rpc_code_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_rpc_code_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_rpc_code_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_rpc_code_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_rpc_code_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_code_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_code_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_code_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_rpc_code_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_rpc_code_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_rpc_code_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_rpc_code_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_rpc_code_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_rpc_code_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_rpc_code_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_code_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_code_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_rpc_code_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_rpc_code_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_rpc_code_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_rpc_code_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_code_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_rpc_code_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_code_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_rpc_code_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_code_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_rpc_code_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_code_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_rpc_status_proto #############

        set(googleapis_googleapis_google_rpc_status_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_rpc_status_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_rpc_status_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_rpc_status_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_rpc_status_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_rpc_status_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_rpc_status_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_rpc_status_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_status_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_status_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_status_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_rpc_status_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_rpc_status_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_rpc_status_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_rpc_status_proto_DEPS_TARGET
                                      googleapis_googleapis_google_rpc_status_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_rpc_status_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_rpc_status_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_status_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_status_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_rpc_status_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_rpc_status_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_rpc_status_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_rpc_status_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_status_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_rpc_status_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_status_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_rpc_status_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_status_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_rpc_status_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_status_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_rpc_error_details_proto #############

        set(googleapis_googleapis_google_rpc_error_details_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_rpc_error_details_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_rpc_error_details_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_rpc_error_details_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_rpc_error_details_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_rpc_error_details_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_rpc_error_details_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_rpc_error_details_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_error_details_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_error_details_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_error_details_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_rpc_error_details_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_rpc_error_details_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_rpc_error_details_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_rpc_error_details_proto_DEPS_TARGET
                                      googleapis_googleapis_google_rpc_error_details_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_rpc_error_details_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_rpc_error_details_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_error_details_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_error_details_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_rpc_error_details_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_rpc_error_details_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_rpc_error_details_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_rpc_error_details_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_error_details_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_rpc_error_details_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_error_details_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_rpc_error_details_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_error_details_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_rpc_error_details_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_error_details_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_rpc_code_proto #############

        set(googleapis_googleapis_google_rpc_code_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_rpc_code_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_rpc_code_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_rpc_code_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_rpc_code_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_rpc_code_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_rpc_code_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_rpc_code_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_code_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_code_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_code_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_rpc_code_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_rpc_code_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_rpc_code_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_rpc_code_proto_DEPS_TARGET
                                      googleapis_googleapis_google_rpc_code_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_rpc_code_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_rpc_code_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_code_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_code_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_rpc_code_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_rpc_code_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_rpc_code_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_rpc_code_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_code_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_rpc_code_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_code_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_rpc_code_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_code_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_rpc_code_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_rpc_code_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_expr_v1alpha1_value_cc_proto #############

        set(googleapis_googleapis_google_api_expr_v1alpha1_value_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_expr_v1alpha1_value_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_expr_v1alpha1_value_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_expr_v1alpha1_value_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_expr_v1alpha1_value_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_expr_v1alpha1_value_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_expr_v1alpha1_value_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_expr_v1alpha1_value_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_value_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_value_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_value_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_expr_v1alpha1_value_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_expr_v1alpha1_value_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_expr_v1alpha1_value_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_expr_v1alpha1_value_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_expr_v1alpha1_value_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_expr_v1alpha1_value_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_expr_v1alpha1_value_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_value_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_value_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_expr_v1alpha1_value_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_expr_v1alpha1_value_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_expr_v1alpha1_value_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_expr_v1alpha1_value_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_value_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1alpha1_value_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_value_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1alpha1_value_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_value_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1alpha1_value_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_value_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_expr_v1alpha1_syntax_cc_proto #############

        set(googleapis_googleapis_google_api_expr_v1alpha1_syntax_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_expr_v1alpha1_syntax_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_expr_v1alpha1_syntax_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_expr_v1alpha1_syntax_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_expr_v1alpha1_syntax_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_expr_v1alpha1_syntax_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_expr_v1alpha1_syntax_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_expr_v1alpha1_syntax_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_syntax_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_syntax_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_syntax_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_expr_v1alpha1_syntax_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_expr_v1alpha1_syntax_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_expr_v1alpha1_syntax_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_expr_v1alpha1_syntax_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_expr_v1alpha1_syntax_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_expr_v1alpha1_syntax_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_expr_v1alpha1_syntax_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_syntax_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_syntax_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_expr_v1alpha1_syntax_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_expr_v1alpha1_syntax_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_expr_v1alpha1_syntax_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_expr_v1alpha1_syntax_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_syntax_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1alpha1_syntax_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_syntax_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1alpha1_syntax_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_syntax_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1alpha1_syntax_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_syntax_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_expr_v1alpha1_value_proto #############

        set(googleapis_googleapis_google_api_expr_v1alpha1_value_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_expr_v1alpha1_value_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_expr_v1alpha1_value_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_expr_v1alpha1_value_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_expr_v1alpha1_value_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_expr_v1alpha1_value_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_expr_v1alpha1_value_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_expr_v1alpha1_value_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_value_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_value_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_value_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_expr_v1alpha1_value_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_expr_v1alpha1_value_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_expr_v1alpha1_value_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_expr_v1alpha1_value_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_expr_v1alpha1_value_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_expr_v1alpha1_value_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_expr_v1alpha1_value_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_value_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_value_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_expr_v1alpha1_value_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_expr_v1alpha1_value_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_expr_v1alpha1_value_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_expr_v1alpha1_value_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_value_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1alpha1_value_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_value_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1alpha1_value_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_value_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1alpha1_value_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_value_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_expr_v1alpha1_syntax_proto #############

        set(googleapis_googleapis_google_api_expr_v1alpha1_syntax_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_expr_v1alpha1_syntax_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_expr_v1alpha1_syntax_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_expr_v1alpha1_syntax_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_expr_v1alpha1_syntax_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_expr_v1alpha1_syntax_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_expr_v1alpha1_syntax_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_expr_v1alpha1_syntax_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_syntax_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_syntax_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_syntax_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_expr_v1alpha1_syntax_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_expr_v1alpha1_syntax_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_expr_v1alpha1_syntax_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_expr_v1alpha1_syntax_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_expr_v1alpha1_syntax_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_expr_v1alpha1_syntax_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_expr_v1alpha1_syntax_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_syntax_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_syntax_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_expr_v1alpha1_syntax_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_expr_v1alpha1_syntax_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_expr_v1alpha1_syntax_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_expr_v1alpha1_syntax_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_syntax_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1alpha1_syntax_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_syntax_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1alpha1_syntax_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_syntax_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1alpha1_syntax_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1alpha1_syntax_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_expr_v1beta1_value_cc_proto #############

        set(googleapis_googleapis_google_api_expr_v1beta1_value_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_expr_v1beta1_value_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_expr_v1beta1_value_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_expr_v1beta1_value_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_expr_v1beta1_value_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_expr_v1beta1_value_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_expr_v1beta1_value_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_expr_v1beta1_value_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_value_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_value_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_value_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_expr_v1beta1_value_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_expr_v1beta1_value_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_expr_v1beta1_value_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_expr_v1beta1_value_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_expr_v1beta1_value_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_expr_v1beta1_value_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_expr_v1beta1_value_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_value_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_value_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_expr_v1beta1_value_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_expr_v1beta1_value_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_expr_v1beta1_value_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_expr_v1beta1_value_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_value_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1beta1_value_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_value_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1beta1_value_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_value_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1beta1_value_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_value_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_expr_v1beta1_source_cc_proto #############

        set(googleapis_googleapis_google_api_expr_v1beta1_source_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_expr_v1beta1_source_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_expr_v1beta1_source_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_expr_v1beta1_source_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_expr_v1beta1_source_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_expr_v1beta1_source_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_expr_v1beta1_source_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_expr_v1beta1_source_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_source_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_source_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_source_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_expr_v1beta1_source_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_expr_v1beta1_source_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_expr_v1beta1_source_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_expr_v1beta1_source_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_expr_v1beta1_source_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_expr_v1beta1_source_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_expr_v1beta1_source_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_source_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_source_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_expr_v1beta1_source_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_expr_v1beta1_source_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_expr_v1beta1_source_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_expr_v1beta1_source_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_source_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1beta1_source_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_source_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1beta1_source_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_source_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1beta1_source_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_source_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_expr_v1beta1_value_proto #############

        set(googleapis_googleapis_google_api_expr_v1beta1_value_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_expr_v1beta1_value_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_expr_v1beta1_value_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_expr_v1beta1_value_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_expr_v1beta1_value_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_expr_v1beta1_value_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_expr_v1beta1_value_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_expr_v1beta1_value_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_value_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_value_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_value_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_expr_v1beta1_value_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_expr_v1beta1_value_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_expr_v1beta1_value_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_expr_v1beta1_value_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_expr_v1beta1_value_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_expr_v1beta1_value_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_expr_v1beta1_value_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_value_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_value_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_expr_v1beta1_value_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_expr_v1beta1_value_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_expr_v1beta1_value_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_expr_v1beta1_value_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_value_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1beta1_value_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_value_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1beta1_value_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_value_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1beta1_value_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_value_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_expr_v1beta1_source_proto #############

        set(googleapis_googleapis_google_api_expr_v1beta1_source_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_expr_v1beta1_source_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_expr_v1beta1_source_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_expr_v1beta1_source_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_expr_v1beta1_source_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_expr_v1beta1_source_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_expr_v1beta1_source_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_expr_v1beta1_source_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_source_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_source_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_source_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_expr_v1beta1_source_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_expr_v1beta1_source_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_expr_v1beta1_source_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_expr_v1beta1_source_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_expr_v1beta1_source_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_expr_v1beta1_source_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_expr_v1beta1_source_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_source_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_source_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_expr_v1beta1_source_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_expr_v1beta1_source_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_expr_v1beta1_source_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_expr_v1beta1_source_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_source_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1beta1_source_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_source_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1beta1_source_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_source_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_expr_v1beta1_source_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_expr_v1beta1_source_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_visibility_cc_proto #############

        set(googleapis_googleapis_google_api_visibility_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_visibility_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_visibility_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_visibility_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_visibility_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_visibility_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_visibility_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_visibility_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_visibility_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_visibility_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_visibility_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_visibility_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_visibility_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_visibility_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_visibility_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_visibility_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_visibility_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_visibility_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_visibility_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_visibility_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_visibility_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_visibility_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_visibility_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_visibility_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_visibility_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_visibility_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_visibility_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_visibility_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_visibility_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_visibility_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_visibility_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_system_parameter_cc_proto #############

        set(googleapis_googleapis_google_api_system_parameter_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_system_parameter_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_system_parameter_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_system_parameter_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_system_parameter_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_system_parameter_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_system_parameter_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_system_parameter_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_system_parameter_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_system_parameter_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_system_parameter_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_system_parameter_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_system_parameter_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_system_parameter_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_system_parameter_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_system_parameter_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_system_parameter_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_system_parameter_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_system_parameter_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_system_parameter_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_system_parameter_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_system_parameter_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_system_parameter_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_system_parameter_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_system_parameter_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_system_parameter_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_system_parameter_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_system_parameter_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_system_parameter_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_system_parameter_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_system_parameter_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_source_info_cc_proto #############

        set(googleapis_googleapis_google_api_source_info_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_source_info_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_source_info_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_source_info_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_source_info_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_source_info_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_source_info_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_source_info_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_source_info_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_source_info_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_source_info_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_source_info_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_source_info_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_source_info_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_source_info_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_source_info_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_source_info_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_source_info_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_source_info_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_source_info_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_source_info_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_source_info_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_source_info_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_source_info_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_source_info_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_source_info_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_source_info_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_source_info_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_source_info_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_source_info_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_source_info_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_routing_cc_proto #############

        set(googleapis_googleapis_google_api_routing_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_routing_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_routing_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_routing_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_routing_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_routing_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_routing_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_routing_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_routing_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_routing_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_routing_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_routing_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_routing_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_routing_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_routing_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_routing_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_routing_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_routing_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_routing_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_routing_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_routing_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_routing_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_routing_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_routing_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_routing_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_routing_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_routing_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_routing_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_routing_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_routing_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_routing_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_resource_cc_proto #############

        set(googleapis_googleapis_google_api_resource_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_resource_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_resource_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_resource_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_resource_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_resource_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_resource_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_resource_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_resource_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_resource_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_resource_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_resource_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_resource_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_resource_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_resource_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_resource_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_resource_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_resource_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_resource_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_resource_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_resource_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_resource_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_resource_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_resource_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_resource_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_resource_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_resource_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_resource_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_resource_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_resource_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_resource_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_monitored_resource_cc_proto #############

        set(googleapis_googleapis_google_api_monitored_resource_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_monitored_resource_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_monitored_resource_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_monitored_resource_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_monitored_resource_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_monitored_resource_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_monitored_resource_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_monitored_resource_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_monitored_resource_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_monitored_resource_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_monitored_resource_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_monitored_resource_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_monitored_resource_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_monitored_resource_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_monitored_resource_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_monitored_resource_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_monitored_resource_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_monitored_resource_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_monitored_resource_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_monitored_resource_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_monitored_resource_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_monitored_resource_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_monitored_resource_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_monitored_resource_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_monitored_resource_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_monitored_resource_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_monitored_resource_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_monitored_resource_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_monitored_resource_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_monitored_resource_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_monitored_resource_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_metric_cc_proto #############

        set(googleapis_googleapis_google_api_metric_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_metric_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_metric_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_metric_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_metric_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_metric_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_metric_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_metric_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_metric_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_metric_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_metric_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_metric_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_metric_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_metric_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_metric_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_metric_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_metric_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_metric_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_metric_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_metric_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_metric_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_metric_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_metric_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_metric_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_metric_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_metric_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_metric_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_metric_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_metric_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_metric_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_metric_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_log_cc_proto #############

        set(googleapis_googleapis_google_api_log_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_log_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_log_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_log_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_log_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_log_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_log_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_log_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_log_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_log_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_log_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_log_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_log_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_log_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_log_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_log_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_log_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_log_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_log_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_log_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_log_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_log_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_log_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_log_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_log_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_log_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_log_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_log_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_log_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_log_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_log_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_launch_stage_cc_proto #############

        set(googleapis_googleapis_google_api_launch_stage_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_launch_stage_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_launch_stage_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_launch_stage_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_launch_stage_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_launch_stage_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_launch_stage_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_launch_stage_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_launch_stage_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_launch_stage_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_launch_stage_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_launch_stage_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_launch_stage_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_launch_stage_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_launch_stage_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_launch_stage_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_launch_stage_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_launch_stage_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_launch_stage_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_launch_stage_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_launch_stage_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_launch_stage_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_launch_stage_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_launch_stage_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_launch_stage_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_launch_stage_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_launch_stage_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_launch_stage_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_launch_stage_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_launch_stage_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_launch_stage_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_label_cc_proto #############

        set(googleapis_googleapis_google_api_label_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_label_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_label_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_label_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_label_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_label_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_label_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_label_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_label_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_label_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_label_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_label_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_label_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_label_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_label_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_label_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_label_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_label_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_label_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_label_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_label_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_label_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_label_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_label_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_label_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_label_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_label_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_label_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_label_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_label_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_label_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_httpbody_cc_proto #############

        set(googleapis_googleapis_google_api_httpbody_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_httpbody_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_httpbody_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_httpbody_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_httpbody_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_httpbody_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_httpbody_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_httpbody_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_httpbody_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_httpbody_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_httpbody_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_httpbody_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_httpbody_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_httpbody_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_httpbody_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_httpbody_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_httpbody_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_httpbody_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_httpbody_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_httpbody_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_httpbody_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_httpbody_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_httpbody_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_httpbody_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_httpbody_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_httpbody_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_httpbody_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_httpbody_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_httpbody_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_httpbody_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_httpbody_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_http_cc_proto #############

        set(googleapis_googleapis_google_api_http_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_http_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_http_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_http_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_http_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_http_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_http_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_http_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_http_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_http_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_http_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_http_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_http_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_http_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_http_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_http_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_http_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_http_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_http_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_http_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_http_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_http_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_http_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_http_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_http_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_http_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_http_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_http_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_http_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_http_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_http_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_field_behavior_cc_proto #############

        set(googleapis_googleapis_google_api_field_behavior_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_field_behavior_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_field_behavior_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_field_behavior_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_field_behavior_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_field_behavior_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_field_behavior_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_field_behavior_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_field_behavior_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_field_behavior_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_field_behavior_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_field_behavior_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_field_behavior_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_field_behavior_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_field_behavior_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_field_behavior_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_field_behavior_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_field_behavior_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_field_behavior_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_field_behavior_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_field_behavior_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_field_behavior_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_field_behavior_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_field_behavior_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_field_behavior_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_field_behavior_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_field_behavior_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_field_behavior_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_field_behavior_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_field_behavior_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_field_behavior_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_documentation_cc_proto #############

        set(googleapis_googleapis_google_api_documentation_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_documentation_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_documentation_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_documentation_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_documentation_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_documentation_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_documentation_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_documentation_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_documentation_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_documentation_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_documentation_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_documentation_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_documentation_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_documentation_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_documentation_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_documentation_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_documentation_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_documentation_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_documentation_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_documentation_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_documentation_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_documentation_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_documentation_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_documentation_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_documentation_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_documentation_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_documentation_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_documentation_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_documentation_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_documentation_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_documentation_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_control_cc_proto #############

        set(googleapis_googleapis_google_api_control_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_control_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_control_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_control_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_control_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_control_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_control_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_control_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_control_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_control_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_control_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_control_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_control_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_control_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_control_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_control_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_control_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_control_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_control_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_control_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_control_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_control_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_control_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_control_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_control_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_control_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_control_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_control_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_control_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_control_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_control_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_context_cc_proto #############

        set(googleapis_googleapis_google_api_context_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_context_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_context_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_context_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_context_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_context_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_context_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_context_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_context_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_context_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_context_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_context_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_context_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_context_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_context_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_context_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_context_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_context_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_context_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_context_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_context_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_context_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_context_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_context_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_context_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_context_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_context_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_context_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_context_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_context_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_context_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_consumer_cc_proto #############

        set(googleapis_googleapis_google_api_consumer_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_consumer_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_consumer_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_consumer_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_consumer_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_consumer_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_consumer_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_consumer_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_consumer_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_consumer_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_consumer_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_consumer_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_consumer_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_consumer_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_consumer_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_consumer_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_consumer_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_consumer_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_consumer_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_consumer_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_consumer_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_consumer_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_consumer_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_consumer_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_consumer_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_consumer_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_consumer_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_consumer_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_consumer_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_consumer_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_consumer_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_config_change_cc_proto #############

        set(googleapis_googleapis_google_api_config_change_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_config_change_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_config_change_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_config_change_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_config_change_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_config_change_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_config_change_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_config_change_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_config_change_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_config_change_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_config_change_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_config_change_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_config_change_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_config_change_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_config_change_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_config_change_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_config_change_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_config_change_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_config_change_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_config_change_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_config_change_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_config_change_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_config_change_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_config_change_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_config_change_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_config_change_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_config_change_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_config_change_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_config_change_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_config_change_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_config_change_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_client_cc_proto #############

        set(googleapis_googleapis_google_api_client_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_client_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_client_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_client_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_client_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_client_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_client_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_client_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_client_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_client_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_client_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_client_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_client_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_client_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_client_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_client_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_client_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_client_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_client_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_client_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_client_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_client_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_client_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_client_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_client_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_client_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_client_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_client_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_client_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_client_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_client_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_backend_cc_proto #############

        set(googleapis_googleapis_google_api_backend_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_backend_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_backend_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_backend_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_backend_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_backend_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_backend_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_backend_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_backend_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_backend_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_backend_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_backend_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_backend_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_backend_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_backend_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_backend_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_backend_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_backend_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_backend_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_backend_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_backend_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_backend_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_backend_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_backend_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_backend_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_backend_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_backend_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_backend_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_backend_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_backend_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_backend_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_visibility_proto #############

        set(googleapis_googleapis_google_api_visibility_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_visibility_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_visibility_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_visibility_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_visibility_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_visibility_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_visibility_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_visibility_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_visibility_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_visibility_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_visibility_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_visibility_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_visibility_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_visibility_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_visibility_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_visibility_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_visibility_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_visibility_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_visibility_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_visibility_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_visibility_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_visibility_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_visibility_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_visibility_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_visibility_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_visibility_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_visibility_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_visibility_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_visibility_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_visibility_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_visibility_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_system_parameter_proto #############

        set(googleapis_googleapis_google_api_system_parameter_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_system_parameter_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_system_parameter_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_system_parameter_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_system_parameter_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_system_parameter_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_system_parameter_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_system_parameter_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_system_parameter_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_system_parameter_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_system_parameter_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_system_parameter_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_system_parameter_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_system_parameter_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_system_parameter_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_system_parameter_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_system_parameter_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_system_parameter_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_system_parameter_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_system_parameter_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_system_parameter_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_system_parameter_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_system_parameter_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_system_parameter_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_system_parameter_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_system_parameter_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_system_parameter_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_system_parameter_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_system_parameter_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_system_parameter_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_system_parameter_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_source_info_proto #############

        set(googleapis_googleapis_google_api_source_info_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_source_info_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_source_info_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_source_info_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_source_info_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_source_info_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_source_info_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_source_info_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_source_info_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_source_info_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_source_info_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_source_info_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_source_info_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_source_info_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_source_info_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_source_info_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_source_info_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_source_info_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_source_info_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_source_info_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_source_info_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_source_info_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_source_info_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_source_info_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_source_info_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_source_info_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_source_info_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_source_info_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_source_info_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_source_info_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_source_info_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_routing_proto #############

        set(googleapis_googleapis_google_api_routing_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_routing_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_routing_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_routing_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_routing_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_routing_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_routing_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_routing_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_routing_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_routing_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_routing_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_routing_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_routing_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_routing_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_routing_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_routing_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_routing_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_routing_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_routing_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_routing_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_routing_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_routing_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_routing_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_routing_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_routing_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_routing_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_routing_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_routing_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_routing_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_routing_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_routing_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_resource_proto #############

        set(googleapis_googleapis_google_api_resource_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_resource_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_resource_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_resource_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_resource_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_resource_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_resource_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_resource_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_resource_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_resource_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_resource_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_resource_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_resource_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_resource_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_resource_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_resource_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_resource_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_resource_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_resource_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_resource_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_resource_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_resource_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_resource_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_resource_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_resource_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_resource_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_resource_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_resource_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_resource_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_resource_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_resource_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_monitored_resource_proto #############

        set(googleapis_googleapis_google_api_monitored_resource_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_monitored_resource_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_monitored_resource_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_monitored_resource_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_monitored_resource_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_monitored_resource_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_monitored_resource_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_monitored_resource_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_monitored_resource_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_monitored_resource_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_monitored_resource_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_monitored_resource_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_monitored_resource_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_monitored_resource_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_monitored_resource_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_monitored_resource_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_monitored_resource_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_monitored_resource_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_monitored_resource_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_monitored_resource_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_monitored_resource_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_monitored_resource_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_monitored_resource_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_monitored_resource_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_monitored_resource_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_monitored_resource_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_monitored_resource_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_monitored_resource_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_monitored_resource_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_monitored_resource_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_monitored_resource_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_metric_proto #############

        set(googleapis_googleapis_google_api_metric_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_metric_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_metric_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_metric_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_metric_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_metric_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_metric_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_metric_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_metric_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_metric_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_metric_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_metric_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_metric_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_metric_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_metric_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_metric_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_metric_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_metric_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_metric_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_metric_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_metric_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_metric_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_metric_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_metric_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_metric_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_metric_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_metric_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_metric_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_metric_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_metric_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_metric_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_log_proto #############

        set(googleapis_googleapis_google_api_log_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_log_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_log_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_log_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_log_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_log_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_log_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_log_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_log_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_log_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_log_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_log_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_log_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_log_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_log_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_log_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_log_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_log_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_log_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_log_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_log_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_log_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_log_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_log_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_log_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_log_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_log_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_log_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_log_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_log_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_log_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_launch_stage_proto #############

        set(googleapis_googleapis_google_api_launch_stage_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_launch_stage_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_launch_stage_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_launch_stage_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_launch_stage_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_launch_stage_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_launch_stage_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_launch_stage_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_launch_stage_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_launch_stage_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_launch_stage_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_launch_stage_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_launch_stage_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_launch_stage_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_launch_stage_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_launch_stage_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_launch_stage_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_launch_stage_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_launch_stage_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_launch_stage_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_launch_stage_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_launch_stage_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_launch_stage_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_launch_stage_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_launch_stage_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_launch_stage_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_launch_stage_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_launch_stage_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_launch_stage_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_launch_stage_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_launch_stage_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_label_proto #############

        set(googleapis_googleapis_google_api_label_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_label_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_label_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_label_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_label_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_label_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_label_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_label_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_label_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_label_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_label_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_label_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_label_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_label_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_label_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_label_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_label_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_label_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_label_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_label_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_label_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_label_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_label_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_label_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_label_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_label_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_label_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_label_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_label_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_label_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_label_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_httpbody_proto #############

        set(googleapis_googleapis_google_api_httpbody_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_httpbody_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_httpbody_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_httpbody_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_httpbody_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_httpbody_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_httpbody_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_httpbody_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_httpbody_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_httpbody_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_httpbody_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_httpbody_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_httpbody_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_httpbody_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_httpbody_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_httpbody_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_httpbody_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_httpbody_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_httpbody_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_httpbody_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_httpbody_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_httpbody_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_httpbody_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_httpbody_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_httpbody_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_httpbody_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_httpbody_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_httpbody_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_httpbody_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_httpbody_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_httpbody_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_http_proto #############

        set(googleapis_googleapis_google_api_http_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_http_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_http_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_http_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_http_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_http_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_http_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_http_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_http_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_http_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_http_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_http_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_http_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_http_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_http_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_http_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_http_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_http_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_http_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_http_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_http_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_http_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_http_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_http_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_http_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_http_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_http_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_http_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_http_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_http_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_http_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_field_behavior_proto #############

        set(googleapis_googleapis_google_api_field_behavior_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_field_behavior_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_field_behavior_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_field_behavior_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_field_behavior_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_field_behavior_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_field_behavior_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_field_behavior_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_field_behavior_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_field_behavior_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_field_behavior_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_field_behavior_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_field_behavior_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_field_behavior_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_field_behavior_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_field_behavior_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_field_behavior_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_field_behavior_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_field_behavior_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_field_behavior_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_field_behavior_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_field_behavior_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_field_behavior_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_field_behavior_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_field_behavior_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_field_behavior_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_field_behavior_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_field_behavior_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_field_behavior_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_field_behavior_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_field_behavior_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_documentation_proto #############

        set(googleapis_googleapis_google_api_documentation_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_documentation_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_documentation_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_documentation_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_documentation_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_documentation_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_documentation_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_documentation_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_documentation_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_documentation_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_documentation_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_documentation_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_documentation_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_documentation_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_documentation_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_documentation_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_documentation_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_documentation_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_documentation_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_documentation_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_documentation_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_documentation_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_documentation_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_documentation_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_documentation_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_documentation_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_documentation_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_documentation_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_documentation_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_documentation_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_documentation_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_control_proto #############

        set(googleapis_googleapis_google_api_control_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_control_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_control_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_control_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_control_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_control_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_control_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_control_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_control_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_control_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_control_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_control_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_control_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_control_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_control_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_control_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_control_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_control_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_control_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_control_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_control_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_control_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_control_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_control_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_control_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_control_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_control_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_control_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_control_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_control_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_control_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_context_proto #############

        set(googleapis_googleapis_google_api_context_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_context_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_context_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_context_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_context_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_context_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_context_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_context_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_context_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_context_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_context_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_context_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_context_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_context_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_context_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_context_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_context_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_context_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_context_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_context_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_context_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_context_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_context_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_context_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_context_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_context_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_context_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_context_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_context_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_context_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_context_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_consumer_proto #############

        set(googleapis_googleapis_google_api_consumer_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_consumer_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_consumer_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_consumer_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_consumer_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_consumer_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_consumer_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_consumer_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_consumer_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_consumer_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_consumer_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_consumer_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_consumer_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_consumer_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_consumer_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_consumer_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_consumer_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_consumer_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_consumer_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_consumer_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_consumer_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_consumer_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_consumer_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_consumer_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_consumer_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_consumer_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_consumer_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_consumer_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_consumer_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_consumer_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_consumer_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_config_change_proto #############

        set(googleapis_googleapis_google_api_config_change_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_config_change_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_config_change_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_config_change_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_config_change_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_config_change_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_config_change_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_config_change_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_config_change_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_config_change_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_config_change_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_config_change_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_config_change_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_config_change_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_config_change_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_config_change_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_config_change_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_config_change_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_config_change_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_config_change_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_config_change_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_config_change_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_config_change_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_config_change_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_config_change_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_config_change_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_config_change_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_config_change_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_config_change_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_config_change_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_config_change_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_client_proto #############

        set(googleapis_googleapis_google_api_client_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_client_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_client_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_client_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_client_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_client_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_client_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_client_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_client_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_client_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_client_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_client_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_client_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_client_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_client_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_client_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_client_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_client_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_client_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_client_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_client_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_client_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_client_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_client_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_client_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_client_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_client_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_client_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_client_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_client_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_client_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_api_backend_proto #############

        set(googleapis_googleapis_google_api_backend_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_api_backend_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_api_backend_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_api_backend_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_api_backend_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_api_backend_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_api_backend_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_api_backend_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_backend_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_backend_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_backend_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_api_backend_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_api_backend_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_api_backend_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_api_backend_proto_DEPS_TARGET
                                      googleapis_googleapis_google_api_backend_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_api_backend_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_api_backend_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_backend_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_backend_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_api_backend_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_api_backend_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_api_backend_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_api_backend_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_backend_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_backend_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_backend_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_backend_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_backend_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_api_backend_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_api_backend_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_actions_type_datetime_range_cc_proto #############

        set(googleapis_googleapis_google_actions_type_datetime_range_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_actions_type_datetime_range_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_actions_type_datetime_range_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_actions_type_datetime_range_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_actions_type_datetime_range_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_actions_type_datetime_range_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_actions_type_datetime_range_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_actions_type_datetime_range_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_actions_type_datetime_range_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_actions_type_datetime_range_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_actions_type_datetime_range_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_actions_type_datetime_range_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_actions_type_datetime_range_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_actions_type_datetime_range_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_actions_type_datetime_range_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_actions_type_datetime_range_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_actions_type_datetime_range_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_actions_type_datetime_range_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_actions_type_datetime_range_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_actions_type_datetime_range_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_actions_type_datetime_range_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_actions_type_datetime_range_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_actions_type_datetime_range_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_actions_type_datetime_range_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_actions_type_datetime_range_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_actions_type_datetime_range_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_actions_type_datetime_range_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_actions_type_datetime_range_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_actions_type_datetime_range_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_actions_type_datetime_range_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_actions_type_datetime_range_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_actions_type_date_range_cc_proto #############

        set(googleapis_googleapis_google_actions_type_date_range_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_actions_type_date_range_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_actions_type_date_range_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_actions_type_date_range_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_actions_type_date_range_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_actions_type_date_range_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_actions_type_date_range_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_actions_type_date_range_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_actions_type_date_range_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_actions_type_date_range_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_actions_type_date_range_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_actions_type_date_range_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_actions_type_date_range_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_actions_type_date_range_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_actions_type_date_range_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_actions_type_date_range_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_actions_type_date_range_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_actions_type_date_range_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_actions_type_date_range_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_actions_type_date_range_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_actions_type_date_range_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_actions_type_date_range_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_actions_type_date_range_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_actions_type_date_range_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_actions_type_date_range_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_actions_type_date_range_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_actions_type_date_range_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_actions_type_date_range_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_actions_type_date_range_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_actions_type_date_range_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_actions_type_date_range_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_actions_type_datetime_range_proto #############

        set(googleapis_googleapis_google_actions_type_datetime_range_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_actions_type_datetime_range_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_actions_type_datetime_range_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_actions_type_datetime_range_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_actions_type_datetime_range_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_actions_type_datetime_range_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_actions_type_datetime_range_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_actions_type_datetime_range_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_actions_type_datetime_range_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_actions_type_datetime_range_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_actions_type_datetime_range_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_actions_type_datetime_range_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_actions_type_datetime_range_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_actions_type_datetime_range_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_actions_type_datetime_range_proto_DEPS_TARGET
                                      googleapis_googleapis_google_actions_type_datetime_range_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_actions_type_datetime_range_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_actions_type_datetime_range_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_actions_type_datetime_range_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_actions_type_datetime_range_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_actions_type_datetime_range_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_actions_type_datetime_range_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_actions_type_datetime_range_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_actions_type_datetime_range_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_actions_type_datetime_range_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_actions_type_datetime_range_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_actions_type_datetime_range_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_actions_type_datetime_range_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_actions_type_datetime_range_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_actions_type_datetime_range_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_actions_type_datetime_range_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_actions_type_date_range_proto #############

        set(googleapis_googleapis_google_actions_type_date_range_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_actions_type_date_range_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_actions_type_date_range_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_actions_type_date_range_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_actions_type_date_range_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_actions_type_date_range_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_actions_type_date_range_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_actions_type_date_range_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_actions_type_date_range_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_actions_type_date_range_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_actions_type_date_range_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_actions_type_date_range_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_actions_type_date_range_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_actions_type_date_range_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_actions_type_date_range_proto_DEPS_TARGET
                                      googleapis_googleapis_google_actions_type_date_range_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_actions_type_date_range_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_actions_type_date_range_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_actions_type_date_range_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_actions_type_date_range_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_actions_type_date_range_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_actions_type_date_range_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_actions_type_date_range_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_actions_type_date_range_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_actions_type_date_range_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_actions_type_date_range_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_actions_type_date_range_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_actions_type_date_range_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_actions_type_date_range_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_actions_type_date_range_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_actions_type_date_range_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_dataproc_logging_logging_cc_proto #############

        set(googleapis_googleapis_google_cloud_dataproc_logging_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_dataproc_logging_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_dataproc_logging_logging_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_dataproc_logging_logging_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_dataproc_logging_logging_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_dataproc_logging_logging_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_dataproc_logging_logging_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_dataproc_logging_logging_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataproc_logging_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataproc_logging_logging_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataproc_logging_logging_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_dataproc_logging_logging_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_dataproc_logging_logging_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_dataproc_logging_logging_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_dataproc_logging_logging_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_dataproc_logging_logging_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_dataproc_logging_logging_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_dataproc_logging_logging_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataproc_logging_logging_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataproc_logging_logging_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_dataproc_logging_logging_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_dataproc_logging_logging_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_dataproc_logging_logging_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_dataproc_logging_logging_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataproc_logging_logging_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dataproc_logging_logging_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataproc_logging_logging_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dataproc_logging_logging_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataproc_logging_logging_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dataproc_logging_logging_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataproc_logging_logging_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_dataproc_logging_logging_proto #############

        set(googleapis_googleapis_google_cloud_dataproc_logging_logging_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_dataproc_logging_logging_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_dataproc_logging_logging_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_dataproc_logging_logging_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_dataproc_logging_logging_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_dataproc_logging_logging_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_dataproc_logging_logging_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_dataproc_logging_logging_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataproc_logging_logging_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataproc_logging_logging_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataproc_logging_logging_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_dataproc_logging_logging_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_dataproc_logging_logging_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_dataproc_logging_logging_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_dataproc_logging_logging_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_dataproc_logging_logging_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_dataproc_logging_logging_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_dataproc_logging_logging_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataproc_logging_logging_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataproc_logging_logging_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_dataproc_logging_logging_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_dataproc_logging_logging_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_dataproc_logging_logging_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_dataproc_logging_logging_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataproc_logging_logging_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dataproc_logging_logging_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataproc_logging_logging_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dataproc_logging_logging_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataproc_logging_logging_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_dataproc_logging_logging_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_dataproc_logging_logging_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_certificatemanager_logging_v1_logging_cc_proto #############

        set(googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_certificatemanager_logging_v1_logging_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_certificatemanager_logging_v1_logging_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_certificatemanager_logging_v1_logging_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_certificatemanager_logging_v1_logging_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_certificatemanager_logging_v1_logging_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_certificatemanager_logging_v1_logging_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_certificatemanager_logging_v1_logging_proto #############

        set(googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_certificatemanager_logging_v1_logging_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_certificatemanager_logging_v1_logging_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_certificatemanager_logging_v1_logging_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_certificatemanager_logging_v1_logging_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_certificatemanager_logging_v1_logging_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_certificatemanager_logging_v1_logging_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_certificatemanager_logging_v1_logging_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_metastore_logging_v1_logging_cc_proto #############

        set(googleapis_googleapis_google_cloud_metastore_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_metastore_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_metastore_logging_v1_logging_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_metastore_logging_v1_logging_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_metastore_logging_v1_logging_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_metastore_logging_v1_logging_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_metastore_logging_v1_logging_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_metastore_logging_v1_logging_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_logging_v1_logging_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_logging_v1_logging_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_metastore_logging_v1_logging_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_metastore_logging_v1_logging_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_metastore_logging_v1_logging_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_metastore_logging_v1_logging_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_metastore_logging_v1_logging_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_metastore_logging_v1_logging_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_metastore_logging_v1_logging_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_logging_v1_logging_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_logging_v1_logging_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_metastore_logging_v1_logging_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_metastore_logging_v1_logging_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_metastore_logging_v1_logging_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_metastore_logging_v1_logging_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_logging_v1_logging_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_metastore_logging_v1_logging_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_logging_v1_logging_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_metastore_logging_v1_logging_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_logging_v1_logging_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_metastore_logging_v1_logging_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_logging_v1_logging_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_metastore_logging_v1_logging_proto #############

        set(googleapis_googleapis_google_cloud_metastore_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_metastore_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_metastore_logging_v1_logging_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_metastore_logging_v1_logging_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_metastore_logging_v1_logging_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_metastore_logging_v1_logging_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_metastore_logging_v1_logging_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_metastore_logging_v1_logging_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_logging_v1_logging_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_logging_v1_logging_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_metastore_logging_v1_logging_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_metastore_logging_v1_logging_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_metastore_logging_v1_logging_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_metastore_logging_v1_logging_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_metastore_logging_v1_logging_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_metastore_logging_v1_logging_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_metastore_logging_v1_logging_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_logging_v1_logging_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_logging_v1_logging_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_metastore_logging_v1_logging_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_metastore_logging_v1_logging_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_metastore_logging_v1_logging_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_metastore_logging_v1_logging_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_logging_v1_logging_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_metastore_logging_v1_logging_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_logging_v1_logging_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_metastore_logging_v1_logging_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_logging_v1_logging_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_metastore_logging_v1_logging_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_metastore_logging_v1_logging_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_cc_proto #############

        set(googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_proto #############

        set(googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_cc_proto #############

        set(googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_proto #############

        set(googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_saasaccelerator_management_logs_v1_logs_cc_proto #############

        set(googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_saasaccelerator_management_logs_v1_logs_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_saasaccelerator_management_logs_v1_logs_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_saasaccelerator_management_logs_v1_logs_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_saasaccelerator_management_logs_v1_logs_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_saasaccelerator_management_logs_v1_logs_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_saasaccelerator_management_logs_v1_logs_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_saasaccelerator_management_logs_v1_logs_proto #############

        set(googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_saasaccelerator_management_logs_v1_logs_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_saasaccelerator_management_logs_v1_logs_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_saasaccelerator_management_logs_v1_logs_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_saasaccelerator_management_logs_v1_logs_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_saasaccelerator_management_logs_v1_logs_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_saasaccelerator_management_logs_v1_logs_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_saasaccelerator_management_logs_v1_logs_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_ids_logging_v1_logging_cc_proto #############

        set(googleapis_googleapis_google_cloud_ids_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_ids_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_ids_logging_v1_logging_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_ids_logging_v1_logging_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_ids_logging_v1_logging_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_ids_logging_v1_logging_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_ids_logging_v1_logging_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_ids_logging_v1_logging_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_ids_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_ids_logging_v1_logging_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_ids_logging_v1_logging_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_ids_logging_v1_logging_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_ids_logging_v1_logging_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_ids_logging_v1_logging_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_ids_logging_v1_logging_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_ids_logging_v1_logging_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_ids_logging_v1_logging_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_ids_logging_v1_logging_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_ids_logging_v1_logging_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_ids_logging_v1_logging_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_ids_logging_v1_logging_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_ids_logging_v1_logging_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_ids_logging_v1_logging_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_ids_logging_v1_logging_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_ids_logging_v1_logging_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_ids_logging_v1_logging_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_ids_logging_v1_logging_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_ids_logging_v1_logging_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_ids_logging_v1_logging_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_ids_logging_v1_logging_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_ids_logging_v1_logging_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_ids_logging_v1_logging_proto #############

        set(googleapis_googleapis_google_cloud_ids_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_ids_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_ids_logging_v1_logging_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_ids_logging_v1_logging_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_ids_logging_v1_logging_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_ids_logging_v1_logging_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_ids_logging_v1_logging_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_ids_logging_v1_logging_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_ids_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_ids_logging_v1_logging_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_ids_logging_v1_logging_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_ids_logging_v1_logging_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_ids_logging_v1_logging_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_ids_logging_v1_logging_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_ids_logging_v1_logging_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_ids_logging_v1_logging_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_ids_logging_v1_logging_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_ids_logging_v1_logging_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_ids_logging_v1_logging_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_ids_logging_v1_logging_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_ids_logging_v1_logging_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_ids_logging_v1_logging_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_ids_logging_v1_logging_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_ids_logging_v1_logging_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_ids_logging_v1_logging_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_ids_logging_v1_logging_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_ids_logging_v1_logging_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_ids_logging_v1_logging_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_ids_logging_v1_logging_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_ids_logging_v1_logging_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_ids_logging_v1_logging_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_secretmanager_logging_v1_logging_cc_proto #############

        set(googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_secretmanager_logging_v1_logging_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_secretmanager_logging_v1_logging_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_secretmanager_logging_v1_logging_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_secretmanager_logging_v1_logging_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_secretmanager_logging_v1_logging_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_secretmanager_logging_v1_logging_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_secretmanager_logging_v1_logging_proto #############

        set(googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_secretmanager_logging_v1_logging_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_secretmanager_logging_v1_logging_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_secretmanager_logging_v1_logging_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_secretmanager_logging_v1_logging_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_secretmanager_logging_v1_logging_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_secretmanager_logging_v1_logging_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_secretmanager_logging_v1_logging_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_workflows_type_type_cc_proto #############

        set(googleapis_googleapis_google_cloud_workflows_type_type_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_workflows_type_type_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_workflows_type_type_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_workflows_type_type_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_workflows_type_type_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_workflows_type_type_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_workflows_type_type_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_workflows_type_type_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_type_type_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_type_type_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_type_type_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_workflows_type_type_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_workflows_type_type_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_workflows_type_type_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_workflows_type_type_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_workflows_type_type_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_workflows_type_type_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_workflows_type_type_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_type_type_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_type_type_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_workflows_type_type_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_workflows_type_type_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_workflows_type_type_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_workflows_type_type_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_type_type_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_workflows_type_type_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_type_type_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_workflows_type_type_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_type_type_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_workflows_type_type_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_type_type_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_workflows_type_type_proto #############

        set(googleapis_googleapis_google_cloud_workflows_type_type_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_workflows_type_type_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_workflows_type_type_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_workflows_type_type_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_workflows_type_type_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_workflows_type_type_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_workflows_type_type_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_workflows_type_type_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_type_type_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_type_type_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_type_type_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_workflows_type_type_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_workflows_type_type_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_workflows_type_type_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_workflows_type_type_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_workflows_type_type_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_workflows_type_type_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_workflows_type_type_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_type_type_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_type_type_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_workflows_type_type_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_workflows_type_type_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_workflows_type_type_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_workflows_type_type_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_type_type_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_workflows_type_type_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_type_type_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_workflows_type_type_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_type_type_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_workflows_type_type_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_workflows_type_type_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_stream_logging_v1_logging_cc_proto #############

        set(googleapis_googleapis_google_cloud_stream_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_stream_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_stream_logging_v1_logging_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_stream_logging_v1_logging_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_stream_logging_v1_logging_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_stream_logging_v1_logging_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_stream_logging_v1_logging_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_stream_logging_v1_logging_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_stream_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_stream_logging_v1_logging_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_stream_logging_v1_logging_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_stream_logging_v1_logging_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_stream_logging_v1_logging_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_stream_logging_v1_logging_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_stream_logging_v1_logging_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_stream_logging_v1_logging_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_stream_logging_v1_logging_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_stream_logging_v1_logging_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_stream_logging_v1_logging_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_stream_logging_v1_logging_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_stream_logging_v1_logging_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_stream_logging_v1_logging_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_stream_logging_v1_logging_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_stream_logging_v1_logging_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_stream_logging_v1_logging_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_stream_logging_v1_logging_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_stream_logging_v1_logging_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_stream_logging_v1_logging_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_stream_logging_v1_logging_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_stream_logging_v1_logging_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_stream_logging_v1_logging_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_stream_logging_v1_logging_proto #############

        set(googleapis_googleapis_google_cloud_stream_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_stream_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_stream_logging_v1_logging_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_stream_logging_v1_logging_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_stream_logging_v1_logging_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_stream_logging_v1_logging_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_stream_logging_v1_logging_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_stream_logging_v1_logging_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_stream_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_stream_logging_v1_logging_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_stream_logging_v1_logging_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_stream_logging_v1_logging_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_stream_logging_v1_logging_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_stream_logging_v1_logging_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_stream_logging_v1_logging_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_stream_logging_v1_logging_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_stream_logging_v1_logging_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_stream_logging_v1_logging_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_stream_logging_v1_logging_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_stream_logging_v1_logging_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_stream_logging_v1_logging_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_stream_logging_v1_logging_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_stream_logging_v1_logging_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_stream_logging_v1_logging_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_stream_logging_v1_logging_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_stream_logging_v1_logging_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_stream_logging_v1_logging_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_stream_logging_v1_logging_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_stream_logging_v1_logging_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_stream_logging_v1_logging_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_stream_logging_v1_logging_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_networkanalyzer_logging_v1_logging_cc_proto #############

        set(googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_networkanalyzer_logging_v1_logging_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_networkanalyzer_logging_v1_logging_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_networkanalyzer_logging_v1_logging_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_networkanalyzer_logging_v1_logging_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_networkanalyzer_logging_v1_logging_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_networkanalyzer_logging_v1_logging_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_networkanalyzer_logging_v1_logging_proto #############

        set(googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_networkanalyzer_logging_v1_logging_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_networkanalyzer_logging_v1_logging_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_networkanalyzer_logging_v1_logging_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_networkanalyzer_logging_v1_logging_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_networkanalyzer_logging_v1_logging_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_networkanalyzer_logging_v1_logging_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_networkanalyzer_logging_v1_logging_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_extended_operations_cc_proto #############

        set(googleapis_googleapis_google_cloud_extended_operations_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_extended_operations_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_extended_operations_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_extended_operations_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_extended_operations_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_extended_operations_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_extended_operations_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_extended_operations_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_extended_operations_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_extended_operations_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_extended_operations_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_extended_operations_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_extended_operations_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_extended_operations_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_extended_operations_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_extended_operations_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_extended_operations_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_extended_operations_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_extended_operations_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_extended_operations_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_extended_operations_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_extended_operations_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_extended_operations_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_extended_operations_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_extended_operations_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_extended_operations_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_extended_operations_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_extended_operations_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_extended_operations_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_extended_operations_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_extended_operations_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_cloud_extended_operations_proto #############

        set(googleapis_googleapis_google_cloud_extended_operations_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_cloud_extended_operations_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_cloud_extended_operations_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_cloud_extended_operations_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_cloud_extended_operations_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_cloud_extended_operations_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_cloud_extended_operations_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_cloud_extended_operations_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_extended_operations_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_extended_operations_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_extended_operations_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_cloud_extended_operations_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_cloud_extended_operations_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_cloud_extended_operations_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_cloud_extended_operations_proto_DEPS_TARGET
                                      googleapis_googleapis_google_cloud_extended_operations_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_cloud_extended_operations_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_cloud_extended_operations_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_extended_operations_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_extended_operations_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_cloud_extended_operations_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_cloud_extended_operations_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_cloud_extended_operations_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_cloud_extended_operations_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_extended_operations_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_extended_operations_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_extended_operations_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_extended_operations_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_extended_operations_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_cloud_extended_operations_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_cloud_extended_operations_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_type_timeofday_cc_proto #############

        set(googleapis_googleapis_google_type_timeofday_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_type_timeofday_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_type_timeofday_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_type_timeofday_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_type_timeofday_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_type_timeofday_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_type_timeofday_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_type_timeofday_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_timeofday_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_timeofday_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_timeofday_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_type_timeofday_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_type_timeofday_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_type_timeofday_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_type_timeofday_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_type_timeofday_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_type_timeofday_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_type_timeofday_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_timeofday_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_timeofday_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_type_timeofday_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_type_timeofday_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_type_timeofday_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_type_timeofday_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_timeofday_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_timeofday_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_timeofday_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_timeofday_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_timeofday_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_timeofday_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_timeofday_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_type_quaternion_cc_proto #############

        set(googleapis_googleapis_google_type_quaternion_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_type_quaternion_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_type_quaternion_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_type_quaternion_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_type_quaternion_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_type_quaternion_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_type_quaternion_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_type_quaternion_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_quaternion_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_quaternion_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_quaternion_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_type_quaternion_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_type_quaternion_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_type_quaternion_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_type_quaternion_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_type_quaternion_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_type_quaternion_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_type_quaternion_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_quaternion_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_quaternion_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_type_quaternion_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_type_quaternion_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_type_quaternion_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_type_quaternion_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_quaternion_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_quaternion_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_quaternion_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_quaternion_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_quaternion_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_quaternion_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_quaternion_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_type_postal_address_cc_proto #############

        set(googleapis_googleapis_google_type_postal_address_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_type_postal_address_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_type_postal_address_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_type_postal_address_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_type_postal_address_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_type_postal_address_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_type_postal_address_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_type_postal_address_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_postal_address_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_postal_address_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_postal_address_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_type_postal_address_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_type_postal_address_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_type_postal_address_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_type_postal_address_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_type_postal_address_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_type_postal_address_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_type_postal_address_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_postal_address_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_postal_address_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_type_postal_address_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_type_postal_address_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_type_postal_address_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_type_postal_address_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_postal_address_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_postal_address_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_postal_address_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_postal_address_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_postal_address_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_postal_address_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_postal_address_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_type_phone_number_cc_proto #############

        set(googleapis_googleapis_google_type_phone_number_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_type_phone_number_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_type_phone_number_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_type_phone_number_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_type_phone_number_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_type_phone_number_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_type_phone_number_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_type_phone_number_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_phone_number_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_phone_number_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_phone_number_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_type_phone_number_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_type_phone_number_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_type_phone_number_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_type_phone_number_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_type_phone_number_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_type_phone_number_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_type_phone_number_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_phone_number_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_phone_number_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_type_phone_number_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_type_phone_number_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_type_phone_number_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_type_phone_number_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_phone_number_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_phone_number_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_phone_number_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_phone_number_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_phone_number_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_phone_number_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_phone_number_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_type_month_cc_proto #############

        set(googleapis_googleapis_google_type_month_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_type_month_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_type_month_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_type_month_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_type_month_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_type_month_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_type_month_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_type_month_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_month_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_month_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_month_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_type_month_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_type_month_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_type_month_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_type_month_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_type_month_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_type_month_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_type_month_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_month_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_month_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_type_month_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_type_month_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_type_month_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_type_month_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_month_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_month_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_month_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_month_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_month_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_month_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_month_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_type_money_cc_proto #############

        set(googleapis_googleapis_google_type_money_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_type_money_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_type_money_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_type_money_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_type_money_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_type_money_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_type_money_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_type_money_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_money_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_money_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_money_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_type_money_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_type_money_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_type_money_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_type_money_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_type_money_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_type_money_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_type_money_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_money_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_money_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_type_money_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_type_money_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_type_money_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_type_money_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_money_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_money_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_money_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_money_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_money_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_money_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_money_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_type_latlng_cc_proto #############

        set(googleapis_googleapis_google_type_latlng_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_type_latlng_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_type_latlng_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_type_latlng_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_type_latlng_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_type_latlng_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_type_latlng_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_type_latlng_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_latlng_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_latlng_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_latlng_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_type_latlng_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_type_latlng_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_type_latlng_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_type_latlng_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_type_latlng_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_type_latlng_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_type_latlng_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_latlng_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_latlng_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_type_latlng_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_type_latlng_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_type_latlng_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_type_latlng_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_latlng_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_latlng_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_latlng_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_latlng_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_latlng_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_latlng_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_latlng_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_type_interval_cc_proto #############

        set(googleapis_googleapis_google_type_interval_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_type_interval_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_type_interval_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_type_interval_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_type_interval_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_type_interval_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_type_interval_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_type_interval_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_interval_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_interval_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_interval_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_type_interval_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_type_interval_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_type_interval_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_type_interval_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_type_interval_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_type_interval_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_type_interval_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_interval_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_interval_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_type_interval_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_type_interval_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_type_interval_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_type_interval_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_interval_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_interval_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_interval_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_interval_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_interval_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_interval_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_interval_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_type_fraction_cc_proto #############

        set(googleapis_googleapis_google_type_fraction_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_type_fraction_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_type_fraction_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_type_fraction_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_type_fraction_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_type_fraction_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_type_fraction_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_type_fraction_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_fraction_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_fraction_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_fraction_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_type_fraction_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_type_fraction_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_type_fraction_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_type_fraction_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_type_fraction_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_type_fraction_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_type_fraction_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_fraction_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_fraction_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_type_fraction_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_type_fraction_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_type_fraction_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_type_fraction_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_fraction_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_fraction_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_fraction_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_fraction_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_fraction_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_fraction_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_fraction_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_type_expr_cc_proto #############

        set(googleapis_googleapis_google_type_expr_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_type_expr_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_type_expr_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_type_expr_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_type_expr_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_type_expr_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_type_expr_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_type_expr_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_expr_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_expr_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_expr_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_type_expr_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_type_expr_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_type_expr_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_type_expr_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_type_expr_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_type_expr_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_type_expr_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_expr_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_expr_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_type_expr_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_type_expr_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_type_expr_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_type_expr_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_expr_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_expr_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_expr_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_expr_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_expr_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_expr_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_expr_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_type_decimal_cc_proto #############

        set(googleapis_googleapis_google_type_decimal_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_type_decimal_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_type_decimal_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_type_decimal_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_type_decimal_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_type_decimal_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_type_decimal_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_type_decimal_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_decimal_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_decimal_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_decimal_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_type_decimal_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_type_decimal_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_type_decimal_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_type_decimal_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_type_decimal_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_type_decimal_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_type_decimal_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_decimal_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_decimal_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_type_decimal_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_type_decimal_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_type_decimal_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_type_decimal_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_decimal_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_decimal_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_decimal_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_decimal_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_decimal_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_decimal_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_decimal_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_type_dayofweek_cc_proto #############

        set(googleapis_googleapis_google_type_dayofweek_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_type_dayofweek_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_type_dayofweek_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_type_dayofweek_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_type_dayofweek_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_type_dayofweek_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_type_dayofweek_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_type_dayofweek_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_dayofweek_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_dayofweek_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_dayofweek_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_type_dayofweek_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_type_dayofweek_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_type_dayofweek_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_type_dayofweek_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_type_dayofweek_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_type_dayofweek_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_type_dayofweek_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_dayofweek_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_dayofweek_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_type_dayofweek_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_type_dayofweek_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_type_dayofweek_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_type_dayofweek_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_dayofweek_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_dayofweek_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_dayofweek_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_dayofweek_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_dayofweek_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_dayofweek_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_dayofweek_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_type_datetime_cc_proto #############

        set(googleapis_googleapis_google_type_datetime_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_type_datetime_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_type_datetime_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_type_datetime_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_type_datetime_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_type_datetime_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_type_datetime_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_type_datetime_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_datetime_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_datetime_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_datetime_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_type_datetime_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_type_datetime_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_type_datetime_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_type_datetime_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_type_datetime_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_type_datetime_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_type_datetime_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_datetime_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_datetime_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_type_datetime_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_type_datetime_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_type_datetime_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_type_datetime_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_datetime_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_datetime_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_datetime_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_datetime_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_datetime_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_datetime_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_datetime_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_type_date_cc_proto #############

        set(googleapis_googleapis_google_type_date_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_type_date_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_type_date_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_type_date_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_type_date_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_type_date_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_type_date_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_type_date_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_date_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_date_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_date_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_type_date_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_type_date_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_type_date_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_type_date_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_type_date_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_type_date_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_type_date_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_date_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_date_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_type_date_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_type_date_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_type_date_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_type_date_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_date_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_date_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_date_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_date_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_date_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_date_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_date_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_type_color_cc_proto #############

        set(googleapis_googleapis_google_type_color_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_type_color_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_type_color_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_type_color_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_type_color_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_type_color_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_type_color_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_type_color_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_color_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_color_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_color_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_type_color_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_type_color_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_type_color_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_type_color_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_type_color_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_type_color_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_type_color_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_color_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_color_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_type_color_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_type_color_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_type_color_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_type_color_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_color_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_color_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_color_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_color_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_color_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_color_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_color_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_type_calendar_period_cc_proto #############

        set(googleapis_googleapis_google_type_calendar_period_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_type_calendar_period_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_type_calendar_period_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_type_calendar_period_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_type_calendar_period_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_type_calendar_period_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_type_calendar_period_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_type_calendar_period_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_calendar_period_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_calendar_period_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_calendar_period_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_type_calendar_period_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_type_calendar_period_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_type_calendar_period_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_type_calendar_period_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_type_calendar_period_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_type_calendar_period_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_type_calendar_period_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_calendar_period_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_calendar_period_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_type_calendar_period_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_type_calendar_period_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_type_calendar_period_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_type_calendar_period_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_calendar_period_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_calendar_period_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_calendar_period_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_calendar_period_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_calendar_period_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_calendar_period_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_calendar_period_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_type_timeofday_proto #############

        set(googleapis_googleapis_google_type_timeofday_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_type_timeofday_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_type_timeofday_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_type_timeofday_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_type_timeofday_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_type_timeofday_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_type_timeofday_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_type_timeofday_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_timeofday_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_timeofday_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_timeofday_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_type_timeofday_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_type_timeofday_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_type_timeofday_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_type_timeofday_proto_DEPS_TARGET
                                      googleapis_googleapis_google_type_timeofday_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_type_timeofday_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_type_timeofday_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_timeofday_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_timeofday_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_type_timeofday_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_type_timeofday_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_type_timeofday_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_type_timeofday_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_timeofday_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_timeofday_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_timeofday_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_timeofday_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_timeofday_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_timeofday_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_timeofday_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_type_quaternion_proto #############

        set(googleapis_googleapis_google_type_quaternion_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_type_quaternion_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_type_quaternion_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_type_quaternion_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_type_quaternion_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_type_quaternion_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_type_quaternion_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_type_quaternion_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_quaternion_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_quaternion_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_quaternion_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_type_quaternion_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_type_quaternion_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_type_quaternion_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_type_quaternion_proto_DEPS_TARGET
                                      googleapis_googleapis_google_type_quaternion_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_type_quaternion_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_type_quaternion_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_quaternion_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_quaternion_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_type_quaternion_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_type_quaternion_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_type_quaternion_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_type_quaternion_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_quaternion_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_quaternion_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_quaternion_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_quaternion_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_quaternion_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_quaternion_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_quaternion_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_type_postal_address_proto #############

        set(googleapis_googleapis_google_type_postal_address_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_type_postal_address_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_type_postal_address_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_type_postal_address_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_type_postal_address_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_type_postal_address_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_type_postal_address_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_type_postal_address_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_postal_address_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_postal_address_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_postal_address_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_type_postal_address_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_type_postal_address_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_type_postal_address_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_type_postal_address_proto_DEPS_TARGET
                                      googleapis_googleapis_google_type_postal_address_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_type_postal_address_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_type_postal_address_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_postal_address_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_postal_address_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_type_postal_address_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_type_postal_address_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_type_postal_address_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_type_postal_address_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_postal_address_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_postal_address_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_postal_address_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_postal_address_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_postal_address_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_postal_address_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_postal_address_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_type_phone_number_proto #############

        set(googleapis_googleapis_google_type_phone_number_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_type_phone_number_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_type_phone_number_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_type_phone_number_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_type_phone_number_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_type_phone_number_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_type_phone_number_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_type_phone_number_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_phone_number_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_phone_number_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_phone_number_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_type_phone_number_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_type_phone_number_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_type_phone_number_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_type_phone_number_proto_DEPS_TARGET
                                      googleapis_googleapis_google_type_phone_number_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_type_phone_number_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_type_phone_number_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_phone_number_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_phone_number_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_type_phone_number_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_type_phone_number_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_type_phone_number_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_type_phone_number_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_phone_number_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_phone_number_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_phone_number_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_phone_number_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_phone_number_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_phone_number_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_phone_number_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_type_month_proto #############

        set(googleapis_googleapis_google_type_month_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_type_month_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_type_month_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_type_month_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_type_month_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_type_month_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_type_month_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_type_month_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_month_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_month_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_month_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_type_month_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_type_month_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_type_month_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_type_month_proto_DEPS_TARGET
                                      googleapis_googleapis_google_type_month_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_type_month_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_type_month_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_month_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_month_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_type_month_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_type_month_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_type_month_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_type_month_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_month_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_month_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_month_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_month_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_month_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_month_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_month_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_type_money_proto #############

        set(googleapis_googleapis_google_type_money_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_type_money_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_type_money_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_type_money_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_type_money_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_type_money_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_type_money_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_type_money_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_money_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_money_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_money_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_type_money_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_type_money_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_type_money_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_type_money_proto_DEPS_TARGET
                                      googleapis_googleapis_google_type_money_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_type_money_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_type_money_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_money_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_money_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_type_money_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_type_money_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_type_money_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_type_money_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_money_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_money_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_money_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_money_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_money_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_money_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_money_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_type_latlng_proto #############

        set(googleapis_googleapis_google_type_latlng_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_type_latlng_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_type_latlng_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_type_latlng_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_type_latlng_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_type_latlng_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_type_latlng_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_type_latlng_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_latlng_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_latlng_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_latlng_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_type_latlng_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_type_latlng_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_type_latlng_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_type_latlng_proto_DEPS_TARGET
                                      googleapis_googleapis_google_type_latlng_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_type_latlng_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_type_latlng_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_latlng_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_latlng_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_type_latlng_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_type_latlng_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_type_latlng_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_type_latlng_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_latlng_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_latlng_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_latlng_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_latlng_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_latlng_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_latlng_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_latlng_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_type_interval_proto #############

        set(googleapis_googleapis_google_type_interval_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_type_interval_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_type_interval_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_type_interval_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_type_interval_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_type_interval_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_type_interval_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_type_interval_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_interval_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_interval_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_interval_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_type_interval_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_type_interval_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_type_interval_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_type_interval_proto_DEPS_TARGET
                                      googleapis_googleapis_google_type_interval_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_type_interval_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_type_interval_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_interval_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_interval_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_type_interval_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_type_interval_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_type_interval_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_type_interval_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_interval_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_interval_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_interval_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_interval_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_interval_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_interval_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_interval_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_type_fraction_proto #############

        set(googleapis_googleapis_google_type_fraction_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_type_fraction_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_type_fraction_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_type_fraction_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_type_fraction_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_type_fraction_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_type_fraction_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_type_fraction_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_fraction_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_fraction_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_fraction_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_type_fraction_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_type_fraction_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_type_fraction_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_type_fraction_proto_DEPS_TARGET
                                      googleapis_googleapis_google_type_fraction_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_type_fraction_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_type_fraction_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_fraction_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_fraction_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_type_fraction_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_type_fraction_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_type_fraction_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_type_fraction_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_fraction_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_fraction_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_fraction_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_fraction_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_fraction_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_fraction_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_fraction_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_type_expr_proto #############

        set(googleapis_googleapis_google_type_expr_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_type_expr_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_type_expr_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_type_expr_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_type_expr_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_type_expr_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_type_expr_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_type_expr_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_expr_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_expr_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_expr_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_type_expr_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_type_expr_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_type_expr_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_type_expr_proto_DEPS_TARGET
                                      googleapis_googleapis_google_type_expr_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_type_expr_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_type_expr_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_expr_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_expr_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_type_expr_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_type_expr_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_type_expr_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_type_expr_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_expr_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_expr_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_expr_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_expr_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_expr_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_expr_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_expr_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_type_decimal_proto #############

        set(googleapis_googleapis_google_type_decimal_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_type_decimal_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_type_decimal_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_type_decimal_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_type_decimal_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_type_decimal_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_type_decimal_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_type_decimal_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_decimal_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_decimal_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_decimal_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_type_decimal_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_type_decimal_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_type_decimal_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_type_decimal_proto_DEPS_TARGET
                                      googleapis_googleapis_google_type_decimal_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_type_decimal_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_type_decimal_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_decimal_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_decimal_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_type_decimal_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_type_decimal_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_type_decimal_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_type_decimal_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_decimal_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_decimal_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_decimal_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_decimal_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_decimal_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_decimal_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_decimal_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_type_dayofweek_proto #############

        set(googleapis_googleapis_google_type_dayofweek_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_type_dayofweek_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_type_dayofweek_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_type_dayofweek_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_type_dayofweek_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_type_dayofweek_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_type_dayofweek_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_type_dayofweek_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_dayofweek_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_dayofweek_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_dayofweek_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_type_dayofweek_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_type_dayofweek_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_type_dayofweek_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_type_dayofweek_proto_DEPS_TARGET
                                      googleapis_googleapis_google_type_dayofweek_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_type_dayofweek_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_type_dayofweek_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_dayofweek_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_dayofweek_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_type_dayofweek_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_type_dayofweek_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_type_dayofweek_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_type_dayofweek_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_dayofweek_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_dayofweek_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_dayofweek_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_dayofweek_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_dayofweek_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_dayofweek_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_dayofweek_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_type_datetime_proto #############

        set(googleapis_googleapis_google_type_datetime_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_type_datetime_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_type_datetime_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_type_datetime_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_type_datetime_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_type_datetime_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_type_datetime_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_type_datetime_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_datetime_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_datetime_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_datetime_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_type_datetime_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_type_datetime_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_type_datetime_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_type_datetime_proto_DEPS_TARGET
                                      googleapis_googleapis_google_type_datetime_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_type_datetime_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_type_datetime_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_datetime_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_datetime_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_type_datetime_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_type_datetime_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_type_datetime_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_type_datetime_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_datetime_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_datetime_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_datetime_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_datetime_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_datetime_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_datetime_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_datetime_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_type_date_proto #############

        set(googleapis_googleapis_google_type_date_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_type_date_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_type_date_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_type_date_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_type_date_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_type_date_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_type_date_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_type_date_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_date_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_date_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_date_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_type_date_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_type_date_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_type_date_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_type_date_proto_DEPS_TARGET
                                      googleapis_googleapis_google_type_date_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_type_date_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_type_date_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_date_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_date_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_type_date_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_type_date_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_type_date_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_type_date_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_date_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_date_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_date_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_date_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_date_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_date_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_date_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_type_color_proto #############

        set(googleapis_googleapis_google_type_color_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_type_color_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_type_color_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_type_color_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_type_color_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_type_color_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_type_color_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_type_color_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_color_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_color_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_color_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_type_color_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_type_color_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_type_color_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_type_color_proto_DEPS_TARGET
                                      googleapis_googleapis_google_type_color_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_type_color_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_type_color_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_color_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_color_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_type_color_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_type_color_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_type_color_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_type_color_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_color_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_color_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_color_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_color_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_color_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_color_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_color_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_type_calendar_period_proto #############

        set(googleapis_googleapis_google_type_calendar_period_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_type_calendar_period_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_type_calendar_period_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_type_calendar_period_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_type_calendar_period_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_type_calendar_period_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_type_calendar_period_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_type_calendar_period_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_calendar_period_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_calendar_period_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_calendar_period_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_type_calendar_period_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_type_calendar_period_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_type_calendar_period_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_type_calendar_period_proto_DEPS_TARGET
                                      googleapis_googleapis_google_type_calendar_period_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_type_calendar_period_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_type_calendar_period_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_calendar_period_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_calendar_period_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_type_calendar_period_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_type_calendar_period_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_type_calendar_period_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_type_calendar_period_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_calendar_period_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_calendar_period_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_calendar_period_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_calendar_period_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_calendar_period_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_type_calendar_period_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_type_calendar_period_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_networking_trafficdirector_type_type_cc_proto #############

        set(googleapis_googleapis_google_networking_trafficdirector_type_type_cc_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_networking_trafficdirector_type_type_cc_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_networking_trafficdirector_type_type_cc_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_networking_trafficdirector_type_type_cc_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_networking_trafficdirector_type_type_cc_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_networking_trafficdirector_type_type_cc_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_networking_trafficdirector_type_type_cc_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_networking_trafficdirector_type_type_cc_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_networking_trafficdirector_type_type_cc_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_networking_trafficdirector_type_type_cc_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_networking_trafficdirector_type_type_cc_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_networking_trafficdirector_type_type_cc_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_networking_trafficdirector_type_type_cc_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_networking_trafficdirector_type_type_cc_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_networking_trafficdirector_type_type_cc_proto_DEPS_TARGET
                                      googleapis_googleapis_google_networking_trafficdirector_type_type_cc_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_networking_trafficdirector_type_type_cc_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_networking_trafficdirector_type_type_cc_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_networking_trafficdirector_type_type_cc_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_networking_trafficdirector_type_type_cc_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_networking_trafficdirector_type_type_cc_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_networking_trafficdirector_type_type_cc_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_networking_trafficdirector_type_type_cc_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_networking_trafficdirector_type_type_cc_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_networking_trafficdirector_type_type_cc_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_networking_trafficdirector_type_type_cc_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_networking_trafficdirector_type_type_cc_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_networking_trafficdirector_type_type_cc_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_networking_trafficdirector_type_type_cc_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_networking_trafficdirector_type_type_cc_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_networking_trafficdirector_type_type_cc_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## COMPONENT googleapis::google_networking_trafficdirector_type_type_proto #############

        set(googleapis_googleapis_google_networking_trafficdirector_type_type_proto_FRAMEWORKS_FOUND_RELEASE "")
        conan_find_apple_frameworks(googleapis_googleapis_google_networking_trafficdirector_type_type_proto_FRAMEWORKS_FOUND_RELEASE "${googleapis_googleapis_google_networking_trafficdirector_type_type_proto_FRAMEWORKS_RELEASE}" "${googleapis_googleapis_google_networking_trafficdirector_type_type_proto_FRAMEWORK_DIRS_RELEASE}")

        set(googleapis_googleapis_google_networking_trafficdirector_type_type_proto_LIBRARIES_TARGETS "")

        ######## Create an interface target to contain all the dependencies (frameworks, system and conan deps)
        if(NOT TARGET googleapis_googleapis_google_networking_trafficdirector_type_type_proto_DEPS_TARGET)
            add_library(googleapis_googleapis_google_networking_trafficdirector_type_type_proto_DEPS_TARGET INTERFACE IMPORTED)
        endif()

        set_property(TARGET googleapis_googleapis_google_networking_trafficdirector_type_type_proto_DEPS_TARGET
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_networking_trafficdirector_type_type_proto_FRAMEWORKS_FOUND_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_networking_trafficdirector_type_type_proto_SYSTEM_LIBS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_networking_trafficdirector_type_type_proto_DEPENDENCIES_RELEASE}>
                     APPEND)

        ####### Find the libraries declared in cpp_info.component["xxx"].libs,
        ####### create an IMPORTED target for each one and link the 'googleapis_googleapis_google_networking_trafficdirector_type_type_proto_DEPS_TARGET' to all of them
        conan_package_library_targets("${googleapis_googleapis_google_networking_trafficdirector_type_type_proto_LIBS_RELEASE}"
                                      "${googleapis_googleapis_google_networking_trafficdirector_type_type_proto_LIB_DIRS_RELEASE}"
                                      googleapis_googleapis_google_networking_trafficdirector_type_type_proto_DEPS_TARGET
                                      googleapis_googleapis_google_networking_trafficdirector_type_type_proto_LIBRARIES_TARGETS
                                      "_RELEASE"
                                      "googleapis_googleapis_google_networking_trafficdirector_type_type_proto")

        ########## TARGET PROPERTIES #####################################
        set_property(TARGET googleapis::google_networking_trafficdirector_type_type_proto
                     PROPERTY INTERFACE_LINK_LIBRARIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_networking_trafficdirector_type_type_proto_OBJECTS_RELEASE}>
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_networking_trafficdirector_type_type_proto_LIBRARIES_TARGETS}>
                     APPEND)

        if("${googleapis_googleapis_google_networking_trafficdirector_type_type_proto_LIBS_RELEASE}" STREQUAL "")
            # If the component is not declaring any "cpp_info.components['foo'].libs" the system, frameworks etc are not
            # linked to the imported targets and we need to do it to the global target
            set_property(TARGET googleapis::google_networking_trafficdirector_type_type_proto
                         PROPERTY INTERFACE_LINK_LIBRARIES
                         googleapis_googleapis_google_networking_trafficdirector_type_type_proto_DEPS_TARGET
                         APPEND)
        endif()

        set_property(TARGET googleapis::google_networking_trafficdirector_type_type_proto PROPERTY INTERFACE_LINK_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_networking_trafficdirector_type_type_proto_LINKER_FLAGS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_networking_trafficdirector_type_type_proto PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_networking_trafficdirector_type_type_proto_INCLUDE_DIRS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_networking_trafficdirector_type_type_proto PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_networking_trafficdirector_type_type_proto_COMPILE_DEFINITIONS_RELEASE}> APPEND)
        set_property(TARGET googleapis::google_networking_trafficdirector_type_type_proto PROPERTY INTERFACE_COMPILE_OPTIONS
                     $<$<CONFIG:Release>:${googleapis_googleapis_google_networking_trafficdirector_type_type_proto_COMPILE_OPTIONS_RELEASE}> APPEND)

    ########## AGGREGATED GLOBAL TARGET WITH THE COMPONENTS #####################
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_asset_v1_asset_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_asset_v1_asset_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_storage_v2_storage_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_storage_v2_storage_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_storage_v1_storage_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_storage_v1_storage_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_identity_accesscontextmanager_v1_accesscontextmanager_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_identity_accesscontextmanager_v1_accesscontextmanager_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_bigtable_admin_v2_admin_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_bigtable_admin_v2_admin_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_spanner_admin_instance_v1_instance_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_spanner_admin_instance_v1_instance_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_spanner_admin_database_v1_database_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_spanner_admin_database_v1_database_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_billing_v1_billing_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_billing_v1_billing_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_datacatalog_v1_datacatalog_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_datacatalog_v1_datacatalog_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_run_v2_run_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_run_v2_run_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_functions_v1_functions_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_functions_v1_functions_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_sensitiveaction_logging_v1_logging_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_sensitiveaction_logging_v1_logging_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_servicedirectory_v1_servicedirectory_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_servicedirectory_v1_servicedirectory_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_iap_v1_iap_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_iap_v1_iap_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_iot_v1_iot_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_iot_v1_iot_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_bigquery_dataexchange_v1beta1_dataexchange_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_bigquery_dataexchange_v1beta1_dataexchange_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_bigquery_logging_v1_logging_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_bigquery_logging_v1_logging_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_bigquery_datapolicies_v1beta1_datapolicies_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_bigquery_datapolicies_v1beta1_datapolicies_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_bigquery_analyticshub_v1_analyticshub_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_bigquery_analyticshub_v1_analyticshub_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_bigquery_connection_v1_connection_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_bigquery_connection_v1_connection_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_secretmanager_v1_secretmanager_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_secretmanager_v1_secretmanager_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_dataplex_v1_dataplex_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_dataplex_v1_dataplex_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_securitycenter_v1_securitycenter_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_securitycenter_v1_securitycenter_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_gkehub_v1_gkehub_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_gkehub_v1_gkehub_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_tasks_v2_tasks_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_tasks_v2_tasks_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_aiplatform_v1_aiplatform_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_aiplatform_v1_aiplatform_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_resourcemanager_v3_resourcemanager_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_resourcemanager_v3_resourcemanager_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_resourcemanager_v2_resourcemanager_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_resourcemanager_v2_resourcemanager_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_devtools_containeranalysis_v1_containeranalysis_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_devtools_containeranalysis_v1_containeranalysis_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_devtools_artifactregistry_v1_artifactregistry_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_devtools_artifactregistry_v1_artifactregistry_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_iam_admin_v1_admin_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_iam_admin_v1_admin_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_iam_v1_iam_policy_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_iam_v1_iam_policy_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_appengine_v1_appengine_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_appengine_v1_appengine_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_firestore_admin_v1_admin_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_firestore_admin_v1_admin_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_logging_v2_logging_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_logging_v2_logging_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_streetview_publish_v1_publish_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_streetview_publish_v1_publish_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_monitoring_v3_monitoring_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_monitoring_v3_monitoring_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_monitoring_metricsscope_v1_metricsscope_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_monitoring_metricsscope_v1_metricsscope_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_serviceusage_v1_serviceusage_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_serviceusage_v1_serviceusage_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_servicecontrol_v1_servicecontrol_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_servicecontrol_v1_servicecontrol_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_expr_v1beta1_decl_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_expr_v1beta1_decl_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_apikeys_v2_apikeys_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_apikeys_v2_apikeys_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_servicemanagement_v1_servicemanagement_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_servicemanagement_v1_servicemanagement_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_service_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_service_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_sql_v1_sql_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_sql_v1_sql_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_sql_v1beta4_sql_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_sql_v1beta4_sql_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_managedidentities_v1beta1_managedidentities_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_managedidentities_v1beta1_managedidentities_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_managedidentities_v1_managedidentities_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_managedidentities_v1_managedidentities_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_baremetalsolution_v2_baremetalsolution_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_baremetalsolution_v2_baremetalsolution_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_dataproc_v1_dataproc_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_dataproc_v1_dataproc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_certificatemanager_v1_certificatemanager_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_certificatemanager_v1_certificatemanager_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_pubsublite_v1_pubsublite_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_pubsublite_v1_pubsublite_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_talent_v4_talent_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_talent_v4_talent_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_talent_v4beta1_talent_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_talent_v4beta1_talent_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_metastore_v1alpha_metastore_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_metastore_v1alpha_metastore_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_metastore_v1_metastore_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_metastore_v1_metastore_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_apigateway_v1_apigateway_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_apigateway_v1_apigateway_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_billing_budgets_v1_budgets_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_billing_budgets_v1_budgets_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_visionai_v1alpha1_visionai_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_visionai_v1alpha1_visionai_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_osconfig_agentendpoint_v1beta_agentendpoint_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_osconfig_agentendpoint_v1_agentendpoint_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_osconfig_agentendpoint_v1_agentendpoint_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_osconfig_v1beta_osconfig_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_osconfig_v1beta_osconfig_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_osconfig_v1alpha_osconfig_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_osconfig_v1alpha_osconfig_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_osconfig_v1_osconfig_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_osconfig_v1_osconfig_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_notebooks_v1_notebooks_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_notebooks_v1_notebooks_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_dataform_v1beta1_dataform_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_dataform_v1beta1_dataform_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_dataform_v1alpha2_dataform_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_dataform_v1alpha2_dataform_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_vmwareengine_v1_vmwareengine_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_vmwareengine_v1_vmwareengine_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_assuredworkloads_v1beta1_assuredworkloads_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_assuredworkloads_v1beta1_assuredworkloads_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_assuredworkloads_v1_assuredworkloads_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_assuredworkloads_v1_assuredworkloads_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_policytroubleshooter_v1_policytroubleshooter_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_policytroubleshooter_v1_policytroubleshooter_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_networksecurity_v1beta1_networksecurity_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_networksecurity_v1beta1_networksecurity_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_tpu_v1_tpu_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_tpu_v1_tpu_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_gsuiteaddons_v1_gsuiteaddons_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_gsuiteaddons_v1_gsuiteaddons_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_apigeeconnect_v1_apigeeconnect_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_apigeeconnect_v1_apigeeconnect_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_functions_v2alpha_functions_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_functions_v2alpha_functions_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_functions_v2_functions_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_functions_v2_functions_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_functions_v2beta_functions_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_functions_v2beta_functions_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_texttospeech_v1_texttospeech_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_texttospeech_v1_texttospeech_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_orchestration_airflow_service_v1_service_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_orchestration_airflow_service_v1_service_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_gkemulticloud_v1_gkemulticloud_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_gkemulticloud_v1_gkemulticloud_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_contentwarehouse_v1_contentwarehouse_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_contentwarehouse_v1_contentwarehouse_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_paymentgateway_issuerswitch_v1_issuerswitch_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_eventarc_publishing_v1_publishing_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_eventarc_publishing_v1_publishing_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_eventarc_v1_eventarc_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_eventarc_v1_eventarc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_batch_v1alpha_batch_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_batch_v1alpha_batch_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_batch_v1_batch_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_batch_v1_batch_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_networkconnectivity_v1_networkconnectivity_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_networkconnectivity_v1_networkconnectivity_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_timeseriesinsights_v1_timeseriesinsights_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_timeseriesinsights_v1_timeseriesinsights_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_clouddms_v1_clouddms_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_clouddms_v1_clouddms_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_audit_audit_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_audit_audit_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_recommender_logging_v1_logging_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_recommender_logging_v1_logging_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_recommender_v1beta1_recommender_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_recommender_v1beta1_recommender_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_recommender_v1_recommender_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_recommender_v1_recommender_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_edgecontainer_v1_edgecontainer_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_edgecontainer_v1_edgecontainer_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_memcache_v1_memcache_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_memcache_v1_memcache_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_channel_v1_channel_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_channel_v1_channel_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_gkebackup_v1_gkebackup_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_gkebackup_v1_gkebackup_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_videointelligence_v1_videointelligence_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_videointelligence_v1_videointelligence_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_ids_v1_ids_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_ids_v1_ids_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_speech_v2_speech_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_speech_v2_speech_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_speech_v1_speech_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_speech_v1_speech_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_automl_v1_automl_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_automl_v1_automl_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_vision_v1_vision_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_vision_v1_vision_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_bigquery_migration_v2_migration_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_bigquery_migration_v2_migration_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_bigquery_v2_bigquery_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_bigquery_v2_bigquery_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_bigquery_datatransfer_v1_datatransfer_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_bigquery_datatransfer_v1_datatransfer_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_bigquery_storage_v1beta1_storage_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_bigquery_storage_v1beta1_storage_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_bigquery_storage_v1beta2_storage_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_bigquery_storage_v1beta2_storage_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_bigquery_storage_v1_storage_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_bigquery_storage_v1_storage_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_bigquery_reservation_v1_reservation_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_bigquery_reservation_v1_reservation_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_retail_v2alpha_retail_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_retail_v2alpha_retail_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_retail_v2_retail_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_retail_v2_retail_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_retail_v2beta_retail_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_retail_v2beta_retail_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_language_v1beta2_language_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_language_v1beta2_language_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_language_v1_language_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_language_v1_language_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_scheduler_v1_scheduler_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_scheduler_v1_scheduler_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_workflows_executions_v1_executions_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_workflows_executions_v1_executions_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_workflows_v1_workflows_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_workflows_v1_workflows_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_vmmigration_v1_vmmigration_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_vmmigration_v1_vmmigration_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_datafusion_v1_datafusion_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_datafusion_v1_datafusion_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_filestore_v1_filestore_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_filestore_v1_filestore_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_contactcenterinsights_v1_contactcenterinsights_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_contactcenterinsights_v1_contactcenterinsights_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_recaptchaenterprise_v1_recaptchaenterprise_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_recaptchaenterprise_v1_recaptchaenterprise_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_optimization_v1_optimization_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_optimization_v1_optimization_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_websecurityscanner_v1_websecurityscanner_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_websecurityscanner_v1_websecurityscanner_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_location_location_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_location_location_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_deploy_v1_deploy_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_deploy_v1_deploy_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_accessapproval_v1_accessapproval_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_accessapproval_v1_accessapproval_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_shell_v1_shell_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_shell_v1_shell_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_redis_v1beta1_redis_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_redis_v1beta1_redis_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_redis_v1_redis_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_redis_v1_redis_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_translate_v3_translation_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_translate_v3_translation_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_security_publicca_v1beta1_publicca_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_security_publicca_v1beta1_publicca_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_security_privateca_v1_privateca_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_security_privateca_v1_privateca_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_documentai_v1_documentai_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_documentai_v1_documentai_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_documentai_v1beta3_documentai_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_documentai_v1beta3_documentai_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_storageinsights_v1_storageinsights_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_storageinsights_v1_storageinsights_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_dialogflow_cx_v3_cx_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_dialogflow_cx_v3_cx_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_dialogflow_cx_v3beta1_cx_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_dialogflow_cx_v3beta1_cx_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_dialogflow_v2_dialogflow_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_dialogflow_v2_dialogflow_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_dialogflow_v2beta1_dialogflow_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_dialogflow_v2beta1_dialogflow_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_identitytoolkit_v2_identitytoolkit_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_identitytoolkit_v2_identitytoolkit_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_networkmanagement_v1_networkmanagement_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_networkmanagement_v1_networkmanagement_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_gkeconnect_gateway_v1_gateway_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_gkeconnect_gateway_v1_gateway_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_gkehub_v1beta1_gkehub_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_gkehub_v1beta1_gkehub_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_gkehub_v1alpha2_gkehub_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_gkehub_v1alpha2_gkehub_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_gkehub_v1_multiclusteringress_multiclusteringress_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_gkehub_v1_configmanagement_configmanagement_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_gkehub_v1_configmanagement_configmanagement_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_oslogin_v1_oslogin_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_oslogin_v1_oslogin_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_vpcaccess_v1_vpcaccess_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_vpcaccess_v1_vpcaccess_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_domains_v1_domains_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_domains_v1_domains_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_discoveryengine_v1beta_discoveryengine_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_discoveryengine_v1beta_discoveryengine_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_aiplatform_v1_schema_predict_instance_instance_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_aiplatform_v1_schema_predict_instance_instance_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_aiplatform_v1_schema_predict_params_params_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_aiplatform_v1_schema_predict_params_params_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_aiplatform_v1_schema_predict_prediction_prediction_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_aiplatform_v1_schema_predict_prediction_prediction_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_aiplatform_v1_schema_trainingjob_definition_definition_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_networkservices_v1beta1_networkservices_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_networkservices_v1beta1_networkservices_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_networkservices_v1_networkservices_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_networkservices_v1_networkservices_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_video_livestream_logging_v1_logging_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_video_livestream_logging_v1_logging_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_video_livestream_v1_livestream_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_video_livestream_v1_livestream_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_video_stitcher_v1_stitcher_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_video_stitcher_v1_stitcher_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_video_transcoder_v1_transcoder_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_video_transcoder_v1_transcoder_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_resourcesettings_v1_resourcesettings_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_resourcesettings_v1_resourcesettings_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_gaming_v1_gaming_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_gaming_v1_gaming_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_kms_v1_kms_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_kms_v1_kms_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_beyondcorp_appconnections_v1_appconnections_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_beyondcorp_appconnections_v1_appconnections_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_beyondcorp_clientgateways_v1_clientgateways_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_beyondcorp_clientgateways_v1_clientgateways_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_beyondcorp_clientconnectorservices_v1_clientconnectorservices_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_beyondcorp_appconnectors_v1_appconnectors_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_beyondcorp_appconnectors_v1_appconnectors_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_beyondcorp_appgateways_v1_appgateways_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_beyondcorp_appgateways_v1_appgateways_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_apigeeregistry_v1_apigeeregistry_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_apigeeregistry_v1_apigeeregistry_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_connectors_v1_connectors_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_connectors_v1_connectors_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_binaryauthorization_v1_binaryauthorization_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_binaryauthorization_v1_binaryauthorization_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_datastream_v1_datastream_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_datastream_v1_datastream_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_enterpriseknowledgegraph_v1_enterpriseknowledgegraph_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_webrisk_v1beta1_webrisk_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_webrisk_v1beta1_webrisk_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_webrisk_v1_webrisk_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_webrisk_v1_webrisk_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_orgpolicy_v2_orgpolicy_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_orgpolicy_v2_orgpolicy_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_orgpolicy_v1_orgpolicy_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_orgpolicy_v1_orgpolicy_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_commerce_consumer_procurement_v1alpha1_procurement_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_commerce_consumer_procurement_v1alpha1_procurement_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_essentialcontacts_v1_essentialcontacts_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_essentialcontacts_v1_essentialcontacts_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_devtools_clouddebugger_v2_clouddebugger_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_devtools_clouddebugger_v2_clouddebugger_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_devtools_build_v1_build_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_devtools_build_v1_build_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_devtools_cloudprofiler_v2_cloudprofiler_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_devtools_cloudprofiler_v2_cloudprofiler_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_devtools_cloudtrace_v2_cloudtrace_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_devtools_cloudtrace_v2_cloudtrace_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_devtools_cloudtrace_v1_cloudtrace_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_devtools_cloudtrace_v1_cloudtrace_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_devtools_testing_v1_testing_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_devtools_testing_v1_testing_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_devtools_cloudbuild_v1_cloudbuild_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_devtools_cloudbuild_v1_cloudbuild_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_devtools_source_v1_source_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_devtools_source_v1_source_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_devtools_resultstore_v2_resultstore_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_devtools_resultstore_v2_resultstore_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_iam_credentials_v1_credentials_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_iam_credentials_v1_credentials_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_iam_v2_iam_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_iam_v2_iam_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_iam_v2beta_iam_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_iam_v2beta_iam_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_iam_v1_logging_logging_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_iam_v1_logging_audit_data_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_iam_v1_policy_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_iam_v1_options_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_iam_v1_options_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_iam_v1_policy_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_datastore_admin_v1_admin_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_datastore_admin_v1_admin_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_datastore_v1_datastore_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_datastore_v1_datastore_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_container_v1alpha1_container_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_container_v1alpha1_container_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_container_v1beta1_container_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_container_v1beta1_container_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_container_v1_container_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_container_v1_container_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_partner_aistreams_v1alpha1_aistreams_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_partner_aistreams_v1alpha1_aistreams_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_longrunning_longrunning_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_longrunning_operations_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_chromeos_uidetection_v1_uidetection_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_chromeos_uidetection_v1_uidetection_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_appengine_logging_v1_logging_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_appengine_logging_v1_logging_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_appengine_legacy_legacy_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_appengine_legacy_legacy_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_example_library_v1_library_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_example_library_v1_library_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_firestore_bundle_firestore_bundle_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_firestore_bundle_firestore_bundle_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_firestore_v1_firestore_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_firestore_v1_firestore_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_identity_accesscontextmanager_type_type_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_identity_accesscontextmanager_type_type_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_privacy_dlp_v2_dlp_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_privacy_dlp_v2_dlp_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_bigtable_v2_bigtable_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_bigtable_v2_bigtable_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_maps_routes_v1_routes_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_maps_routes_v1_routes_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_maps_routing_v2_routing_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_maps_routing_v2_routing_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_maps_roads_v1op_roads_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_maps_roads_v1op_roads_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_maps_regionlookup_v1alpha_regionlookup_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_maps_regionlookup_v1alpha_regionlookup_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_maps_addressvalidation_v1_addressvalidation_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_maps_addressvalidation_v1_addressvalidation_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_maps_mapsplatformdatasets_v1alpha_mapsplatformdatasets_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_dataflow_v1beta3_dataflow_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_dataflow_v1beta3_dataflow_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::grafeas_v1_grafeas_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::grafeas_v1_grafeas_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_analytics_data_v1beta_data_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_analytics_data_v1beta_data_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_analytics_data_v1alpha_data_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_analytics_data_v1alpha_data_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_analytics_admin_v1beta_admin_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_analytics_admin_v1beta_admin_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_analytics_admin_v1alpha_admin_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_analytics_admin_v1alpha_admin_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_logging_type_type_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_logging_type_type_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_monitoring_dashboard_v1_dashboard_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_monitoring_dashboard_v1_dashboard_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_spanner_v1_spanner_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_spanner_v1_spanner_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_pubsub_v1_pubsub_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_pubsub_v1_pubsub_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_servicecontrol_v2_servicecontrol_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_servicecontrol_v2_servicecontrol_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_expr_conformance_v1alpha1_conformance_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_expr_conformance_v1alpha1_conformance_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_expr_v1alpha1_explain_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_expr_v1alpha1_eval_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_expr_v1alpha1_checked_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_expr_v1alpha1_explain_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_expr_v1alpha1_eval_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_expr_v1alpha1_checked_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_expr_v1beta1_expr_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_expr_v1beta1_eval_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_expr_v1beta1_expr_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_expr_v1beta1_eval_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_usage_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_quota_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_monitoring_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_logging_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_endpoint_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_distribution_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_billing_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_auth_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_annotations_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_usage_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_quota_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_monitoring_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_logging_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_endpoint_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_distribution_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_billing_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_auth_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_annotations_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_cloudsetup_logging_v1_logging_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_cloudsetup_logging_v1_logging_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_notebooks_logging_v1_logging_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_notebooks_logging_v1_logging_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_gsuiteaddons_logging_v1_logging_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_gsuiteaddons_logging_v1_logging_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_clouddms_logging_v1_logging_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_clouddms_logging_v1_logging_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_common_common_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_common_common_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_gkebackup_logging_v1_logging_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_gkebackup_logging_v1_logging_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_healthcare_logging_logging_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_healthcare_logging_logging_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_identitytoolkit_logging_logging_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_identitytoolkit_logging_logging_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_oslogin_common_common_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_oslogin_common_common_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_aiplatform_logging_logging_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_aiplatform_logging_logging_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_geo_type_viewport_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_geo_type_viewport_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_storagetransfer_logging_logging_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_storagetransfer_logging_logging_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_chat_logging_v1_logging_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_chat_logging_v1_logging_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_apps_script_type_gmail_gmail_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_apps_script_type_drive_drive_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_apps_script_type_slides_slides_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_apps_script_type_docs_docs_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_apps_script_type_sheets_sheets_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_apps_script_type_calendar_calendar_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_apps_script_type_type_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_rpc_context_attribute_context_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_rpc_context_attribute_context_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_rpc_status_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_rpc_error_details_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_rpc_code_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_rpc_status_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_rpc_error_details_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_rpc_code_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_expr_v1alpha1_value_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_expr_v1alpha1_syntax_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_expr_v1alpha1_value_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_expr_v1alpha1_syntax_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_expr_v1beta1_value_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_expr_v1beta1_source_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_expr_v1beta1_value_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_expr_v1beta1_source_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_visibility_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_system_parameter_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_source_info_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_routing_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_resource_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_monitored_resource_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_metric_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_log_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_launch_stage_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_label_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_httpbody_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_http_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_field_behavior_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_documentation_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_control_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_context_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_consumer_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_config_change_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_client_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_backend_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_visibility_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_system_parameter_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_source_info_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_routing_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_resource_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_monitored_resource_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_metric_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_log_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_launch_stage_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_label_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_httpbody_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_http_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_field_behavior_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_documentation_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_control_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_context_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_consumer_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_config_change_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_client_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_api_backend_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_actions_type_datetime_range_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_actions_type_date_range_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_actions_type_datetime_range_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_actions_type_date_range_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_dataproc_logging_logging_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_dataproc_logging_logging_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_certificatemanager_logging_v1_logging_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_certificatemanager_logging_v1_logging_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_metastore_logging_v1_logging_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_metastore_logging_v1_logging_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_assuredworkloads_regulatoryintercept_logging_v1_logging_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_kubernetes_security_containersecurity_logging_containersecurity_logging_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_saasaccelerator_management_logs_v1_logs_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_saasaccelerator_management_logs_v1_logs_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_ids_logging_v1_logging_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_ids_logging_v1_logging_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_secretmanager_logging_v1_logging_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_secretmanager_logging_v1_logging_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_workflows_type_type_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_workflows_type_type_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_stream_logging_v1_logging_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_stream_logging_v1_logging_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_networkanalyzer_logging_v1_logging_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_networkanalyzer_logging_v1_logging_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_extended_operations_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_cloud_extended_operations_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_type_timeofday_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_type_quaternion_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_type_postal_address_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_type_phone_number_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_type_month_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_type_money_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_type_latlng_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_type_interval_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_type_fraction_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_type_expr_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_type_decimal_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_type_dayofweek_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_type_datetime_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_type_date_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_type_color_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_type_calendar_period_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_type_timeofday_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_type_quaternion_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_type_postal_address_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_type_phone_number_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_type_month_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_type_money_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_type_latlng_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_type_interval_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_type_fraction_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_type_expr_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_type_decimal_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_type_dayofweek_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_type_datetime_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_type_date_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_type_color_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_type_calendar_period_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_networking_trafficdirector_type_type_cc_proto APPEND)
    set_property(TARGET googleapis::googleapis PROPERTY INTERFACE_LINK_LIBRARIES googleapis::google_networking_trafficdirector_type_type_proto APPEND)

########## For the modules (FindXXX)
set(googleapis_LIBRARIES_RELEASE googleapis::googleapis)
